
::main { ::mandelbrot::main }

::mandelbrot::center {
  tup(w0 +0.0)
  ::std::numeric::F32::neg::neg = fn(+0.8 w0)
}

::std::numeric::F32::neg::neg { fn(@f32_sub$(+0.0 out) out) }

::mandelbrot::main {
  fn(ref(w1 w9) _)
  ::mandelbrot::main::1 = x(x(w1 w9) 0)
}

::mandelbrot::main::1 {
  x(w7 w5)
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(45 _) ?(::mandelbrot::main::3 ::mandelbrot::main::2 x(w7 w1))))
}

::mandelbrot::main::2 {
  x(x(w9 w16) dup22(w11 w5))
  ::mandelbrot::main::4 = x(x(w9 w13) x(w11 0))
  ::std::IO::print_char = fn(ref(w13 w2) fn(10 _))
  ::std::numeric::N32::add::add = fn(w5 fn(1 w6))
  ::mandelbrot::main::1 = x(x(w2 w16) w6)
}

::mandelbrot::main::3 { x(x(w2 w2) _) }

::mandelbrot::main::4 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(125 _) ?(::mandelbrot::main::6 ::mandelbrot::main::5 x(w8 x(w6 w1)))))
}

::mandelbrot::main::5 {
  x(x(w33 w41) x(dup34(w3 w39) dup35(w0 w28)))
  ::std::numeric::F32::from_n32::cast = fn(w0 w1)
  ::std::numeric::F32::add::add = fn(w1 fn(+0.5 w2))
  ::std::numeric::F32::from_n32::cast = fn(w3 w4)
  ::std::numeric::F32::add::add = fn(w4 fn(+0.5 w5))
  ::std::numeric::F32::from_n32::cast = fn(125 w7)
  ::std::numeric::F32::from_n32::cast = fn(45 w8)
  ::std::ops::vectorized::div_scalar::div::1 = fn(tup(w7 w8) fn(+2.0 w10))
  ::std::ops::vectorized::sub::sub::1 = fn(tup(w2 w5) fn(w10 w11))
  ::std::ops::vectorized::mul_scalar::mul::1 = fn(w11 fn(+2.6 w14))
  ::std::numeric::F32::from_n32::cast = fn(125 w15)
  ::std::ops::vectorized::div_scalar::div::1 = fn(w14 fn(w15 w16))
  ::std::ops::vectorized::mul::mul::1 = fn(w16 fn(tup(+1.0 +2.0) w18))
  ::std::ops::vectorized::add::add::1 = fn(::mandelbrot::center fn(w18 tup(w20 w21)))
  ::mandelbrot = fn(w20 fn(w21 ?(32 35 w37)))
  ::std::IO::print_char = fn(ref(w33 w24) fn(w37 _))
  ::std::numeric::N32::add::add = fn(w28 fn(1 w29))
  ::mandelbrot::main::4 = x(x(w24 w41) x(w39 w29))
}

::mandelbrot::main::6 { x(x(w3 w3) _) }

::std::numeric::N32::ord::lt { fn(ref(dup44(w0 @n32_lt(w10 out)) w0) fn(ref(dup45(w3 w10) w3) out)) }

::std::ops::vectorized::sub::sub::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::F32::sub::sub = fn(w0 fn(w3 w10))
  ::std::numeric::F32::sub::sub = fn(w1 fn(w4 w13))
}

::std::numeric::F32::sub::sub { fn(@f32_sub(w1 out) fn(w1 out)) }

::std::numeric::F32::add::add { fn(@f32_add(w1 out) fn(w1 out)) }

::std::numeric::F32::from_n32::cast { fn(@n32_to_f32(0 out) out) }

::std::ops::vectorized::div_scalar::div::1 {
  fn(tup(w0 w1) fn(dup67(w7 w10) tup(w8 w11)))
  ::std::numeric::F32::div::div = fn(w0 fn(w7 w8))
  ::std::numeric::F32::div::div = fn(w1 fn(w10 w11))
}

::std::numeric::F32::div::div { fn(@f32_div(w1 out) fn(w1 out)) }

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::F32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::F32::add::add = fn(w1 fn(w4 w13))
}

::std::ops::vectorized::mul::mul::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::F32::mul::mul = fn(w0 fn(w3 w10))
  ::std::numeric::F32::mul::mul = fn(w1 fn(w4 w13))
}

::std::numeric::F32::mul::mul { fn(@f32_mul(w1 out) fn(w1 out)) }

::std::ops::vectorized::mul_scalar::mul::1 {
  fn(tup(w0 w1) fn(dup92(w7 w10) tup(w8 w11)))
  ::std::numeric::F32::mul::mul = fn(w0 fn(w7 w8))
  ::std::numeric::F32::mul::mul = fn(w1 fn(w10 w11))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::mandelbrot {
  fn(w0 fn(w1 w13))
  ::mandelbrot::1 = x(w0 x(w1 x(+0.0 x(+0.0 x(+0.0 x(+0.0 x(128 w16)))))))
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) w13))
}

::mandelbrot::1 {
  x(w17 x(w16 x(w15 x(w14 x(dup113(w5 w21) x(dup114(w6 w20) x(w11 w19)))))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w11 w1) fn(ref(0 _) w4))
  ::std::numeric::F32::add::add = fn(w5 fn(w6 w7))
  ::std::numeric::F32::lt = fn(w7 fn(+4.0 w8))
  ::std::logical::Bool::and::and = fn(w4 fn(w8 ?(::mandelbrot::3 ::mandelbrot::2 x(w17 x(w16 x(w15 x(w14 x(w21 x(w20 x(w1 w19))))))))))
}

::mandelbrot::2 {
  x(dup118(w5 w40) x(dup119(w11 w39) x(w30 x(w29 x(w28 x(w27 x(w26 w34)))))))
  ::std::numeric::N32::sub::sub = fn(w26 fn(1 w1))
  ::std::numeric::F32::sub::sub = fn(w28 fn(w27 w4))
  ::std::numeric::F32::add::add = fn(w4 fn(w5 w6))
  ::std::numeric::F32::mul::mul = fn(+2.0 fn(w30 w8))
  ::std::numeric::F32::mul::mul = fn(w8 fn(w29 w10))
  ::std::numeric::F32::add::add = fn(w10 fn(w11 w12))
  tup(w6 w12) = tup(dup121(w17 dup121(w18 w38)) dup123(w21 dup123(w22 w37)))
  ::std::numeric::F32::mul::mul = fn(w17 fn(w18 w19))
  ::std::numeric::F32::mul::mul = fn(w21 fn(w22 w23))
  ::mandelbrot::1 = x(w40 x(w39 x(w38 x(w37 x(w19 x(w23 x(w1 w34)))))))
}

::mandelbrot::3 { x(_ x(_ x(_ x(_ x(_ x(_ x(w1 w1))))))) }

::std::logical::Bool::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::eq { fn(ref(dup146(w0 @n32_eq(w10 out)) w0) fn(ref(dup147(w3 w10) w3) out)) }

::std::numeric::F32::lt { fn(@f32_lt(w1 out) fn(w1 out)) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

