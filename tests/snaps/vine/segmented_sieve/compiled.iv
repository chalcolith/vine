
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::segmented_sieve::main }

::segmented_sieve::main {
  fn(ref(w1 w29) _)
  ::std::numeric::N32::sqrt = fn(1000000 dup5(w7 w21))
  ::std::numeric::N32::sub::sub = fn(w7 fn(1 w8))
  ::std::data::Array::new = fn(w8 fn(1 w9))
  ::segmented_sieve::main::1 = x(x(w1 w24) x(x(w21 w22) x(w9 x(x(2 w19) x(tup(0 tup(w15 w15)) w17)))))
  ::segmented_sieve::main::12 = x(x(w24 w29) x(w22 x(w19 w17)))
}

::segmented_sieve::main::1 {
  x(w13 x(w11 x(w9 w8)))
  ::std::data::Array::pop_front = fn(ref(w9 w1) enum(::segmented_sieve::main::4 enum(::segmented_sieve::main::5 x(w13 x(w11 x(w1 w8))))))
}

::segmented_sieve::main::4 {
  enum(?(::segmented_sieve::main::8 ::segmented_sieve::main::7 x(x(w10 w27) x(x(w8 w25) x(x(w6 w23) x(w21 x(x(w3 w20) x(w11 _))))))) x(x(w10 w36) x(x(w8 w34) x(w6 x(x(dup34(w11 w13) w31) x(w3 w29))))))
  ::std::numeric::N32::add::add = fn(w13 fn(1 dup35(w21 w30)))
  ::segmented_sieve::main::1 = x(x(w27 w36) x(x(w25 w34) x(w23 x(x(w30 w31) x(w20 w29)))))
}

::segmented_sieve::main::5 { x(x(w8 w8) x(x(w6 w6) x(_ x(x(w3 w3) x(w1 w1))))) }

::segmented_sieve::main::7 {
  x(x(w25 w1) x(w23 x(w21 x(w19 x(x(w18 w7) x(dup56(w3 dup56(w9 dup56(w11 dup56(w12 w27)))) _))))))
  ::std::numeric::N32::to_string::to_string = fn(w3 w4)
  ::std::IO::println = fn(ref(w25 w1) fn(w4 _))
  ::std::data::List::push_back = fn(ref(w18 w7) fn(w9 _))
  ::std::numeric::N32::mul::mul = fn(w11 fn(w12 w13))
  ::segmented_sieve::main::9 = x(w23 x(w21 x(w19 x(w27 w13))))
}

::segmented_sieve::main::8 { x(x(w10 w10) x(x(w8 w8) x(x(w6 w6) x(_ x(x(w3 w3) _))))) }

::segmented_sieve::main::9 {
  x(x(w13 w20) x(w11 x(w9 x(w8 w7))))
  ::std::numeric::N32::ord::le = fn(ref(w7 w1) fn(ref(w13 w4) ?(::segmented_sieve::main::11 ::segmented_sieve::main::10 x(x(w4 w20) x(w11 x(w9 x(w8 w1)))))))
}

::segmented_sieve::main::10 {
  x(w18 x(x(w16 w23) x(dup77(w4 w21) x(dup78(w9 w20) dup79(w3 w10)))))
  ::std::numeric::N32::sub::sub = fn(w3 fn(w4 w5))
  ::std::data::Array::get = fn(ref(w16 w1) fn(w5 ref(_ 0)))
  ::std::numeric::N32::add::add = fn(w10 fn(w9 w11))
  ::segmented_sieve::main::9 = x(w18 x(x(w1 w23) x(w21 x(w20 w11))))
}

::segmented_sieve::main::11 { x(x(w6 w6) x(x(w4 w4) _)) }

::segmented_sieve::main::12 {
  x(w9 x(w7 x(w6 w5)))
  ::std::numeric::N32::ord::lt = fn(ref(w6 w1) fn(ref(1000000 _) ?(::segmented_sieve::main::14 ::segmented_sieve::main::13 x(w9 x(w7 x(w1 w5))))))
}

::segmented_sieve::main::13 {
  x(x(w22 w36) x(dup92(w1 dup92(w15 w34)) x(dup93(w0 dup93(w6 dup93(w27 dup93(w13 w16)))) dup95(w10 w32))))
  ::std::numeric::N32::add::add = fn(w0 fn(w1 w2))
  ::std::numeric::N32::min = fn(w2 fn(1000000 dup96(w5 w26)))
  ::std::numeric::N32::sub::sub = fn(w5 fn(w6 w7))
  ::std::data::Array::new = fn(w7 fn(1 w8))
  ::std::data::List::into_iter = fn(w10 w11)
  ::segmented_sieve::main::15 = x(w27 x(w26 x(x(w8 w25) w11)))
  ::segmented_sieve::main::23 = x(x(w22 w31) x(w25 w13))
  ::std::numeric::N32::add::add = fn(w16 fn(w15 w17))
  ::segmented_sieve::main::12 = x(x(w31 w36) x(w34 x(w17 w32)))
}

::segmented_sieve::main::14 { x(x(w4 w4) _) }

::segmented_sieve::main::15 {
  x(w9 x(w8 x(w7 w5)))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::segmented_sieve::main::18 enum(::segmented_sieve::main::19 x(w9 x(w8 x(w7 w1))))))
}

::segmented_sieve::main::18 {
  enum(dup116(w7 dup116(w8 dup116(w12 dup116(w15 w20)))) x(dup109(w10 dup109(w25 w30)) x(w5 x(x(w4 w28) w2))))
  ::std::numeric::N32::mul::mul = fn(w7 fn(w8 w9))
  ::std::numeric::N32::sub::sub = fn(w10 fn(1 w11))
  ::std::numeric::N32::div::div = fn(w11 fn(w12 w13))
  ::std::numeric::N32::add::add = fn(w13 fn(1 w14))
  ::std::numeric::N32::mul::mul = fn(w14 fn(w15 w16))
  ::std::numeric::N32::max = fn(w9 fn(w16 w17))
  ::segmented_sieve::main::20 = x(w25 x(x(w5 w24) x(x(w4 w22) x(w20 w17))))
  ::segmented_sieve::main::15 = x(w30 x(w24 x(x(w22 w28) w2)))
}

::segmented_sieve::main::19 { x(_ x(_ x(x(w2 w2) _))) }

::segmented_sieve::main::20 {
  x(w13 x(x(w12 w19) x(w10 x(w8 w7))))
  ::std::numeric::N32::ord::lt = fn(ref(w7 w1) fn(ref(w12 w4) ?(::segmented_sieve::main::22 ::segmented_sieve::main::21 x(w13 x(x(w4 w19) x(w10 x(w8 w1)))))))
}

::segmented_sieve::main::21 {
  x(dup129(w4 w25) x(w17 x(x(w15 w22) x(dup135(w9 w20) dup136(w3 w10)))))
  ::std::numeric::N32::sub::sub = fn(w3 fn(w4 w5))
  ::std::data::Array::get = fn(ref(w15 w1) fn(w5 ref(_ 0)))
  ::std::numeric::N32::add::add = fn(w10 fn(w9 w11))
  ::segmented_sieve::main::20 = x(w25 x(w17 x(x(w1 w22) x(w20 w11))))
}

::segmented_sieve::main::22 { x(_ x(x(w5 w5) x(x(w3 w3) _))) }

::segmented_sieve::main::23 {
  x(w8 x(w6 w5))
  ::std::data::Array::pop_front = fn(ref(w6 w1) enum(::segmented_sieve::main::26 enum(::segmented_sieve::main::27 x(w8 x(w1 w5)))))
}

::segmented_sieve::main::26 {
  enum(?(::segmented_sieve::main::30 ::segmented_sieve::main::29 x(x(w5 w13) x(w11 _))) x(x(w5 w17) x(w3 dup150(w11 w7))))
  ::std::numeric::N32::add::add = fn(w7 fn(1 w8))
  ::segmented_sieve::main::23 = x(x(w13 w17) x(w3 w8))
}

::segmented_sieve::main::27 { x(x(w3 w3) _) }

::segmented_sieve::main::29 {
  x(x(w9 w1) x(w7 _))
  ::std::numeric::N32::to_string::to_string = fn(w7 w4)
  ::std::IO::println = fn(ref(w9 w1) fn(w4 _))
}

::segmented_sieve::main::30 { x(x(w3 w3) _) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup183(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup189(w0 @n32_ne(w10 out)) w0) fn(ref(dup190(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::le { fn(ref(dup219(w0 @n32_le(w10 out)) w0) fn(ref(dup220(w3 w10) w3) out)) }

::std::numeric::N32::ord::lt { fn(ref(dup223(w0 @n32_lt(w10 out)) w0) fn(ref(dup224(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::new {
  fn(dup559(w4 w5) fn(w1 tup(w4 w7)))
  ::std::data::Array::Node::new = fn(w5 fn(w1 w7))
}

::std::numeric::N32::eq::eq { fn(ref(dup606(w0 @n32_eq(w10 out)) w0) fn(ref(dup607(w3 w10) w3) out)) }

::std::data::Array::get {
  fn(ref(tup(dup668(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup683(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::pop_front {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_front::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_front::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup834(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(ref(w2 w41) x(w30 w37))
  ref(w2 w5) = ref(tup(w8 w10) tup(w39 w21))
  tup(w10 w8) = tup(w17 w18)
  ::std::numeric::N32::add::add = fn(w30 fn(1 w25))
  ::std::numeric::N32::div::div = fn(w25 fn(2 w26))
  ::std::numeric::N32::eq::eq = fn(ref(w26 w33) fn(ref(1 _) ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w33 x(x(w5 w41) x(x(w17 w39) w37)))))))
}

::std::data::Array::pop_front::8 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) enum(enum(w3 w17) enum(_ w17))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::new {
  fn(w0 fn(w1 w11))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w7) fn(ref(1 _) ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(w7 x(w1 w11)))))
}

::std::data::Array::Node::new::2 {
  x(_ x(w3 w1))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w3 w1)
}

::std::data::Array::Node::new::3 {
  x(dup883(w0 w5) x(dup884(w3 w7) tup(w4 w8)))
  ::std::numeric::N32::add::add = fn(w0 fn(1 w1))
  ::std::numeric::N32::div::div = fn(w1 fn(2 w2))
  ::std::data::Array::Node::new = fn(w2 fn(w3 w4))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::new = fn(w6 fn(w7 w8))
}

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N32::min {
  fn(w0 fn(w1 w13))
  ::std::numeric::N32::ord::lt = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::min::3 ::std::numeric::N32::min::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::min::2 { x(w3 x(_ w3)) }

::std::numeric::N32::min::3 { x(_ x(w2 w2)) }

::std::numeric::N32::max {
  fn(w0 fn(w1 w13))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::max::3 ::std::numeric::N32::max::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::max::2 { x(w3 x(_ w3)) }

::std::numeric::N32::max::3 { x(_ x(w2 w2)) }

::std::numeric::N32::sqrt {
  fn(w0 w8)
  ::std::numeric::N32::sqrt::1 = x(w0 x(32768 x(0 w8)))
}

::std::numeric::N32::sqrt::1 {
  x(w8 x(w7 w6))
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::sqrt::3 ::std::numeric::N32::sqrt::2 x(w8 x(w1 w6)))))
}

::std::numeric::N32::sqrt::2 {
  x(w10 x(dup1752(w1 w5) x(dup1755(w0 w21) w24)))
  ::std::numeric::N32::add::add = fn(w0 fn(w1 dup1757(w11 dup1757(w12 w20))))
  ::std::numeric::N32::mul::mul = fn(w11 fn(w12 w13))
  ::std::numeric::N32::ord::le = fn(ref(w13 _) fn(ref(w10 w16) ?(::std::numeric::N32::sqrt::6 ::std::numeric::N32::sqrt::5 x(x(w21 w22) x(w20 _)))))
  ::std::numeric::N32::shr::shr = fn(w5 fn(1 w6))
  ::std::numeric::N32::sqrt::1 = x(w16 x(w6 x(w22 w24)))
}

::std::numeric::N32::sqrt::3 { x(_ x(_ x(w1 w1))) }

::std::numeric::N32::sqrt::5 { x(x(_ w3) x(w3 _)) }

::std::numeric::N32::sqrt::6 { x(x(w3 w3) _) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

