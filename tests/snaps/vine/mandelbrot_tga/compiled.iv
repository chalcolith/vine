
::main { ::mandelbrot_tga::main }

::mandelbrot_tga::center {
  tup(w0 +0.0)
  ::std::numeric::F32::neg::neg = fn(+0.8 w0)
}

::std::numeric::F32::neg::neg { fn(@sub$(0 out) out) }

::std::numeric::F32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::numeric::F32::from_n32::cast { fn(@add(+0.0 out) out) }

::mandelbrot_tga::main {
  fn(ref(w1 w17) _)
  ::std::numeric::N32::shr::shr = fn(1024 fn(8 w8))
  ::std::numeric::N32::shr::shr = fn(1024 fn(8 w9))
  ::std::IO::print_bytes = fn(ref(w1 w6) fn(tup(18 tup(tup(0 tup(0 tup(3 tup(0 tup(0 tup(0 tup(0 tup(0 tup(0 tup(0 tup(0 tup(0 tup(1024 tup(w8 tup(1024 tup(w9 tup(8 tup(32 w14)))))))))))))))))) w14)) _))
  ::mandelbrot_tga::main::1 = x(x(w6 w17) 0)
}

::mandelbrot_tga::main::1 {
  x(w7 w5)
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(1024 _) ?(::mandelbrot_tga::main::3 ::mandelbrot_tga::main::2 x(w7 w1))))
}

::mandelbrot_tga::main::2 {
  x(x(w5 w12) dup30(w7 w1))
  ::mandelbrot_tga::main::4 = x(x(w5 w9) x(w7 0))
  ::std::numeric::N32::add::add = fn(w1 fn(1 w2))
  ::mandelbrot_tga::main::1 = x(x(w9 w12) w2)
}

::mandelbrot_tga::main::3 { x(x(w2 w2) _) }

::mandelbrot_tga::main::4 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(1024 _) ?(::mandelbrot_tga::main::6 ::mandelbrot_tga::main::5 x(w8 x(w6 w1)))))
}

::mandelbrot_tga::main::5 {
  x(x(w33 w37) x(dup42(w3 w35) dup43(w0 w28)))
  ::std::numeric::F32::from_n32::cast = fn(w0 w1)
  ::std::numeric::F32::add::add = fn(w1 fn(+0.5 w2))
  ::std::numeric::F32::from_n32::cast = fn(w3 w4)
  ::std::numeric::F32::add::add = fn(w4 fn(+0.5 w5))
  ::std::numeric::F32::from_n32::cast = fn(1024 w7)
  ::std::numeric::F32::from_n32::cast = fn(1024 w8)
  ::std::ops::vectorized::div_scalar::div::1 = fn(tup(w7 w8) fn(+2.0 w10))
  ::std::ops::vectorized::sub::sub::1 = fn(tup(w2 w5) fn(w10 w11))
  ::std::ops::vectorized::mul_scalar::mul::1 = fn(w11 fn(+2.6 w14))
  ::std::numeric::F32::from_n32::cast = fn(1024 w15)
  ::std::ops::vectorized::div_scalar::div::1 = fn(w14 fn(w15 w16))
  ::std::ops::vectorized::add::add::1 = fn(::mandelbrot_tga::center fn(w16 tup(w18 w19)))
  ::mandelbrot_tga::mandelbrot = fn(w18 fn(w19 w26))
  ::std::IO::print_byte = fn(ref(w33 w22) fn(w26 _))
  ::std::numeric::N32::add::add = fn(w28 fn(1 w29))
  ::mandelbrot_tga::main::4 = x(x(w22 w37) x(w35 w29))
}

::mandelbrot_tga::main::6 { x(x(w3 w3) _) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::lt { fn(ref(dup53(w0 @lt(w10 out)) w0) fn(ref(dup54(w3 w10) w3) out)) }

::std::ops::vectorized::sub::sub::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::F32::sub::sub = fn(w0 fn(w3 w10))
  ::std::numeric::F32::sub::sub = fn(w1 fn(w4 w13))
}

::std::numeric::F32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::numeric::F32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::ops::vectorized::div_scalar::div::1 {
  fn(tup(w0 w1) fn(dup73(w7 w10) tup(w8 w11)))
  ::std::numeric::F32::div::div = fn(w0 fn(w7 w8))
  ::std::numeric::F32::div::div = fn(w1 fn(w10 w11))
}

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::F32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::F32::add::add = fn(w1 fn(w4 w13))
}

::std::ops::vectorized::mul_scalar::mul::1 {
  fn(tup(w0 w1) fn(dup84(w7 w10) tup(w8 w11)))
  ::std::numeric::F32::mul::mul = fn(w0 fn(w7 w8))
  ::std::numeric::F32::mul::mul = fn(w1 fn(w10 w11))
}

::std::numeric::F32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::mandelbrot_tga::mandelbrot {
  fn(w0 fn(w1 w11))
  ::mandelbrot_tga::mandelbrot::1 = x(w0 x(w1 x(+0.0 x(+0.0 x(+0.0 x(+0.0 x(0 w14)))))))
  ::std::numeric::N32::mul::mul = fn(w14 fn(256 w10))
  ::std::numeric::N32::div::div = fn(w10 fn(64 w11))
}

::mandelbrot_tga::mandelbrot::1 {
  x(w17 x(w16 x(w15 x(w14 x(dup109(w5 w21) x(dup110(w6 w20) x(w11 w19)))))))
  ::std::numeric::N32::ord::lt = fn(ref(w11 w1) fn(ref(64 _) w4))
  ::std::numeric::F32::add::add = fn(w5 fn(w6 w7))
  ::std::numeric::F32::lt = fn(w7 fn(+4.0 w8))
  ::std::logical::Bool::and::and = fn(w4 fn(w8 ?(::mandelbrot_tga::mandelbrot::3 ::mandelbrot_tga::mandelbrot::2 x(w17 x(w16 x(w15 x(w14 x(w21 x(w20 x(w1 w19))))))))))
}

::mandelbrot_tga::mandelbrot::2 {
  x(dup114(w5 w40) x(dup115(w11 w39) x(w30 x(w29 x(w28 x(w27 x(w26 w34)))))))
  ::std::numeric::N32::add::add = fn(w26 fn(1 w1))
  ::std::numeric::F32::sub::sub = fn(w28 fn(w27 w4))
  ::std::numeric::F32::add::add = fn(w4 fn(w5 w6))
  ::std::numeric::F32::mul::mul = fn(+2.0 fn(w30 w8))
  ::std::numeric::F32::mul::mul = fn(w8 fn(w29 w10))
  ::std::numeric::F32::add::add = fn(w10 fn(w11 w12))
  tup(w6 w12) = tup(dup117(w17 dup117(w18 w38)) dup119(w21 dup119(w22 w37)))
  ::std::numeric::F32::mul::mul = fn(w17 fn(w18 w19))
  ::std::numeric::F32::mul::mul = fn(w21 fn(w22 w23))
  ::mandelbrot_tga::mandelbrot::1 = x(w40 x(w39 x(w38 x(w37 x(w19 x(w23 x(w1 w34)))))))
}

::mandelbrot_tga::mandelbrot::3 { x(_ x(_ x(_ x(_ x(_ x(_ x(w1 w1))))))) }

::std::logical::Bool::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::ne { fn(ref(dup191(w0 @ne(w10 out)) w0) fn(ref(dup192(w3 w10) w3) out)) }

::std::numeric::F32::lt { fn(@lt(w1 out) fn(w1 out)) }

::std::IO::print_bytes {
  fn(ref(w1 w14) fn(tup(w7 tup(w8 _)) _))
  ::std::IO::print_bytes::1 = x(x(w1 w14) x(w7 w8))
}

::std::IO::print_bytes::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print_bytes::3 ::std::IO::print_bytes::2 x(w8 x(w1 w5)))))
}

::std::IO::print_bytes::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_byte = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print_bytes::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print_bytes::3 { x(x(w3 w3) _) }

::std::IO::print_byte { fn(ref(@io_print_byte(w3 w8) w8) fn(w3 _)) }

