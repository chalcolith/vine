
::par::Move::Up { enum(r enum(_ r)) }

::par::Move::Down { enum(_ enum(r r)) }

::par::Outcome::Win { enum(r enum(_ enum(_ r))) }

::par::Outcome::Loss { enum(_ enum(r enum(_ r))) }

::par::Outcome::Draw { fn(f0 enum(_ enum(_ enum(enum(f0 r) r)))) }

::par::Winner::First { enum(r enum(_ enum(_ r))) }

::par::Winner::Second { enum(_ enum(r enum(_ r))) }

::par::Winner::Third { enum(_ enum(_ enum(r r))) }

::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::par::main }

::par::nil_session::fork { fn(fn(_ w5) w5) }

::par::Channel::recv { fn(w0 w0) }

::par::Channel::recv1 { fn(tup(w0 _) w0) }

::par::Channel::send { fn(tup(w3 w1) fn(w3 w1)) }

::par::Channel::send1 { fn(tup(w3 _) fn(w3 _)) }

::par::Move::to_string::to_string { fn(enum(::par::Move::to_string::to_string::4 enum(::par::Move::to_string::to_string::5 w7)) w7) }

::par::Move::to_string::to_string::4 { tup(2 tup(tup(85 tup(112 w4)) w4)) }

::par::Move::to_string::to_string::5 { tup(4 tup(tup(68 tup(111 tup(119 tup(110 w4)))) w4)) }

::par::start_playing {
  fn(ref(w1 w26) w6)
  ::par::Channel::recv = fn(w8 tup(tup(w13 tup(w14 w15)) w17))
  ::par::start_playing::2 = x(x(w1 w26) x(w13 x(w14 x(w15 x(w17 w20)))))
  ::par::channel_session::fork::1 = fn(fn(w8 w20) w6)
}

::par::start_playing::2 {
  x(x(w33 w60) x(w31 x(w30 x(w29 x(w28 w54)))))
  ::par::Channel::recv = fn(w31 tup(dup46(w19 w43) w3))
  ::par::Channel::recv = fn(w30 tup(dup48(w21 w44) w8))
  ::par::Channel::recv = fn(w29 tup(dup50(w23 w45) w13))
  ::par::Move::to_string::to_string = fn(w19 tup(@n32_add(2 w37) tup(w35 tup(32 w38))))
  ::par::Move::to_string::to_string = fn(w21 tup(@n32_add(w37 w39) tup(w38 tup(32 w40))))
  ::par::Move::to_string::to_string = fn(w23 tup(@n32_add(w39 w34) tup(w40 w36)))
  ::std::IO::println = fn(ref(w33 w16) fn(tup(w34 tup(w35 w36)) _))
  tup(w43 tup(w44 w45)) = tup(w48 tup(w49 enum(::par::start_playing::16 enum(::par::start_playing::23 x(x(w16 w60) x(w28 x(w3 x(w8 x(w13 x(w54 x(w48 w49)))))))))))
}

::par::start_playing::3 {
  x(w14 x(w13 x(w12 x(w11 _))))
  ::par::Channel::send1 = fn(w13 fn(::par::Outcome::Win _))
  ::par::Channel::send1 = fn(w12 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w11 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w14 fn(::par::Winner::First _))
}

::par::start_playing::4 {
  x(w14 x(w13 x(w12 x(w11 _))))
  ::par::Channel::send1 = fn(w13 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w12 fn(::par::Outcome::Win _))
  ::par::Channel::send1 = fn(w11 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w14 fn(::par::Winner::Second _))
}

::par::start_playing::5 {
  x(w14 x(w13 x(w12 x(w11 _))))
  ::par::Channel::send1 = fn(w13 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w12 fn(::par::Outcome::Loss _))
  ::par::Channel::send1 = fn(w11 fn(::par::Outcome::Win _))
  ::par::Channel::send1 = fn(w14 fn(::par::Winner::Third _))
}

::par::start_playing::6 {
  x(x(w24 w12) x(w3 x(w6 x(w9 x(w19 x(w18 x(w17 _)))))))
  ::par::Channel::choose::1 = fn(w19 fn(::par::Outcome::Draw w3))
  ::par::Channel::choose::1 = fn(w18 fn(::par::Outcome::Draw w6))
  ::par::Channel::choose::1 = fn(w17 fn(::par::Outcome::Draw w9))
  ::std::IO::println = fn(ref(w24 w12) fn(tup(7 tup(tup(68 tup(114 tup(97 tup(119 tup(46 tup(46 tup(46 w27))))))) w27)) _))
}

::par::start_playing::16 { x(w9 x(w7 x(w6 x(w5 x(w4 x(w11 x(w2 enum(::par::start_playing::17 enum(::par::start_playing::20 x(w9 x(w7 x(w6 x(w5 x(w4 x(w11 w2))))))))))))))) }

::par::start_playing::17 { x(w8 x(w6 x(w5 x(w4 x(w3 x(w9 enum(::par::start_playing::18 enum(::par::start_playing::19 x(w8 x(w6 x(w5 x(w4 x(w3 w9))))))))))))) }

::par::start_playing::18 {
  x(x(w6 w25) x(w4 x(w3 x(w2 x(w1 w19)))))
  ::par::start_playing::6 = x(x(w6 w17) x(w15 x(w14 x(w13 x(w3 x(w2 x(w1 w9)))))))
  ::par::start_playing::30 = x(x(w17 w25) x(w15 x(w14 x(w13 x(w4 x(w19 w9))))))
}

::par::start_playing::19 { x(x(w6 w6) ::par::start_playing::3) }

::par::start_playing::20 { x(x(w8 w8) x(w6 x(w5 x(w4 x(w3 x(w9 enum(::par::start_playing::4 enum(::par::start_playing::5 x(w6 x(w5 x(w4 x(w3 w9)))))))))))) }

::par::start_playing::23 { x(w9 x(w7 x(w6 x(w5 x(w4 x(w11 x(w2 enum(::par::start_playing::24 enum(::par::start_playing::27 x(w9 x(w7 x(w6 x(w5 x(w4 x(w11 w2))))))))))))))) }

::par::start_playing::24 { x(x(w8 w8) x(w6 x(w5 x(w4 x(w3 x(w9 enum(::par::start_playing::5 enum(::par::start_playing::4 x(w6 x(w5 x(w4 x(w3 w9)))))))))))) }

::par::start_playing::27 { x(w8 x(w6 x(w5 x(w4 x(w3 x(w9 enum(::par::start_playing::28 enum(::par::start_playing::29 x(w8 x(w6 x(w5 x(w4 x(w3 w9))))))))))))) }

::par::start_playing::28 { x(x(w6 w6) ::par::start_playing::3) }

::par::start_playing::29 {
  x(x(w6 w25) x(w4 x(w3 x(w2 x(w1 w19)))))
  ::par::start_playing::6 = x(x(w6 w17) x(w15 x(w14 x(w13 x(w3 x(w2 x(w1 w9)))))))
  ::par::start_playing::30 = x(x(w17 w25) x(w15 x(w14 x(w13 x(w4 x(w19 w9))))))
}

::par::start_playing::30 {
  x(w34 x(w32 x(w31 x(w30 x(w29 x(w35 _))))))
  ::par::start_playing::2 = x(w34 x(w32 x(w31 x(w30 x(w29 w35)))))
}

::par::channel_session::fork::1 {
  fn(fn(tup(w5 w10) w17) tup(w5 w7))
  ::par::channel_session::fork::2 = fn(fn(w10 w17) w7)
}

::par::channel_session::fork::2 {
  fn(fn(tup(w5 w10) w17) tup(w5 w7))
  ::par::nil_session::fork = fn(fn(w10 w17) w7)
}

::par::Channel::choose::1 {
  fn(tup(w14 _) fn(fn(w9 w14) w7))
  ::par::channel_session::fork::1 = fn(fn(w9 _) w7)
}

::par::random_player {
  fn(ref(w1 w13) w6)
  ::par::random_player::6 = x(x(w1 w13) w8)
  ::par::channel_session::fork::1 = fn(fn(w8 _) w6)
}

::par::random_player::6 {
  x(x(w8 w22) w6)
  ::std::rng::Pcg32::gen_n32 = fn(ref(w8 w13) w15)
  ::std::numeric::N32::and::and = fn(w15 fn(1 w16))
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) ?(::par::Move::Down ::par::Move::Up w20)))
  ::par::Channel::send = fn(w6 fn(w20 w3))
  ::par::Channel::recv1 = fn(w3 enum(::par::random_player::9 enum(::par::random_player::10 enum(::par::random_player::11 x(w13 w22)))))
}

::par::random_player::9 { x(w1 w1) }

::par::random_player::10 { x(w1 w1) }

::par::random_player::11 {
  enum(w0 w3)
  ::par::random_player::6 = x(w3 w0)
}

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::eq { fn(ref(dup256(w0 @n32_eq(w10 out)) w0) fn(ref(dup257(w3 w10) w3) out)) }

::par::main {
  fn(ref(w1 w30) _)
  ::std::rng::Pcg32::seeded = fn(tup(5 tup(tup(65 tup(108 tup(105 tup(99 tup(101 w18))))) w18)) w6)
  ::std::rng::Pcg32::seeded = fn(tup(3 tup(tup(66 tup(111 tup(98 w21))) w21)) w9)
  ::std::rng::Pcg32::seeded = fn(tup(7 tup(tup(67 tup(104 tup(97 tup(114 tup(108 tup(105 tup(101 w24))))))) w24)) w12)
  ::par::main::1 = x(x(w1 w30) x(w6 x(w9 x(w12 0))))
}

::par::main::1 {
  x(w10 x(w8 x(w7 x(w6 w5))))
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(10 _) ?(::par::main::3 ::par::main::2 x(w10 x(w8 x(w7 x(w6 w1)))))))
}

::par::main::2 {
  x(x(w32 w41) x(w30 x(w29 x(w28 w27))))
  ::par::start_playing = fn(ref(w32 w1) w3)
  ::par::random_player = fn(ref(w30 w5) w7)
  ::par::random_player = fn(ref(w29 w9) w11)
  ::par::random_player = fn(ref(w28 w13) w15)
  ::par::Channel::send = fn(w3 fn(tup(w7 tup(w11 w15)) w17))
  ::par::Channel::recv1 = fn(w17 enum(::par::main::8 enum(::par::main::9 enum(::par::main::10 w35))))
  ::std::IO::println = fn(ref(w1 w21) fn(w35 _))
  ::std::numeric::N32::add::add = fn(w27 fn(1 w26))
  ::par::main::1 = x(x(w21 w41) x(w5 x(w9 x(w13 w26))))
}

::par::main::3 { x(x(w5 w5) _) }

::par::main::8 { tup(12 tup(tup(65 tup(108 tup(105 tup(99 tup(101 tup(32 tup(119 tup(105 tup(110 tup(115 tup(33 tup(10 w4)))))))))))) w4)) }

::par::main::9 { tup(10 tup(tup(66 tup(111 tup(98 tup(32 tup(119 tup(105 tup(110 tup(115 tup(33 tup(10 w4)))))))))) w4)) }

::par::main::10 { tup(14 tup(tup(67 tup(104 tup(97 tup(114 tup(108 tup(105 tup(101 tup(32 tup(119 tup(105 tup(110 tup(115 tup(33 tup(10 w4)))))))))))))) w4)) }

::std::numeric::N32::ord::lt { fn(ref(dup294(w0 @n32_lt(w10 out)) w0) fn(ref(dup295(w3 w10) w3) out)) }

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::ne { fn(ref(dup353(w0 @n32_ne(w10 out)) w0) fn(ref(dup354(w3 w10) w3) out)) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::numeric::N32::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::numeric::N32::xor::xor { fn(@n32_xor(w1 out) fn(w1 out)) }

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N32::rotate_right { fn(@n32_rotr(w1 out) fn(w1 out)) }

::std::numeric::N64::from_n32::cast { fn(w0 tup(w0 0)) }

::std::numeric::N64::add::add { fn(tup(dup(@n32_add(bl0 l) @n32_add_high(bl1 c)) @n32_add(bh @n32_add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul::mul { fn(tup(dup(@n32_mul(bl0 l) dup(@n32_mul_high(bl1 ll) @n32_mul(bh @n32_add(hl @n32_add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @n32_mul(ah hl))) bh) tup(l h))) }

::std::numeric::N64::or::or {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::or::or = fn(w0 fn(w3 w10))
  ::std::numeric::N32::or::or = fn(w1 fn(w4 w13))
}

::std::numeric::N64::xor::xor {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::xor::xor = fn(w0 fn(w3 w10))
  ::std::numeric::N32::xor::xor = fn(w1 fn(w4 w13))
}

::std::rng::Pcg32::new {
  fn(w0 fn(w1 tup(w14 w16)))
  ::std::numeric::N64::from_n32::cast = fn(1 w4)
  ::std::numeric::N64::or::or = fn(w1 fn(w4 dup2386(w7 dup2386(w12 w16))))
  ::std::numeric::N64::add::add = fn(w0 fn(w7 w9))
  ::std::numeric::N64::mul::mul = fn(w9 fn(::std::rng::Pcg32::multiplier w11))
  ::std::numeric::N64::add::add = fn(w11 fn(w12 w14))
}

::std::rng::Pcg32::default {
  w2
  ::std::rng::Pcg32::new = fn(tup(3512640997 3405705229) fn(tup(4150755663 335903614) w2))
}

::std::rng::Pcg32::multiplier { tup(1284865837 1481765933) }

::std::rng::Pcg32::gen_n32 {
  fn(ref(tup(dup2393(tup(w10 dup2397(w18 dup2397(w20 w26))) w13) dup2395(w2 w15)) tup(w17 w2)) w28)
  ::std::numeric::N64::mul::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w14))
  ::std::numeric::N64::add::add = fn(w14 fn(w15 w17))
  ::std::numeric::N32::shr::shr = fn(w18 fn(13 w19))
  ::std::numeric::N32::shl::shl = fn(w20 fn(5 w21))
  ::std::numeric::N32::xor::xor = fn(w19 fn(w21 w22))
  ::std::numeric::N32::shr::shr = fn(w10 fn(27 w24))
  ::std::numeric::N32::xor::xor = fn(w22 fn(w24 w25))
  ::std::numeric::N32::shr::shr = fn(w26 fn(27 w27))
  ::std::numeric::N32::rotate_right = fn(w25 fn(w27 w28))
}

::std::rng::Pcg32::mix {
  fn(ref(tup(w1 dup2404(w2 w16)) tup(w18 w2)) fn(w7 _))
  ::std::numeric::N64::xor::xor = fn(w1 fn(tup(0 w7) w13))
  ::std::numeric::N64::mul::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w15))
  ::std::numeric::N64::add::add = fn(w15 fn(w16 w18))
}

::std::rng::Pcg32::seeded {
  fn(dup2408(w8 _) w15)
  ::std::data::List::into_iter = fn(w8 w9)
  ::std::rng::Pcg32::seeded::1 = x(x(::std::rng::Pcg32::default w15) w9)
}

::std::rng::Pcg32::seeded::1 {
  x(w7 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(w7 w1))))
}

::std::rng::Pcg32::seeded::4 {
  enum(w0 x(x(w4 w13) w2))
  ::std::unicode::Char::to_n32::cast = fn(w0 w9)
  ::std::rng::Pcg32::mix = fn(ref(w4 w6) fn(w9 _))
  ::std::rng::Pcg32::seeded::1 = x(x(w6 w13) w2)
}

::std::rng::Pcg32::seeded::5 { x(x(w2 w2) _) }

::std::unicode::Char::to_n32::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

