
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::guessing_game::main }

::guessing_game::main {
  fn(ref(w1 w55) w51)
  ::std::IO::prompt = fn(ref(w1 w6) fn(tup(14 tup(tup(69 tup(110 tup(116 tup(101 tup(114 tup(32 tup(97 tup(32 tup(115 tup(101 tup(101 tup(100 tup(58 tup(32 w39)))))))))))))) w39)) w9))
  ::std::logical::Option::unwrap = fn(w9 w10)
  ::std::rng::Pcg32::seeded = fn(w10 w13)
  ::guessing_game::main::1 = x(x(w6 w42) fn(tup(24 tup(tup(69 tup(110 tup(116 tup(101 tup(114 tup(32 tup(97 tup(32 tup(109 tup(97 tup(120 tup(105 tup(109 tup(117 tup(109 tup(32 tup(110 tup(117 tup(109 tup(98 tup(101 tup(114 tup(58 tup(32 w45)))))))))))))))))))))))) w45)) dup9(w24 w32)))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w13 _) w23)
  ::std::numeric::N32::rem::rem = fn(w23 fn(w24 w25))
  ::std::numeric::N32::add::add = fn(1 fn(w25 w26))
  ::std::numeric::N32::to_string::to_string = fn(w32 tup(@n32_add(40 w46) tup(w47 tup(46 w48))))
  ::std::IO::println = fn(ref(w42 w29) fn(tup(w46 tup(tup(73 tup(39 tup(109 tup(32 tup(116 tup(104 tup(105 tup(110 tup(107 tup(105 tup(110 tup(103 tup(32 tup(111 tup(102 tup(32 tup(97 tup(32 tup(110 tup(117 tup(109 tup(98 tup(101 tup(114 tup(32 tup(98 tup(101 tup(116 tup(119 tup(101 tup(101 tup(110 tup(32 tup(49 tup(32 tup(97 tup(110 tup(100 tup(32 w47))))))))))))))))))))))))))))))))))))))) w48)) _))
  ::guessing_game::main::13 = x(x(w29 w55) x(0 x(w26 w51)))
}

::guessing_game::main::1 {
  x(w6 fn(w0 w7))
  ::guessing_game::main::2 = x(w6 x(w0 w7))
}

::guessing_game::main::2 {
  x(x(w4 w14) x(dup23(w8 w12) w11))
  ::std::IO::prompt = fn(ref(w4 w6) fn(w8 enum(::guessing_game::main::6 enum(::guessing_game::main::2 x(x(w6 w14) x(w12 w11))))))
}

::guessing_game::main::6 {
  enum(w0 w5)
  ::std::numeric::N32::parse = fn(w0 enum(::guessing_game::main::10 enum(::guessing_game::main::2 w5)))
}

::guessing_game::main::10 { enum(w0 x(x(w5 w5) x(_ w0))) }

::guessing_game::main::13 {
  x(x(w11 w30) x(w9 x(w8 w25)))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w1))
  ::guessing_game::main::1 = x(x(w11 w14) fn(tup(18 tup(tup(69 tup(110 tup(116 tup(101 tup(114 tup(32 tup(121 tup(111 tup(117 tup(114 tup(32 tup(103 tup(117 tup(101 tup(115 tup(115 tup(58 tup(32 w17)))))))))))))))))) w17)) w4))
  ::std::numeric::N32::ord::lt = fn(ref(w4 w19) fn(ref(w8 w22) ?(::guessing_game::main::16 ::guessing_game::main::15 x(x(w14 w30) x(w1 x(w22 x(w19 w25)))))))
}

::guessing_game::main::15 {
  x(x(w10 w19) x(w8 x(w7 x(_ w15))))
  ::std::IO::println = fn(ref(w10 w1) fn(tup(8 tup(tup(84 tup(111 tup(111 tup(32 tup(108 tup(111 tup(119 tup(46 w13)))))))) w13)) _))
  ::guessing_game::main::28 = x(x(w1 w19) x(w8 x(w7 x(w15 _))))
}

::guessing_game::main::16 {
  x(w12 x(w10 x(w9 x(w8 w13))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w8 _) fn(ref(w9 w4) ?(::guessing_game::main::18 ::guessing_game::main::17 x(w12 x(w10 x(w4 w13))))))
}

::guessing_game::main::17 {
  x(x(w9 w18) x(w7 x(w6 w14)))
  ::std::IO::println = fn(ref(w9 w1) fn(tup(9 tup(tup(84 tup(111 tup(111 tup(32 tup(104 tup(105 tup(103 tup(104 tup(46 w12))))))))) w12)) _))
  ::guessing_game::main::28 = x(x(w1 w18) x(w7 x(w6 x(w14 _))))
}

::guessing_game::main::18 {
  x(x(w11 w1) x(w9 _))
  ::std::numeric::N32::eq::eq = fn(ref(w9 w16) fn(ref(1 _) ?(::guessing_game::main::21 ::guessing_game::main::20 x(w16 w20))))
  ::std::data::List::concat::concat = fn(tup(11 tup(tup(89 tup(111 tup(117 tup(32 tup(103 tup(111 tup(116 tup(32 tup(105 tup(116 tup(32 w14))))))))))) w14)) fn(w20 w5))
  ::std::IO::println = fn(ref(w11 w1) fn(w5 _))
}

::guessing_game::main::20 { x(_ tup(13 tup(tup(105 tup(109 tup(109 tup(101 tup(100 tup(105 tup(97 tup(116 tup(101 tup(108 tup(121 tup(63 tup(33 w5))))))))))))) w5))) }

::guessing_game::main::21 {
  x(w4 tup(w5 tup(tup(105 tup(110 tup(32 w6))) w7)))
  ::std::numeric::N32::to_string::to_string = fn(w4 tup(@n32_add(12 w5) tup(w6 tup(32 tup(103 tup(117 tup(101 tup(115 tup(115 tup(101 tup(115 tup(33 w7))))))))))))
}

::guessing_game::main::28 {
  x(w12 x(w10 x(w9 x(w13 _))))
  ::guessing_game::main::13 = x(w12 x(w10 x(w9 w13)))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup118(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup124(w0 @n32_ne(w10 out)) w0) fn(ref(dup125(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::lt { fn(ref(dup146(w0 @n32_lt(w10 out)) w0) fn(ref(dup147(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::eq::eq { fn(ref(dup160(w0 @n32_eq(w10 out)) w0) fn(ref(dup161(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::numeric::N32::xor::xor { fn(@n32_xor(w1 out) fn(w1 out)) }

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::numeric::N32::parse {
  fn(w0 w15)
  ::std::unicode::String::to_chars::cast = fn(w0 tup(w5 tup(w6 _)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w11) fn(ref(0 _) ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w11 x(w6 w15)))))
}

::std::numeric::N32::parse::2 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::4 {
  x(w8 w7)
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w1 w7))))
}

::std::numeric::N32::parse::5 {
  x(w18 x(tup(w1 w2) x(w16 w29)))
  ::std::unicode::Char::ord::le = fn(ref(48 _) fn(ref(w1 w22) @n32_and(w27 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w21 w29))))))))
  ::std::unicode::Char::ord::le = fn(ref(w22 w21) fn(ref(57 _) w27))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  ::std::numeric::N32::mul::mul = fn(w2 fn(10 w13))
  ::std::unicode::Char::sub_char::sub = fn(w1 fn(48 w15))
  ::std::numeric::N32::add::add = fn(w13 fn(w15 w17))
  ::std::numeric::N32::sub::sub = fn(w4 fn(1 w19))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w9 w9) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::ord::le { fn(ref(dup1576(w0 @n32_le(w10 out)) w0) fn(ref(dup1577(w3 w10) w3) out)) }

::std::unicode::Char::sub_char::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::rotate_right { fn(@n32_rotr(w1 out) fn(w1 out)) }

::std::numeric::N64::from_n32::cast { fn(w0 tup(w0 0)) }

::std::numeric::N64::add::add { fn(tup(dup(@n32_add(bl0 l) @n32_add_high(bl1 c)) @n32_add(bh @n32_add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul::mul { fn(tup(dup(@n32_mul(bl0 l) dup(@n32_mul_high(bl1 ll) @n32_mul(bh @n32_add(hl @n32_add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @n32_mul(ah hl))) bh) tup(l h))) }

::std::numeric::N64::or::or {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::or::or = fn(w0 fn(w3 w10))
  ::std::numeric::N32::or::or = fn(w1 fn(w4 w13))
}

::std::numeric::N64::xor::xor {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::xor::xor = fn(w0 fn(w3 w10))
  ::std::numeric::N32::xor::xor = fn(w1 fn(w4 w13))
}

::std::rng::Pcg32::new {
  fn(w0 fn(w1 tup(w14 w16)))
  ::std::numeric::N64::from_n32::cast = fn(1 w4)
  ::std::numeric::N64::or::or = fn(w1 fn(w4 dup2196(w7 dup2196(w12 w16))))
  ::std::numeric::N64::add::add = fn(w0 fn(w7 w9))
  ::std::numeric::N64::mul::mul = fn(w9 fn(::std::rng::Pcg32::multiplier w11))
  ::std::numeric::N64::add::add = fn(w11 fn(w12 w14))
}

::std::rng::Pcg32::default {
  w2
  ::std::rng::Pcg32::new = fn(tup(3512640997 3405705229) fn(tup(4150755663 335903614) w2))
}

::std::rng::Pcg32::multiplier { tup(1284865837 1481765933) }

::std::rng::Pcg32::gen_n32 {
  fn(ref(tup(dup2203(tup(w10 dup2207(w18 dup2207(w20 w26))) w13) dup2205(w2 w15)) tup(w17 w2)) w28)
  ::std::numeric::N64::mul::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w14))
  ::std::numeric::N64::add::add = fn(w14 fn(w15 w17))
  ::std::numeric::N32::shr::shr = fn(w18 fn(13 w19))
  ::std::numeric::N32::shl::shl = fn(w20 fn(5 w21))
  ::std::numeric::N32::xor::xor = fn(w19 fn(w21 w22))
  ::std::numeric::N32::shr::shr = fn(w10 fn(27 w24))
  ::std::numeric::N32::xor::xor = fn(w22 fn(w24 w25))
  ::std::numeric::N32::shr::shr = fn(w26 fn(27 w27))
  ::std::numeric::N32::rotate_right = fn(w25 fn(w27 w28))
}

::std::rng::Pcg32::mix {
  fn(ref(tup(w1 dup2214(w2 w16)) tup(w18 w2)) fn(w7 _))
  ::std::numeric::N64::xor::xor = fn(w1 fn(tup(0 w7) w13))
  ::std::numeric::N64::mul::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w15))
  ::std::numeric::N64::add::add = fn(w15 fn(w16 w18))
}

::std::rng::Pcg32::seeded {
  fn(dup2218(w8 _) w15)
  ::std::data::List::into_iter = fn(w8 w9)
  ::std::rng::Pcg32::seeded::1 = x(x(::std::rng::Pcg32::default w15) w9)
}

::std::rng::Pcg32::seeded::1 {
  x(w7 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::std::rng::Pcg32::seeded::4 enum(::std::rng::Pcg32::seeded::5 x(w7 w1))))
}

::std::rng::Pcg32::seeded::4 {
  enum(w0 x(x(w4 w13) w2))
  ::std::unicode::Char::to_n32::cast = fn(w0 w9)
  ::std::rng::Pcg32::mix = fn(ref(w4 w6) fn(w9 _))
  ::std::rng::Pcg32::seeded::1 = x(x(w6 w13) w2)
}

::std::rng::Pcg32::seeded::5 { x(x(w2 w2) _) }

::std::unicode::Char::to_n32::cast { fn(w0 w0) }

::std::unicode::Char::eq::eq { fn(ref(dup2246(w0 @n32_eq(w10 out)) w0) fn(ref(dup2247(w3 w10) w3) out)) }

::std::unicode::Char::eq::ne { fn(ref(dup2250(w0 @n32_ne(w10 out)) w0) fn(ref(dup2251(w3 w10) w3) out)) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::flush { fn(ref(@io_flush(0 w7) w7) _) }

::std::IO::prompt {
  fn(ref(w1 w16) fn(w3 w18))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::flush = fn(ref(w7 w12) _)
  ::std::IO::read_line = fn(ref(w12 w16) w18)
}

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

