
::main { ::so_random::main }

::so_random::main {
  fn(ref(w1 w11) _)
  ::so_random::main::1 = x(x(w1 w11) x(0 ::std::rng::Pcg32::default))
}

::so_random::main::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::ord::lt = fn(ref(w6 w1) fn(ref(100 _) ?(::so_random::main::3 ::so_random::main::2 x(w8 x(w1 w5)))))
}

::so_random::main::2 {
  x(x(w14 w18) x(w12 w11))
  ::std::rng::Pcg32::gen_n32 = fn(ref(w11 w4) w6)
  ::std::numeric::N32::to_string::to_string = fn(w6 w7)
  ::std::IO::println = fn(ref(w14 w1) fn(w7 _))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w10))
  ::so_random::main::1 = x(x(w1 w18) x(w10 w4))
}

::so_random::main::3 { x(x(w3 w3) _) }

::std::numeric::N32::ord::lt { fn(ref(dup20(w0 @lt(w10 out)) w0) fn(ref(dup21(w3 w10) w3) out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup38(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup44(w0 @ne(w10 out)) w0) fn(ref(dup45(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::numeric::N32::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::numeric::N32::xor::xor { fn(@n32_xor(w1 out) fn(w1 out)) }

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N32::rotate_right { fn(@n32_rotr(w1 out) fn(w1 out)) }

::std::numeric::N64::from_n32::cast { fn(w0 tup(w0 0)) }

::std::numeric::N64::add::add { fn(tup(dup(@add(bl0 l) @n32_add_high(bl1 c)) @add(bh @add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul::mul { fn(tup(dup(@mul(bl0 l) dup(@n32_mul_high(bl1 ll) @mul(bh @add(hl @add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @mul(ah hl))) bh) tup(l h))) }

::std::numeric::N64::or::or {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::or::or = fn(w0 fn(w3 w10))
  ::std::numeric::N32::or::or = fn(w1 fn(w4 w13))
}

::std::rng::Pcg32::new {
  fn(w0 fn(w1 tup(w14 w16)))
  ::std::numeric::N64::from_n32::cast = fn(1 w4)
  ::std::numeric::N64::or::or = fn(w1 fn(w4 dup2120(w7 dup2120(w12 w16))))
  ::std::numeric::N64::add::add = fn(w0 fn(w7 w9))
  ::std::numeric::N64::mul::mul = fn(w9 fn(::std::rng::Pcg32::multiplier w11))
  ::std::numeric::N64::add::add = fn(w11 fn(w12 w14))
}

::std::rng::Pcg32::default {
  w2
  ::std::rng::Pcg32::new = fn(tup(3512640997 3405705229) fn(tup(4150755663 335903614) w2))
}

::std::rng::Pcg32::multiplier { tup(1284865837 1481765933) }

::std::rng::Pcg32::gen_n32 {
  fn(ref(tup(dup2127(tup(w10 dup2131(w18 dup2131(w20 w26))) w13) dup2129(w2 w15)) tup(w17 w2)) w28)
  ::std::numeric::N64::mul::mul = fn(w13 fn(::std::rng::Pcg32::multiplier w14))
  ::std::numeric::N64::add::add = fn(w14 fn(w15 w17))
  ::std::numeric::N32::shr::shr = fn(w18 fn(13 w19))
  ::std::numeric::N32::shl::shl = fn(w20 fn(5 w21))
  ::std::numeric::N32::xor::xor = fn(w19 fn(w21 w22))
  ::std::numeric::N32::shr::shr = fn(w10 fn(27 w24))
  ::std::numeric::N32::xor::xor = fn(w22 fn(w24 w25))
  ::std::numeric::N32::shr::shr = fn(w26 fn(27 w27))
  ::std::numeric::N32::rotate_right = fn(w25 fn(w27 w28))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

