
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_15::main }

::day_15::main {
  fn(ref(w1 w60) _)
  ::day_15::main::1 = x(x(w1 w73) x(x(::std::data::Array::empty dup9(w8 w78)) x(0 x(_ dup16(w12 w34)))))
  ::day_15::main::20 = x(x(w73 w81) x(x(w78 dup10(w15 w87)) x(x(tup(0 tup(w74 w74)) w77) w12)))
  ::std::data::Array::to_list::cast = fn(w15 w16)
  ::day_15::main::43 = x(x(0 w85) x(w16 0))
  ::day_15::main::18 = x(x(w81 w89) x(w87 _))
  ::std::numeric::N32::to_string::to_string = fn(w85 tup(@add(8 w90) tup(w91 w92)))
  ::std::IO::println = fn(ref(w89 w22) fn(tup(w90 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w91)))))))) w92)) _))
  ::std::data::Array::to_list::cast = fn(w8 w29)
  ::std::data::Array::to_list::cast = fn(w95 w101)
  ::day_15::main::57 = x(x(tup(0 tup(w105 w105)) w108) w101)
  ::std::data::Array::from_list::cast = fn(w108 w104)
  ::std::data::List::map = fn(w29 fn(fn(w95 w104) w31))
  ::std::data::Array::from_list::cast = fn(w31 w32)
  ::std::ops::vectorized::mul::mul::1 = fn(w34 fn(tup(2 1) w36))
  ::day_15::main::65 = x(x(w32 w112) x(w77 w36))
  ::std::data::Array::get = fn(ref(w112 w39) fn(0 w42))
  ::std::data::Array::len = fn(w42 _)
  ::std::data::Array::len = fn(ref(w39 dup14(w53 w118)) _)
  ::std::data::Array::to_list::cast = fn(w53 w54)
  ::day_15::main::132 = x(x(0 w116) x(w54 0))
  ::day_15::main::18 = x(x(w22 w120) x(w118 _))
  ::std::numeric::N32::to_string::to_string = fn(w116 tup(@add(8 w121) tup(w122 w123)))
  ::std::IO::println = fn(ref(w120 w60) fn(tup(w121 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w122)))))))) w123)) _))
}

::day_15::main::1 {
  x(x(w11 w18) w9)
  ::std::IO::read_line = fn(ref(w11 w1) enum(::day_15::main::4 enum(::day_15::main::5 x(x(w1 w18) w9))))
}

::day_15::main::4 {
  enum(w0 x(w8 x(w6 x(w4 w3))))
  ::std::unicode::String::len = fn(ref(w0 w10) w12)
  ::std::numeric::N32::eq::ne = fn(ref(w12 _) fn(ref(0 _) ?(::day_15::main::7 ::day_15::main::6 x(w8 x(w6 x(w4 x(w3 w10)))))))
}

::day_15::main::5 { x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1)))) }

::day_15::main::6 {
  x(w28 x(x(w26 w39) x(dup68(w34 w19) x(x(w23 w36) w21))))
  ::std::data::List::iter = fn(ref(w21 w3) w6)
  ::day_15::main::9 = x(w34 x(x(w23 w33) x(0 x(w6 w30))))
  ::std::data::List::Iter::drop = fn(ref(w30 _) _)
  ::std::unicode::String::to_chars::cast = fn(w3 w16)
  ::std::data::Array::from_list::cast = fn(w16 w17)
  ::std::data::Array::push_back = fn(ref(w26 w13) fn(w17 _))
  ::std::numeric::N32::add::add = fn(w19 fn(1 w20))
  ::day_15::main::1 = x(w28 x(x(w13 w39) x(w20 x(w33 w36))))
}

::day_15::main::7 { x(x(w7 w7) x(x(w5 w5) x(_ x(x(w2 w2) _)))) }

::day_15::main::9 {
  x(w10 x(w9 x(w7 x(w6 w12))))
  ::std::data::List::Iter::next = fn(ref(w6 w1) enum(::day_15::main::12 enum(::day_15::main::13 x(w10 x(w9 x(w7 x(w1 w12)))))))
}

::day_15::main::12 {
  enum(ref(w2 w19) x(w9 x(w8 x(w6 w5))))
  ::std::unicode::Char::eq::eq = fn(ref(w2 w14) fn(ref(64 _) ?(::day_15::main::16 ::day_15::main::15 x(w9 x(w8 x(w6 x(w5 x(w14 w19))))))))
}

::day_15::main::13 { x(_ x(x(w4 w4) x(_ x(w1 w1)))) }

::day_15::main::15 { x(w12 x(x(_ tup(w9 w12)) x(w9 x(x(w8 w8) x(_ 46))))) }

::day_15::main::16 {
  x(w7 x(w6 x(w4 x(w3 x(w1 w1)))))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w10))
  ::day_15::main::9 = x(w7 x(w6 x(w10 w3)))
}

::day_15::main::17 {
  x(x(w17 w6) fn(tup(w0 w1) w14))
  ::std::data::Array::get = fn(ref(w17 w6) fn(w1 w10))
  ::std::data::Array::get = fn(w10 fn(w0 w14))
}

::day_15::main::18 {
  x(x(w15 w3) x(w13 _))
  ::std::data::Array::to_list::cast = fn(w13 w6)
  ::std::data::Array::to_list::cast = fn(w16 w20)
  ::std::unicode::String::from_chars::cast = fn(w20 w21)
  ::std::data::List::map = fn(w6 fn(fn(w16 w21) w8))
  ::std::data::List::join = fn(w8 fn(tup(1 tup(tup(10 w24) w24)) w10))
  ::std::IO::println = fn(ref(w15 w3) fn(w10 _))
}

::day_15::main::20 {
  x(x(w11 w18) w9)
  ::std::IO::read_line = fn(ref(w11 w1) enum(::day_15::main::23 enum(::day_15::main::24 x(x(w1 w18) w9))))
}

::day_15::main::23 {
  enum(w0 x(w8 x(x(w6 w20) x(x(w4 w18) w2))))
  ::day_15::main::25 = x(x(w6 w15) x(x(w4 w13) x(x(w2 w11) w0)))
  ::day_15::main::20 = x(w8 x(x(w15 w20) x(x(w13 w18) w11)))
}

::day_15::main::24 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_15::main::25 {
  x(w13 x(w11 x(w9 w7)))
  ::std::data::List::pop_front = fn(ref(w7 w2) enum(::day_15::main::28 enum(::day_15::main::29 x(w13 x(w11 x(w9 w2))))))
}

::day_15::main::28 {
  enum(dup173(w9 w27) x(x(w8 w61) x(x(w6 w59) x(x(dup170(w15 w51) w57) w2))))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w9 w26) w26)) w12))
  ::std::unicode::Char::eq::eq = fn(ref(w27 w28) fn(ref(60 _) ?(::day_15::main::32 ::day_15::main::31 x(w28 dup175(w16 dup175(w36 w50))))))
  ::std::ops::vectorized::add::add::1 = fn(w15 fn(w16 w17))
  ::day_15::main::37 = x(x(w8 w38) x(w36 x(w17 w35)))
  ::day_15::main::17 = x(x(w38 w41) fn(w35 ref(w23 w49)))
  ::std::unicode::Char::eq::eq = fn(ref(w23 w43) fn(ref(46 _) ?(::day_15::main::42 ::day_15::main::41 x(x(w41 w54) x(x(w51 w52) x(w50 x(x(w43 w49) _)))))))
  ::day_15::main::25 = x(x(w54 w61) x(x(w12 w59) x(x(w52 w57) w2)))
}

::day_15::main::29 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_15::main::31 {
  x(_ tup(w0 0))
  ::std::numeric::N32::neg::neg = fn(1 w0)
}

::day_15::main::32 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(62 _) ?(::day_15::main::34 ::day_15::main::33 x(w1 w7))))
}

::day_15::main::33 { x(_ tup(1 0)) }

::day_15::main::34 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 _) fn(ref(94 _) ?(::day_15::main::36 ::day_15::main::35 w7)))
}

::day_15::main::35 {
  tup(0 w0)
  ::std::numeric::N32::neg::neg = fn(1 w0)
}

::day_15::main::36 { tup(0 1) }

::day_15::main::37 {
  x(x(w12 w20) x(w10 x(dup202(w1 w16) w17)))
  ::day_15::main::17 = x(x(w12 w15) fn(w1 w3))
  ::std::unicode::Char::eq::eq = fn(w3 fn(ref(79 _) ?(::day_15::main::39 ::day_15::main::38 x(x(w15 w20) x(w10 x(w16 w17))))))
}

::day_15::main::38 {
  x(w7 x(dup206(w0 w10) x(w4 w9)))
  ::std::ops::vectorized::add::add::1 = fn(w4 fn(w0 w2))
  ::day_15::main::37 = x(w7 x(w10 x(w2 w9)))
}

::day_15::main::39 { x(x(w4 w4) x(_ x(w1 w1))) }

::day_15::main::41 {
  x(w16 x(x(w14 w13) x(w12 x(x(_ 79) _))))
  ::std::ops::vectorized::add::add::1 = fn(w14 fn(w12 dup214(w13 w5)))
  ::day_15::main::17 = x(w16 fn(w5 ref(_ 46)))
}

::day_15::main::42 { x(x(w7 w7) x(x(w5 w5) x(_ x(x(w2 w2) _)))) }

::day_15::main::43 {
  x(w8 x(w6 w5))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_15::main::46 enum(::day_15::main::47 x(w8 x(w1 w5)))))
}

::day_15::main::46 {
  enum(w0 x(x(w5 w20) x(w3 dup233(w14 w10))))
  ::std::data::Array::to_list::cast = fn(w0 w7)
  ::day_15::main::48 = x(x(w5 w16) x(w14 x(w7 0)))
  ::std::numeric::N32::add::add = fn(w10 fn(1 w11))
  ::day_15::main::43 = x(x(w16 w20) x(w3 w11))
}

::day_15::main::47 { x(x(w3 w3) _) }

::day_15::main::48 {
  x(w9 x(w7 x(w6 w5)))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_15::main::51 enum(::day_15::main::52 x(w9 x(w7 x(w1 w5))))))
}

::day_15::main::51 {
  enum(w0 x(x(w6 w24) x(dup250(w17 w22) x(w3 dup252(w16 w8)))))
  ::std::unicode::Char::eq::eq = fn(ref(w0 _) fn(ref(79 _) ?(::day_15::main::55 ::day_15::main::54 x(x(w6 w19) x(w17 x(w16 _))))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::day_15::main::48 = x(x(w19 w24) x(w22 x(w3 w9)))
}

::day_15::main::52 { x(x(w4 w4) _) }

::day_15::main::54 {
  x(x(w10 w5) x(w8 x(w7 _)))
  ::std::numeric::N32::mul::mul = fn(w8 fn(100 w1))
  ::std::numeric::N32::add::add = fn(w1 fn(w7 w3))
  ::std::numeric::N32::add::add = fn(w10 fn(w3 w5))
}

::day_15::main::55 { x(x(w4 w4) _) }

::day_15::main::57 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_15::main::60 enum(::day_15::main::61 x(w7 w1))))
}

::day_15::main::60 {
  enum(w0 x(x(w4 w17) w2))
  ::std::unicode::Char::eq::eq = fn(ref(w0 w7) fn(ref(79 _) ?(::day_15::main::64 ::day_15::main::63 x(x(w4 w14) x(w7 _)))))
  ::day_15::main::57 = x(x(w14 w17) w2)
}

::day_15::main::61 { x(x(w2 w2) _) }

::day_15::main::63 {
  x(x(w7 w3) _)
  ::std::unicode::String::to_chars::cast = fn(tup(2 tup(tup(91 tup(93 w10)) w10)) w1)
  ::std::data::List::concat::concat = fn(w7 fn(w1 w3))
}

::day_15::main::64 {
  x(x(w8 w4) x(dup283(w0 w1) _))
  ::std::data::List::concat::concat = fn(w8 fn(tup(2 tup(tup(w0 tup(w1 w9)) w9)) w4))
}

::day_15::main::65 {
  x(w8 x(w6 w5))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_15::main::68 enum(::day_15::main::69 x(w8 x(w1 w5)))))
}

::day_15::main::68 {
  enum(w0 x(x(w5 w21) x(w3 w2)))
  ::std::unicode::Char::eq::eq = fn(ref(w0 w8) fn(ref(60 _) ?(::day_15::main::72 ::day_15::main::75 x(x(w5 w17) x(x(w2 w15) x(w8 _))))))
  ::day_15::main::65 = x(x(w17 w21) x(w3 w15))
}

::day_15::main::69 { x(x(w3 w3) _) }

::day_15::main::72 {
  x(w10 x(w8 x(w6 w11)))
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(62 _) ?(::day_15::main::74 ::day_15::main::75 x(w10 x(w8 x(w1 w11))))))
}

::day_15::main::74 {
  x(w19 x(x(dup324(tup(w3 w4) w30) w31) x(w15 _)))
  ::std::unicode::Char::eq::eq = fn(ref(w15 _) fn(ref(94 _) ?(1 ::day_15::main::93 dup326(w29 w36))))
  ::day_15::main::98 = x(w19 x(w36 x(tup(1 tup(tup(tup(w3 46) w26) w26)) x(w4 x(?(::day_15::main::97 ::day_15::main::96 x(x(w30 w31) x(w29 _))) 1)))))
}

::day_15::main::75 {
  x(w13 x(x(dup339(w3 w23) w24) x(w9 w25)))
  ::std::unicode::Char::eq::eq = fn(ref(w9 _) fn(ref(60 _) ?(::day_15::main::78 ::day_15::main::77 dup341(w22 w29))))
  ::day_15::main::82 = x(w13 x(w29 x(?(::day_15::main::81 ::day_15::main::80 x(x(w23 w24) x(w22 _))) x(w3 x(46 w25)))))
}

::day_15::main::77 {
  tup(w0 0)
  ::std::numeric::N32::neg::neg = fn(1 w0)
}

::day_15::main::78 { tup(1 0) }

::day_15::main::80 {
  x(x(w6 w2) x(w4 _))
  ::std::ops::vectorized::add::add::1 = fn(w6 fn(w4 w2))
}

::day_15::main::81 { x(x(w3 w3) _) }

::day_15::main::82 {
  x(x(w22 w39) x(dup359(w0 w37) x(w19 x(w18 x(w17 w31)))))
  ::std::ops::vectorized::add::add::1 = fn(w18 fn(w0 dup362(w4 w35)))
  ::day_15::main::17 = x(x(w22 w25) fn(w4 ref(w7 w33)))
  ::std::unicode::Char::eq::eq = fn(ref(w7 w27) fn(ref(35 _) ?(::day_15::main::85 ::day_15::main::84 x(x(w25 w39) x(w37 x(w19 x(w35 x(w17 x(x(w27 w33) w31)))))))))
}

::day_15::main::84 { x(x(w9 w9) x(_ x(0 x(_ x(_ x(x(w3 w3) _)))))) }

::day_15::main::85 {
  x(w8 x(w6 x(w5 x(w4 x(w3 x(x(w2 w32) w30))))))
  ::std::unicode::Char::eq::eq = fn(ref(w2 w26) fn(ref(46 _) ?(::day_15::main::88 ::day_15::main::87 x(w8 x(w6 x(w5 x(w4 x(w3 x(x(w26 w32) w30)))))))))
}

::day_15::main::87 { x(x(w11 w11) x(_ x(1 x(_ x(w6 x(x(_ w6) _)))))) }

::day_15::main::88 {
  x(w8 x(w6 x(w5 x(w4 x(w3 x(x(dup396(w20 w27) w28) w30))))))
  ::day_15::main::82 = x(w8 x(w6 x(dup391(w5 ?(::day_15::main::91 ::day_15::main::90 x(w3 x(x(w27 w28) _)))) x(w4 x(w20 w30)))))
}

::day_15::main::90 { x(w5 x(x(_ w5) _)) }

::day_15::main::91 { x(_ x(x(w2 w2) _)) }

::day_15::main::93 {
  w0
  ::std::numeric::N32::neg::neg = fn(1 w0)
}

::day_15::main::96 {
  x(x(w7 w3) x(w5 _))
  ::std::ops::vectorized::add::add::1 = fn(w7 fn(tup(0 w5) w3))
}

::day_15::main::97 { x(x(w3 w3) _) }

::day_15::main::98 {
  x(w13 x(w11 x(w10 w9)))
  ::std::data::List::len = fn(ref(w10 w1) w3)
  ::std::numeric::N32::eq::ne = fn(ref(w3 _) fn(ref(0 _) ?(::day_15::main::100 ::day_15::main::99 x(w13 x(w11 x(w1 w9))))))
}

::day_15::main::99 {
  x(x(w13 w29) x(dup422(w0 w27) x(w10 x(w9 x(w8 w24)))))
  ::std::numeric::N32::add::add = fn(w9 fn(w0 dup426(w19 w25)))
  ::day_15::main::101 = x(x(w13 w22) x(w10 x(w19 x(x(w8 w18) x(tup(0 tup(w14 w14)) w16)))))
  ::day_15::main::98 = x(x(w22 w29) x(w27 x(w16 x(w25 x(w18 w24)))))
}

::day_15::main::100 { x(x(w6 w6) x(_ x(_ x(_ x(w1 w1))))) }

::day_15::main::101 {
  x(w12 x(w10 w9))
  ::std::data::List::pop_front = fn(ref(w10 w1) enum(::day_15::main::104 enum(::day_15::main::105 x(w12 x(w1 w9)))))
}

::day_15::main::104 {
  enum(tup(dup453(w15 w36) w3) x(x(w13 w44) x(w11 x(dup448(w16 w41) x(w9 w7)))))
  ::day_15::main::17 = x(x(w13 w27) fn(tup(w15 w16) ref(w20 w34)))
  ::std::unicode::Char::eq::eq = fn(ref(w20 w29) fn(ref(35 _) ?(::day_15::main::108 ::day_15::main::107 x(x(w27 w44) x(w11 x(w41 x(w9 x(w7 x(w36 x(w3 x(w29 w34)))))))))))
}

::day_15::main::105 { x(x(w7 w7) x(_ x(_ x(x(w3 w3) x(w1 w1))))) }

::day_15::main::107 { x(x(w14 w14) x(_ x(_ x(x(0 _) x(x(_ tup(0 tup(w15 w15))) x(_ x(_ x(w4 w4)))))))) }

::day_15::main::108 {
  x(x(w11 w52) x(w9 x(dup474(w35 w49) x(x(w7 w48) x(x(w5 w46) x(w3 x(w2 x(w1 w43))))))))
  ::std::unicode::Char::eq::eq = fn(ref(w1 w24) fn(ref(91 _) ?(::day_15::main::111 ::day_15::main::110 x(x(w11 w39) x(x(w9 w37) x(w35 x(w34 x(x(w5 w33) x(w3 x(x(w24 w30) _))))))))))
  ::day_15::main::101 = x(x(w39 w52) x(w37 x(w49 x(x(dup476(w7 dup476(w34 ?(::day_15::main::131 ::day_15::main::130 x(w2 x(x(w30 w43) _))))) w48) x(w33 w46)))))
}

::day_15::main::110 {
  x(w36 x(x(w34 w49) x(w32 x(?(::day_15::main::123 ::day_15::main::122 x(w46 x(x(w22 w56) w54))) x(x(w30 w7) x(dup498(w3 dup498(w9 dup498(w47 w16))) x(x(w27 w27) w54)))))))
  ::std::data::List::push_back = fn(ref(w30 w1) fn(tup(w3 91) _))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w10))
  ::std::data::List::push_back = fn(ref(w1 w7) fn(tup(w10 93) _))
  ::std::data::List::len = fn(ref(w34 w38) w40)
  ::std::numeric::N32::eq::ne = fn(ref(w40 _) fn(ref(0 _) ?(::day_15::main::114 ::day_15::main::113 x(x(w38 w49) x(w47 x(x(46 w46) _))))))
  ::day_15::main::17 = x(w36 fn(tup(w17 w32) ref(w22 w56)))
  ::std::numeric::N32::add::add = fn(w16 fn(1 w17))
}

::day_15::main::111 {
  x(w16 x(x(w14 w14) x(w12 x(w21 x(w10 x(w8 x(x(w7 w1) w17)))))))
  ::std::unicode::Char::eq::eq = fn(ref(w7 w1) fn(ref(93 _) ?(::day_15::main::125 ::day_15::main::124 x(w16 x(w12 x(w21 x(w10 x(w8 w17))))))))
}

::day_15::main::113 {
  x(x(w22 w35) x(w20 x(w19 w30)))
  ::std::data::List::get = fn(ref(w22 w1) fn(0 ref(tup(w10 dup527(w15 w31)) tup(w24 w15))))
  ::std::numeric::N32::add::add = fn(w20 fn(1 w27))
  ::std::numeric::N32::eq::eq = fn(ref(w10 w24) fn(ref(w27 _) ?(::day_15::main::118 ::day_15::main::117 x(x(w1 w35) x(w19 x(w31 w30))))))
}

::day_15::main::114 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::day_15::main::117 {
  x(x(w11 w1) x(x(_ w7) x(w7 _)))
  ::std::data::List::pop_front = fn(ref(w11 w1) _)
}

::day_15::main::118 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_15::main::122 { x(w5 x(x(_ w5) _)) }

::day_15::main::123 { x(_ x(x(w2 w2) _)) }

::day_15::main::124 {
  x(w30 x(w28 x(?(::day_15::main::128 ::day_15::main::127 x(x(w20 w37) w35)) x(x(w26 w8) x(dup556(w3 dup556(w10 w14)) w35)))))
  ::std::numeric::N32::sub::sub = fn(w3 fn(1 w4))
  ::std::data::List::push_back = fn(ref(w26 w1) fn(tup(w4 91) _))
  ::std::data::List::push_back = fn(ref(w1 w8) fn(tup(w10 93) _))
  ::day_15::main::17 = x(w30 fn(tup(w15 w28) ref(w20 w37)))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w15))
}

::day_15::main::125 { x(x(w7 w7) x(_ x(_ x(x(w3 w3) _)))) }

::day_15::main::127 { x(x(_ 46) _) }

::day_15::main::128 { x(x(w2 w2) _) }

::day_15::main::130 { x(w5 x(x(_ w5) _)) }

::day_15::main::131 { x(_ x(x(w2 w2) _)) }

::day_15::main::132 {
  x(w8 x(w6 w5))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_15::main::135 enum(::day_15::main::136 x(w8 x(w1 w5)))))
}

::day_15::main::135 {
  enum(w0 x(x(w5 w20) x(w3 dup581(w14 w10))))
  ::std::data::Array::to_list::cast = fn(w0 w7)
  ::day_15::main::137 = x(x(w5 w16) x(w14 x(w7 0)))
  ::std::numeric::N32::add::add = fn(w10 fn(1 w11))
  ::day_15::main::132 = x(x(w16 w20) x(w3 w11))
}

::day_15::main::136 { x(x(w3 w3) _) }

::day_15::main::137 {
  x(w9 x(w7 x(w6 w5)))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_15::main::140 enum(::day_15::main::141 x(w9 x(w7 x(w1 w5))))))
}

::day_15::main::140 {
  enum(w0 x(x(w6 w24) x(dup598(w17 w22) x(w3 dup600(w16 w8)))))
  ::std::unicode::Char::eq::eq = fn(ref(w0 _) fn(ref(91 _) ?(::day_15::main::144 ::day_15::main::143 x(x(w6 w19) x(w17 x(w16 _))))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::day_15::main::137 = x(x(w19 w24) x(w22 x(w3 w9)))
}

::day_15::main::141 { x(x(w4 w4) _) }

::day_15::main::143 {
  x(x(w10 w5) x(w8 x(w7 _)))
  ::std::numeric::N32::mul::mul = fn(w8 fn(100 w1))
  ::std::numeric::N32::add::add = fn(w1 fn(w7 w3))
  ::std::numeric::N32::add::add = fn(w10 fn(w3 w5))
}

::day_15::main::144 { x(x(w4 w4) _) }

::std::numeric::N32::eq::ne { fn(ref(dup612(w0 @ne(w10 out)) w0) fn(ref(dup613(w3 w10) w3) out)) }

::std::unicode::Char::eq::eq { fn(ref(dup616(w0 @eq(w10 out)) w0) fn(ref(dup617(w3 w10) w3) out)) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::data::Array::from_list::cast {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::data::Array::to_list::cast {
  fn(w0 tup(w7 tup(w12 w10)))
  ::std::data::Array::len = fn(ref(w0 w5) w7)
  ::std::data::Array::fold_back = fn(w5 fn(w10 fn(fn(w16 fn(w17 tup(w17 w16))) w12)))
}

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::numeric::N32::neg::neg { fn(@sub$(0 out) out) }

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::N32::add::add = fn(w1 fn(w4 w13))
}

::std::numeric::N32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup687(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::ops::vectorized::mul::mul::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::mul::mul = fn(w0 fn(w3 w10))
  ::std::numeric::N32::mul::mul = fn(w1 fn(w4 w13))
}

::std::numeric::N32::eq::eq { fn(ref(dup711(w0 @eq(w10 out)) w0) fn(ref(dup712(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::data::List::len { fn(ref(tup(dup719(w11 w7) w8) tup(w7 w8)) w11) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup748(w0 @lt(w10 out)) w0) fn(ref(dup749(w3 w10) w3) out)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::data::List::map {
  fn(tup(dup807(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup827(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::join {
  fn(w0 fn(w1 w14))
  ::std::data::List::into_iter = fn(w0 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w10) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(w1 x(w10 w14)))))
}

::std::data::List::join::4 {
  enum(w0 x(w4 x(w3 w7)))
  ::std::data::List::join::6 = x(w4 x(w3 x(w0 w7)))
}

::std::data::List::join::5 { x(_ x(_ tup(0 tup(w6 w6)))) }

::std::data::List::join::6 {
  x(w8 x(w7 w6))
  ::std::data::List::IntoIter::next = fn(ref(w7 w1) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(w8 x(w1 w6)))))
}

::std::data::List::join::9 {
  enum(w0 x(dup906(w6 w14) x(w4 x(w3 w12))))
  ::std::data::List::concat::concat = fn(w6 fn(w0 w8))
  ::std::data::List::concat::concat = fn(w3 fn(w8 w10))
  ::std::data::List::join::6 = x(w14 x(w4 x(w10 w12)))
}

::std::data::List::join::10 { x(_ x(_ x(w1 w1))) }

::std::data::List::iter { fn(ref(tup(dup981(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::from_fn {
  fn(w0 fn(ref(dup1065(w1 w16) w1) fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w10 x(w16 x(w4 w14))))))
}

::std::data::Array::from_fn::2 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::from_fn::3 {
  x(dup1071(w1 dup1071(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::data::Array::fold_back {
  fn(tup(w0 w1) fn(w3 fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::fold_back::3 ::std::data::Array::fold_back::2 x(w10 x(w1 x(w3 x(w4 w14)))))))
}

::std::data::Array::fold_back::2 { x(_ x(_ x(w3 x(_ w3)))) }

::std::data::Array::fold_back::3 {
  x(dup1128(w1 w2) x(w30 x(w29 x(w28 w14))))
  ::std::data::Array::Node::zip_with = fn(w2 fn(w22 fn(w30 fn(w28 w7))))
  ::std::data::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::logical::Option::unwrap = fn(w13 w14)
  ::std::data::Array::push_back = fn(ref(w11 tup(_ w22)) fn(w29 _))
}

::std::data::Array::len { fn(ref(tup(dup1139(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup1144(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup1159(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_back {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup1176(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_back::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_back::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w8)
}

::std::data::Array::push_back::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w7 w1))))
}

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup1201(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::push_front {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup1206(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_front::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w7)
}

::std::data::Array::push_front::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(w7 w1))))
}

::std::data::Array::push_front::5 {
  x(x(ref(tup(w2 w4) tup(w15 w12)) w26) w21)
  tup(w4 w2) = tup(w11 w12)
  ::std::numeric::N32::div::div = fn(w21 fn(2 w19))
  ::std::data::Array::push_front::4 = x(x(ref(w11 w15) w26) w19)
}

::std::data::Array::push_front::6 { x(x(w2 w2) _) }

::std::data::Array::pop_back {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_back::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_back::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup1258(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 {
  x(ref(w6 w28) x(dup1264(w0 w11) w26))
  ::std::numeric::N32::sub::sub = fn(w0 fn(1 w1))
  ::std::numeric::N32::rem::rem = fn(w1 fn(2 dup1267(w12 w29)))
  ::std::data::Array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 tup(w14 w15))))
  ::std::numeric::N32::eq::eq = fn(ref(w15 w22) fn(ref(1 _) ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(w14 x(w22 x(w29 x(x(w9 w28) w26)))))))
}

::std::data::Array::pop_back::8 {
  x(ref(w1 _) x(_ x(w16 x(x(tup(w6 w7) w24) enum(enum(w3 w27) enum(_ w27))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(w6 x(w7 w24)))))
}

::std::data::Array::pop_back::9 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::data::Array::pop_back::6 = x(w5 x(w4 w24))
}

::std::data::Array::pop_back::11 { x(_ x(w2 w2)) }

::std::data::Array::pop_back::12 { x(w3 x(_ w3)) }

::std::data::Array::pop_back::13 { x(w11 w11) }

::std::data::Array::pop_front {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_front::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_front::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup1310(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(ref(w2 w41) x(w30 w37))
  ref(w2 w5) = ref(tup(w8 w10) tup(w39 w21))
  tup(w10 w8) = tup(w17 w18)
  ::std::numeric::N32::add::add = fn(w30 fn(1 w25))
  ::std::numeric::N32::div::div = fn(w25 fn(2 w26))
  ::std::numeric::N32::eq::eq = fn(ref(w26 w33) fn(ref(1 _) ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w33 x(x(w5 w41) x(x(w17 w39) w37)))))))
}

::std::data::Array::pop_front::8 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) enum(enum(w3 w17) enum(_ w17))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::data::Array::Node::zip_with {
  fn(w0 fn(w1 fn(w2 fn(w3 w13))))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w9) fn(ref(1 _) ?(::std::data::Array::Node::zip_with::3 ::std::data::Array::Node::zip_with::2 x(w9 x(w1 x(w2 x(w3 w13)))))))
}

::std::data::Array::Node::zip_with::2 {
  x(_ x(w10 x(w9 x(fn(w2 fn(w4 w5)) w6))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w10 w2)
  ::std::data::Array::Node::node_to_leaf::cast = fn(w9 w4)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w6)
}

::std::data::Array::Node::zip_with::3 {
  x(dup1434(w8 w15) x(tup(w1 w2) x(tup(w5 w6) x(dup1437(w13 w19) tup(w14 w20)))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::std::numeric::N32::div::div = fn(w9 fn(2 w10))
  ::std::data::Array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  ::std::numeric::N32::div::div = fn(w15 fn(2 w16))
  ::std::data::Array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
}

::std::data::Array::Node::unzip_with {
  fn(w0 fn(w1 fn(w2 w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w8) fn(ref(1 _) ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(w8 x(w1 x(w2 w12))))))
}

::std::data::Array::Node::unzip_with::2 {
  x(_ x(w14 x(fn(w2 tup(w4 w5)) tup(w8 w10))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w14 w2)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w4 w8)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w10)
}

::std::data::Array::Node::unzip_with::3 {
  x(dup1455(w4 w13) x(tup(w1 w2) x(dup1457(w8 w16) tup(tup(w10 w18) tup(w11 w19)))))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w5))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::unzip_with = fn(w6 fn(w1 fn(w8 tup(w10 w11))))
  ::std::numeric::N32::div::div = fn(w13 fn(2 w14))
  ::std::data::Array::Node::unzip_with = fn(w14 fn(w2 fn(w16 tup(w18 w19))))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::Char::eq::ne { fn(ref(dup2778(w0 @ne(w10 out)) w0) fn(ref(dup2779(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2829(w0 w13) w2) tup(w0 w2)) w13) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

