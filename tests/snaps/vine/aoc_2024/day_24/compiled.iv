
::std::logical::Option::None { enum(_ enum(r r)) }

::std::ops::comparison::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::ops::comparison::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::ops::comparison::Ord::Gt { enum(_ enum(_ enum(r r))) }

::main { ::day_24::main }

::day_24::main {
  fn(ref(w1 w16) _)
  ::day_24::main::1 = x(x(w1 w26) x(::std::data::Map::empty w24))
  ::day_24::main::10 = x(x(w26 w30) x(w24 w28))
  ref(0 w8) = ref(w34 w11)
  ::day_24::main::20 = x(w28 x(x(w11 w34) x(0 _)))
  ::std::numeric::N64::to_string::to_string = fn(w8 tup(@add(8 w36) tup(w37 w38)))
  ::std::IO::println = fn(ref(w30 w16) fn(tup(w36 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w37)))))))) w38)) _))
}

::day_24::main::1 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::4 enum(::day_24::main::5 x(x(w1 w12) w6))))
}

::day_24::main::4 {
  enum(w0 x(w5 w3))
  ::std::unicode::String::len = fn(ref(w0 w7) w9)
  ::std::numeric::N32::eq::ne = fn(ref(w9 _) fn(ref(0 _) ?(::day_24::main::7 ::day_24::main::6 x(w5 x(w3 w7)))))
}

::day_24::main::5 { x(x(w3 w3) x(w1 w1)) }

::day_24::main::6 {
  x(w29 x(x(w27 w34) w25))
  ::std::unicode::String::split_once = fn(w25 fn(tup(2 tup(tup(58 tup(32 w32)) w32)) tup(w3 w4)))
  ::std::logical::Option::unwrap = fn(w4 w9)
  ::std::data::List::get = fn(ref(w9 _) fn(0 w12))
  ::std::unicode::Char::eq::eq = fn(w12 fn(ref(49 _) w16))
  ::day_24::Wire::input = fn(w16 w23)
  ::std::data::Map::insert::1 = fn(ref(w27 w19) fn(w3 fn(w23 _)))
  ::day_24::main::1 = x(w29 x(w19 w34))
}

::day_24::main::7 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_24::main::9 {
  x(x(w11 w4) fn(w0 w8))
  ::std::data::Map::get_or_insert::1 = fn(ref(w11 w4) fn(w0 fn(::day_24::Wire::new w8)))
}

::day_24::main::10 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_24::main::13 enum(::day_24::main::14 x(x(w1 w12) w6))))
}

::day_24::main::13 {
  enum(w0 x(w5 x(w3 w93)))
  ::std::unicode::String::split = fn(w0 fn(tup(1 tup(tup(32 w73) w73)) w8))
  ::std::data::List::get = fn(ref(w8 w11) fn(0 ref(w14 _)))
  ::std::data::List::get = fn(ref(w11 w18) fn(2 ref(w21 _)))
  ::std::data::List::get = fn(ref(w18 w25) fn(4 ref(w28 _)))
  ::day_24::main::9 = x(x(w3 w76) fn(w14 w34))
  ::day_24::Wire::get = fn(w34 w37)
  ::day_24::main::9 = x(x(w76 w79) fn(w21 w42))
  ::day_24::Wire::get = fn(w42 w45)
  ::std::data::List::get = fn(ref(w25 _) fn(1 w54))
  ::std::data::List::get = fn(w54 fn(0 ref(dup53(w59 w58) w58)))
  ::std::unicode::Char::eq::eq = fn(ref(w59 w81) fn(ref(65 _) ?(::day_24::main::17 ::day_24::main::16 x(w37 x(w45 x(w81 w85))))))
  ::day_24::main::9 = x(x(w79 w91) fn(w28 w66))
  ::day_24::Wire::set = fn(w66 fn(w85 _))
  ::day_24::main::10 = x(w5 x(w91 w93))
}

::day_24::main::14 { x(x(w3 w3) x(w1 w1)) }

::day_24::main::16 {
  x(w6 x(w5 x(_ w2)))
  ::std::logical::Bool::and::and = fn(w6 fn(w5 w2))
}

::day_24::main::17 {
  x(w8 x(w7 x(w6 w9)))
  ::std::unicode::Char::eq::eq = fn(ref(w6 _) fn(ref(79 _) ?(::day_24::main::19 ::day_24::main::18 x(w8 x(w7 w9)))))
}

::day_24::main::18 {
  x(w5 x(w4 w2))
  ::std::logical::Bool::or::or = fn(w5 fn(w4 w2))
}

::day_24::main::19 {
  x(w5 x(w4 w2))
  ::std::logical::Bool::xor::xor = fn(w5 fn(w4 w2))
}

::day_24::main::20 {
  x(w14 x(w13 x(dup98(w0 dup98(w3 w25)) w24)))
  ::std::numeric::N32::div::div = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w3 fn(10 w4))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w4 w5))
  ::std::unicode::String::from_chars::cast = fn(tup(3 tup(tup(122 tup(w2 tup(w5 w15))) w15)) w7)
  ::std::data::Map::get::1 = fn(ref(w14 w17) fn(ref(w7 _) enum(::day_24::main::24 enum(::day_24::main::25 x(w17 x(w13 x(w25 w24)))))))
}

::day_24::main::24 {
  enum(w2 x(w8 x(x(w7 w36) x(w5 w33))))
  ::day_24::Wire::get = fn(w2 ?(0 ::std::numeric::N64::one w22))
  ::std::numeric::N64::shl::shl = fn(w12 fn(1 w13))
  ::std::numeric::N64::or::or = fn(w13 fn(w22 w7))
  ::std::numeric::N32::add::add = fn(w5 fn(1 w17))
  ::day_24::main::20 = x(w8 x(x(w12 w36) x(w17 w33)))
}

::day_24::main::25 { x(_ x(x(w3 w3) _)) }

::std::numeric::N32::eq::ne { fn(ref(dup119(w0 @ne(w10 out)) w0) fn(ref(dup120(w3 w10) w3) out)) }

::std::unicode::Char::eq::eq { fn(ref(dup123(w0 @eq(w10 out)) w0) fn(ref(dup124(w3 w10) w3) out)) }

::std::data::Map::insert::1 {
  fn(ref(tup(w1 w3) tup(w24 w22)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w1 w14) fn(ref(0 _) ?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(w14 w24) x(x(w3 w22) x(w7 x(w8 w18)))))))
}

::std::data::Map::insert::1::2 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(w8 w7) ::std::data::Map::empty))) x(w8 x(w7 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::3 {
  x(w25 x(x(w23 w47) x(w21 x(w20 w35))))
  ref(w23 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w43 tup(tup(w41 w39) w37)))
  ::std::data::List::ord::cmp::1 = fn(ref(w21 w27) fn(ref(w6 w30) enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(w25 x(x(w1 w47) x(w27 x(w20 x(x(w4 w43) x(x(w30 w41) x(x(w8 w39) x(x(w12 w37) x(w35 _))))))))))))))
}

::std::data::Map::insert::1::8 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w17) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w9 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_right = fn(ref(w24 w29) _)
}

::std::data::Map::insert::1::9 { x(x(w15 w15) x(x(w13 w13) x(w11 x(w10 x(x(w9 w9) x(x(_ w11) x(x(w5 w10) x(x(w3 w3) x(enum(enum(w5 w23) enum(_ w23)) _))))))))) }

::std::data::Map::insert::1::10 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w17) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w3 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_left = fn(ref(w24 w29) _)
}

::std::numeric::N32::eq::eq { fn(ref(dup200(w0 @eq(w10 out)) w0) fn(ref(dup201(w3 w10) w3) out)) }

::std::data::List::ord::cmp::1 {
  fn(w1 fn(w4 w30))
  ::std::data::List::iter = fn(w1 w11)
  ::std::data::List::iter = fn(w4 w16)
  ::std::data::List::ord::cmp::1::1 = x(x(w11 w34) x(x(w16 w32) w30))
  ::std::data::List::Iter::drop = fn(ref(w34 _) _)
  ::std::data::List::Iter::drop = fn(ref(w32 _) _)
}

::std::data::List::ord::cmp::1::1 {
  x(x(w5 w24) x(x(w3 w22) w20))
  ::std::data::List::Iter::next = fn(ref(w5 w7) w9)
  ::std::data::List::Iter::next = fn(ref(w3 w11) w13)
  tup(w9 w13) = tup(w16 enum(::std::data::List::ord::cmp::1::14 enum(::std::data::List::ord::cmp::1::17 x(x(w7 w24) x(x(w11 w22) x(w20 w16))))))
}

::std::data::List::ord::cmp::1::11 { x(x(w4 w4) x(x(w2 w2) ::std::ops::comparison::Ord::Lt)) }

::std::data::List::ord::cmp::1::13 { x(x(w4 w4) x(x(w2 w2) ::std::ops::comparison::Ord::Gt)) }

::std::data::List::ord::cmp::1::14 { enum(w0 x(w7 x(w5 x(w9 enum(::std::data::List::ord::cmp::1::15 enum(::std::data::List::ord::cmp::1::16 x(w7 x(w5 x(w9 w0))))))))) }

::std::data::List::ord::cmp::1::15 {
  enum(w11 x(w8 x(w6 x(w17 w3))))
  ::std::ops::comparison::Ord::cmp_from_lt::1 = fn(w11 fn(w3 enum(::std::data::List::ord::cmp::1::11 enum(::std::data::List::ord::cmp::1::1 enum(::std::data::List::ord::cmp::1::13 x(w8 x(w6 w17)))))))
}

::std::data::List::ord::cmp::1::16 { x(x(w5 w5) x(x(w3 w3) x(::std::ops::comparison::Ord::Lt _))) }

::std::data::List::ord::cmp::1::17 { x(x(w6 w6) x(x(w4 w4) x(w7 enum(::std::data::List::ord::cmp::1::18 enum(::std::ops::comparison::Ord::Eq w7))))) }

::std::data::List::ord::cmp::1::18 { enum(_ ::std::ops::comparison::Ord::Gt) }

::std::ops::comparison::Ord::cmp_from_lt::1 {
  fn(ref(w1 w21) fn(ref(w4 w19) w17))
  ::std::unicode::Char::ord::lt = fn(ref(w1 w11) fn(ref(w4 w14) ?(::std::ops::comparison::Ord::cmp_from_lt::1::3 ::std::ops::comparison::Ord::cmp_from_lt::1::2 x(x(w11 w21) x(x(w14 w19) w17)))))
}

::std::ops::comparison::Ord::cmp_from_lt::1::2 { x(x(w4 w4) x(x(w2 w2) ::std::ops::comparison::Ord::Lt)) }

::std::ops::comparison::Ord::cmp_from_lt::1::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w11 w1) fn(ref(w9 w4) ?(::std::ops::comparison::Ord::Eq ::std::ops::comparison::Ord::Gt w12)))
}

::std::unicode::Char::ord::lt { fn(ref(dup293(w0 @lt(w10 out)) w0) fn(ref(dup294(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::unicode::Char::ord::lt = fn(w4 fn(w1 w14))
}

::std::data::Map::get_or_insert::1 {
  fn(w1 fn(w3 fn(w4 ref(w17 w20))))
  ::std::data::Map::insert::1 = fn(w1 fn(w3 fn(w20 w13)))
  ::std::logical::Option::unwrap_or = fn(w13 fn(w4 w17))
}

::std::logical::Bool::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::logical::Bool::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::logical::Bool::xor::xor { fn(@n32_xor(w1 out) fn(w1 out)) }

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::data::Map::get::1 {
  fn(ref(tup(w1 w3) tup(w15 w23)) fn(ref(w8 w21) w19))
  ::std::numeric::N32::eq::eq = fn(ref(w1 w15) fn(ref(0 _) ?(::std::data::Map::get::1::3 ::std::data::Map::get::1::2 x(x(w3 w23) x(x(w8 w21) w19)))))
}

::std::data::Map::get::1::2 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Map::get::1::3 {
  x(x(w21 w1) x(x(w19 w38) w30))
  ref(w21 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w36 tup(tup(w26 w34) w32)))
  ::std::data::List::ord::cmp::1 = fn(ref(w19 w23) fn(ref(w6 w26) enum(::std::data::Map::get::1::8 enum(::std::data::Map::get::1::9 enum(::std::data::Map::get::1::10 x(x(w23 w38) x(x(w4 w36) x(x(w8 w34) x(x(w12 w32) w30)))))))))
}

::std::data::Map::get::1::8 {
  x(x(w8 w13) x(x(w6 w10) x(x(w4 w4) x(x(w2 w2) w15))))
  ::std::data::Map::get::1 = fn(ref(w6 w10) fn(ref(w8 w13) w15))
}

::std::data::Map::get::1::9 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w10) x(x(w2 w2) enum(enum(ref(w4 w10) w13) enum(_ w13)))))) }

::std::data::Map::get::1::10 {
  x(x(w8 w13) x(x(w6 w6) x(x(w4 w4) x(x(w2 w10) w15))))
  ::std::data::Map::get::1 = fn(ref(w2 w10) fn(ref(w8 w13) w15))
}

::std::numeric::N64::or::or {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::or::or = fn(w0 fn(w3 w10))
  ::std::numeric::N32::or::or = fn(w1 fn(w4 w13))
}

::std::numeric::N32::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::numeric::N64::shl::shl {
  fn(tup(w0 w1) fn(dup401(w8 w14) w13))
  ::std::numeric::N32::and::and = fn(w8 fn(32 w9))
  ::std::numeric::N32::eq::ne = fn(ref(w9 _) fn(ref(0 _) ?(::std::numeric::N64::shl::shl::3 ::std::numeric::N64::shl::shl::2 x(w0 x(w1 x(w14 w13))))))
}

::std::numeric::N64::shl::shl::2 {
  x(w7 x(_ x(w5 tup(0 w2))))
  ::std::numeric::N32::shl::shl = fn(w7 fn(w5 w2))
}

::std::numeric::N64::shl::shl::3 {
  x(dup408(w0 w6) x(w14 x(dup410(w1 dup410(w4 w7)) tup(w2 w10))))
  ::std::numeric::N32::shl::shl = fn(w0 fn(w1 w2))
  ::std::numeric::N32::shl::shl = fn(w14 fn(w4 w5))
  ::std::numeric::N32::neg::neg = fn(w7 w8)
  ::std::numeric::N32::shr::shr = fn(w6 fn(w8 w9))
  ::std::numeric::N32::or::or = fn(w5 fn(w9 w10))
}

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::numeric::N32::neg::neg { fn(@sub$(0 out) out) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N64::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N64::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N64::to_string::to_string::2 {
  x(w4 w9)
  ::std::numeric::N64::to_string::to_string::4 = x(w4 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N64::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N64::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N64::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N64::to_string::to_string::5 {
  x(w16 x(w15 w19))
  ::std::numeric::N64::div_rem_n32 = fn(w16 fn(10 tup(w2 w3)))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w3 w6))
  ::std::unicode::String::from_chars::cast = fn(tup(1 tup(tup(w6 w17) w17)) w8)
  ::std::data::List::concat::concat = fn(w8 fn(w15 w10))
  ::std::numeric::N64::to_string::to_string::4 = x(w2 x(w10 w19))
}

::std::numeric::N64::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::eq::ne {
  fn(ref(tup(w1 w3) tup(w19 w29)) fn(ref(tup(w8 w10) tup(w22 w27)) w25))
  ::std::numeric::N32::eq::ne = fn(ref(w1 w19) fn(ref(w8 w22) ?(::std::numeric::N64::eq::ne::3 ::std::numeric::N64::eq::ne::2 x(x(w3 w29) x(x(w10 w27) w25)))))
}

::std::numeric::N64::eq::ne::2 { x(x(w4 w4) x(x(w2 w2) 1)) }

::std::numeric::N64::eq::ne::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::numeric::N32::eq::ne = fn(ref(w11 w1) fn(ref(w9 w4) ?(0 1 w12)))
}

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::day_24::Wire::new { tup(w4 w4) }

::day_24::Wire::input { fn(w0 tup(_ w0)) }

::day_24::Wire::get { fn(ref(tup(w0 dup496(w1 w8)) tup(w0 w1)) w8) }

::day_24::Wire::set { fn(ref(tup(w6 w2) tup(_ w2)) fn(w6 _)) }

::std::ops::comparison::Ord::gt::2 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup532(w0 @lt(w10 out)) w0) fn(ref(dup533(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup591(w0 @le(w10 out)) w0) fn(ref(dup592(w3 w10) w3) out)) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::iter { fn(ref(tup(dup765(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new {
  fn(w0 fn(w1 fn(w2 tup(w14 tup(w6 tup(w1 w10))))))
  ::std::data::Map::len = fn(ref(w0 w6) w8)
  ::std::data::Map::len = fn(ref(w2 w10) w12)
  ::std::numeric::N32::add::add = fn(w8 fn(w12 w13))
  ::std::numeric::N32::add::add = fn(w13 fn(1 w14))
}

::std::data::Map::len { fn(ref(tup(dup1280(w0 w8) w2) tup(w0 w2)) w8) }

::std::data::Map::balance_left {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w6 w14) fn(ref(w8 w17) ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(w14 x(w7 x(w17 w20))))))
}

::std::data::Map::balance_left::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_left::3 {
  x(w10 x(w9 x(tup(_ tup(w1 tup(w2 w3))) w18)))
  ::std::data::Map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))))
}

::std::data::Map::balance_left::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w3 tup(w9 w8)))))))
  ::std::data::Map::new = fn(w12 fn(w11 fn(w10 w3)))
}

::std::data::Map::balance_left::6 {
  x(w21 x(w20 x(tup(_ tup(w1 tup(w2 w3))) x(w18 x(w17 tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w18 fn(w17 w14)))
}

::std::data::Map::balance_right {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w8 w14) fn(ref(w6 w17) ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(w17 x(w7 x(w14 w20))))))
}

::std::data::Map::balance_right::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_right::3 {
  x(tup(_ tup(w1 tup(w2 w3))) x(w9 x(w8 w18)))
  ::std::data::Map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))))
}

::std::data::Map::balance_right::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w10 tup(w9 w5)))))))
  ::std::data::Map::new = fn(w8 fn(w12 fn(w11 w5)))
}

::std::data::Map::balance_right::6 {
  x(w21 x(w20 x(w19 x(w18 x(tup(_ tup(w1 tup(w2 w3))) tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w21 fn(w20 w14)))
}

::std::data::Map::is_balanced {
  fn(ref(tup(dup1564(w0 w14) w2) tup(w0 w2)) fn(ref(tup(w7 w8) tup(w19 w8)) w21))
  ::std::numeric::N32::mul::mul = fn(3 fn(w14 w15))
  ::std::numeric::N32::add::add = fn(w15 fn(2 w16))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w16 _) fn(ref(w7 w19) w21))
}

::std::numeric::N32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::data::Map::is_single {
  fn(ref(tup(w1 w2) tup(w15 w2)) fn(ref(tup(dup1575(w6 w17) w8) tup(w6 w8)) w20))
  ::std::numeric::N32::mul::mul = fn(2 fn(w17 w18))
  ::std::numeric::N32::ord::le = fn(ref(w1 w15) fn(ref(w18 _) w20))
}

::std::data::Map::size {
  fn(ref(tup(tup(dup1578(w0 w16) w2) tup(w5 tup(dup1579(w6 w17) w8))) tup(tup(w0 w2) tup(w5 tup(w6 w8)))) w19)
  ::std::numeric::N32::add::add = fn(w16 fn(w17 w18))
  ::std::numeric::N32::add::add = fn(w18 fn(1 w19))
}

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8))) fn(w1 w8)) }

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N64::one { tup(1 0) }

::std::numeric::N64::sub::sub { fn(tup(dup(@sub(bl0 l) @lt(bl1 c)) @sub(bh @sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::numeric::N64::div_rem_n32 {
  fn(tup(w0 dup2153(w6 w11)) fn(dup2158(w7 dup2158(w10 w32)) tup(tup(w19 w38) w22)))
  ::std::numeric::N32::div::div = fn(w6 fn(w7 w8))
  ::std::numeric::N32::rem::rem = fn(w11 fn(w10 w12))
  ::std::ops::comparison::Ord::gt::2 = fn(ref(w12 w30) fn(ref(w32 dup2157(w39 dup2157(w44 dup2157(w16 w20)))) ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(w30 w41) x(w39 x(x(w8 w38) _))))))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w0 dup2152(w15 w21)) x(w41 x(w44 x(0 w43))))
  ::std::numeric::N32::div::div = fn(w15 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w43 fn(w17 w19))
  ::std::numeric::N32::rem::rem = fn(w21 fn(w20 w22))
}

::std::numeric::N64::div_rem_n32::2 {
  x(x(dup2168(w0 w5) w6) x(dup2169(w1 w4) x(x(_ w2) _)))
  ::std::numeric::N32::div::div = fn(w0 fn(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w5 fn(w4 w6))
}

::std::numeric::N64::div_rem_n32::3 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::4 {
  x(w10 x(w8 w7))
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(w10 x(w1 w7)))))
}

::std::numeric::N64::div_rem_n32::5 {
  x(x(w27 w33) x(dup2184(w2 w9) x(dup2186(w0 dup2186(w12 w30)) x(w23 w29))))
  ::std::numeric::N32::div::div = fn(4294967295 fn(w0 w1))
  ::std::numeric::N32::mul::mul = fn(w1 fn(w2 dup2190(w5 w11)))
  ::std::numeric::N32::add::add = fn(w23 fn(w5 w7))
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::6 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::unicode::Char::eq::ne { fn(ref(dup2518(w0 @ne(w10 out)) w0) fn(ref(dup2519(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2539(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split {
  fn(w0 fn(w1 w9))
  ::std::unicode::String::split::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w9)))
}

::std::unicode::String::split::1 {
  x(w14 x(dup2548(w1 w20) x(w12 w18)))
  ::std::unicode::String::split_once = fn(w14 fn(w1 tup(w3 enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(w20 x(w9 w18)))))))
  ::std::data::List::concat::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::unicode::String::split::5 {
  enum(w0 w4)
  ::std::unicode::String::split::1 = x(w0 w4)
}

::std::unicode::String::split::6 { x(_ x(w1 w1)) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

