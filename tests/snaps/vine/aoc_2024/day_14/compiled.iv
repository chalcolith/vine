
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_14::main }

::day_14::main {
  fn(ref(w1 w32) _)
  ::day_14::main::1 = x(x(w1 w43) x(tup(0 tup(w39 w39)) dup9(w11 w59)))
  ::std::data::List::into_iter = fn(w11 w12)
  ::day_14::main::13 = x(x(0 w52) x(x(0 w50) x(x(0 w48) x(x(0 w46) w12))))
  ::std::numeric::N32::mul::mul = fn(w52 fn(w50 w16))
  ::std::numeric::N32::mul::mul = fn(w16 fn(w48 w18))
  ::std::numeric::N32::mul::mul = fn(w18 fn(w46 w20))
  ::std::numeric::N32::to_string::to_string = fn(w20 tup(@add(8 w53) tup(w54 w55)))
  ::std::IO::println = fn(ref(w43 w23) fn(tup(w53 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w54)))))))) w55)) _))
  ::day_14::main::33 = x(x(w23 w61) x(w59 0))
  ::std::numeric::N32::to_string::to_string = fn(0 tup(@add(8 w62) tup(w63 w64)))
  ::std::IO::println = fn(ref(w61 w32) fn(tup(w62 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w63)))))))) w64)) _))
}

::day_14::main::1 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_14::main::4 enum(::day_14::main::5 x(x(w1 w12) w6))))
}

::day_14::main::4 {
  enum(w0 x(w5 w3))
  ::std::unicode::String::len = fn(ref(w0 w7) w9)
  ::std::numeric::N32::eq::ne = fn(ref(w9 _) fn(ref(0 _) ?(::day_14::main::7 ::day_14::main::6 x(w5 x(w3 w7)))))
}

::day_14::main::5 { x(x(w3 w3) x(w1 w1)) }

::day_14::main::6 {
  x(w58 x(x(w56 w74) w54))
  ::std::unicode::String::split_once = fn(w54 fn(tup(2 tup(tup(112 tup(61 w61)) w61)) tup(_ w3)))
  ::std::logical::Option::unwrap = fn(w3 w6)
  ::std::unicode::String::split_once = fn(w6 fn(tup(1 tup(tup(44 w64) w64)) tup(w9 w10)))
  ::std::logical::Option::unwrap = fn(w10 w13)
  ::std::unicode::String::split_once = fn(w13 fn(tup(3 tup(tup(32 tup(118 tup(61 w67))) w67)) tup(w16 w17)))
  ::std::logical::Option::unwrap = fn(w17 w20)
  ::std::unicode::String::split_once = fn(w20 fn(tup(1 tup(tup(44 w70) w70)) tup(w23 w24)))
  ::std::logical::Option::unwrap = fn(w24 w27)
  ::std::numeric::N32::parse = fn(w9 w30)
  ::std::logical::Option::unwrap = fn(w30 w31)
  ::std::numeric::N32::parse = fn(w16 w34)
  ::std::logical::Option::unwrap = fn(w34 w35)
  ::std::data::List::push_back = fn(ref(w56 w46) fn(tup(w31 tup(w35 tup(w39 w43))) _))
  ::day_14::main::1 = x(w58 x(w46 w74))
  ::day_14::main::9 = fn(w23 fn(11 w39))
  ::day_14::main::9 = fn(w27 fn(7 w43))
}

::day_14::main::7 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_14::main::9 {
  fn(w0 fn(w1 w17))
  ::std::data::List::get = fn(ref(w0 w8) fn(0 w12))
  ::std::unicode::Char::eq::eq = fn(w12 fn(ref(45 _) ?(::day_14::main::12 ::day_14::main::11 x(w8 x(w1 w17)))))
}

::day_14::main::11 {
  x(w13 x(w12 w10))
  ::std::data::List::pop_front = fn(ref(w13 w2) _)
  ::std::numeric::N32::parse = fn(w2 w8)
  ::std::logical::Option::unwrap = fn(w8 w9)
  ::std::numeric::N32::sub::sub = fn(w12 fn(w9 w10))
}

::day_14::main::12 {
  x(w5 x(_ w2))
  ::std::numeric::N32::parse = fn(w5 w1)
  ::std::logical::Option::unwrap = fn(w1 w2)
}

::day_14::main::13 {
  x(w13 x(w11 x(w9 x(w7 w5))))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_14::main::16 enum(::day_14::main::17 x(w13 x(w11 x(w9 x(w7 w1)))))))
}

::day_14::main::16 {
  enum(tup(w2 tup(w3 tup(w4 w5))) x(x(w18 w57) x(x(w16 w55) x(x(w14 w53) x(x(w12 w51) w10)))))
  ::std::numeric::N32::mul::mul = fn(w4 fn(100 w21))
  ::std::numeric::N32::add::add = fn(w2 fn(w21 w22))
  ::std::numeric::N32::rem::rem = fn(w22 fn(11 w23))
  ::std::numeric::N32::mul::mul = fn(w5 fn(100 w27))
  ::std::numeric::N32::add::add = fn(w3 fn(w27 w28))
  ::std::numeric::N32::rem::rem = fn(w28 fn(7 w29))
  ::std::numeric::N32::div::div = fn(11 fn(2 w35))
  ::std::numeric::N32::ord::lt = fn(ref(w23 w33) fn(ref(w35 _) ?(::day_14::main::20 ::day_14::main::19 x(x(w18 w48) x(x(w16 w46) x(x(w14 w44) x(x(w12 w42) x(w33 x(w29 _)))))))))
  ::day_14::main::13 = x(x(w48 w57) x(x(w46 w55) x(x(w44 w53) x(x(w42 w51) w10))))
}

::day_14::main::17 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _)))) }

::day_14::main::19 {
  x(w11 x(w9 x(x(w7 w7) x(x(w5 w5) x(_ x(w2 w18))))))
  ::std::numeric::N32::div::div = fn(7 fn(2 w15))
  ::std::numeric::N32::ord::lt = fn(ref(w2 w13) fn(ref(w15 _) ?(::day_14::main::23 ::day_14::main::22 x(w11 x(w9 x(w13 w18))))))
}

::day_14::main::20 {
  x(x(w16 w16) x(x(w14 w14) x(w12 x(w10 x(w8 w7)))))
  ::std::numeric::N32::div::div = fn(11 fn(2 w3))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w8 _) fn(ref(w3 _) ?(::day_14::main::27 ::day_14::main::26 x(w12 x(w10 w7)))))
}

::day_14::main::22 {
  x(x(w7 w1) x(x(w5 w5) _))
  ::std::numeric::N32::add::add = fn(w7 fn(1 w1))
}

::day_14::main::23 {
  x(x(w11 w11) x(w9 x(w7 w12)))
  ::std::numeric::N32::div::div = fn(7 fn(2 w3))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w7 _) fn(ref(w3 _) ?(::day_14::main::25 ::day_14::main::24 x(w9 w12))))
}

::day_14::main::24 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_14::main::25 { x(x(w2 w2) _) }

::day_14::main::26 {
  x(w6 x(w4 x(w2 w13)))
  ::std::numeric::N32::div::div = fn(7 fn(2 w10))
  ::std::numeric::N32::ord::lt = fn(ref(w2 w8) fn(ref(w10 _) ?(::day_14::main::30 ::day_14::main::29 x(w6 x(w4 x(w8 w13))))))
}

::day_14::main::27 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_14::main::29 {
  x(x(w7 w1) x(x(w5 w5) _))
  ::std::numeric::N32::add::add = fn(w7 fn(1 w1))
}

::day_14::main::30 {
  x(x(w11 w11) x(w9 x(w7 w12)))
  ::std::numeric::N32::div::div = fn(7 fn(2 w3))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w7 _) fn(ref(w3 _) ?(::day_14::main::32 ::day_14::main::31 x(w9 w12))))
}

::day_14::main::31 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_14::main::32 { x(x(w2 w2) _) }

::day_14::main::33 {
  x(x(w8 w12) w6)
  ::std::IO::read_line = fn(ref(w8 w1) enum(::day_14::main::36 enum(::day_14::main::37 x(x(w1 w12) w6))))
}

::day_14::main::36 {
  enum(w0 x(x(w5 w48) x(dup180(w15 w46) w2)))
  ::std::numeric::N32::parse = fn(w0 enum(::day_14::main::41 enum(::day_14::main::42 x(x(w2 dup182(w41 dup182(w24 w27))) _))))
  ::std::IO::println = fn(ref(w5 w8) fn(tup(7 tup(tup(27 tup(91 tup(50 tup(74 tup(27 tup(91 tup(72 w37))))))) w37)) _))
  ::std::data::Array::new = fn(11 fn(46 w12))
  ::std::data::Array::new = fn(7 fn(w12 w13))
  ::std::data::List::into_iter = fn(w15 w16)
  ::day_14::main::43 = x(w41 x(x(w13 w40) w16))
  ::std::data::Array::to_list::cast = fn(w40 w19)
  ::day_14::main::48 = x(x(w8 w44) w19)
  ::std::numeric::N32::to_string::to_string = fn(w24 w25)
  ::std::IO::println = fn(ref(w44 w22) fn(w25 _))
  ::std::numeric::N32::add::add = fn(w27 fn(1 w28))
  ::day_14::main::33 = x(x(w22 w48) x(w46 w28))
}

::day_14::main::37 { x(x(w3 w3) _) }

::day_14::main::41 { enum(w0 x(x(_ w0) _)) }

::day_14::main::42 { x(x(w2 w2) _) }

::day_14::main::43 {
  x(w8 x(w7 w5))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_14::main::46 enum(::day_14::main::47 x(w8 x(w7 w1)))))
}

::day_14::main::46 {
  enum(tup(w2 tup(w3 tup(w4 w5))) x(dup204(w16 dup204(w23 w43)) x(x(w12 w42) w10)))
  ::std::numeric::N32::mul::mul = fn(w4 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w2 fn(w17 w18))
  ::std::numeric::N32::rem::rem = fn(w18 fn(11 w19))
  ::std::numeric::N32::mul::mul = fn(w5 fn(w23 w24))
  ::std::numeric::N32::add::add = fn(w3 fn(w24 w25))
  ::std::numeric::N32::rem::rem = fn(w25 fn(7 w26))
  ::std::data::Array::get = fn(ref(w12 w29) fn(w26 w33))
  ::std::data::Array::get = fn(w33 fn(w19 ref(_ 35)))
  ::day_14::main::43 = x(w43 x(x(w29 w42) w10))
}

::day_14::main::47 { x(_ x(x(w2 w2) _)) }

::day_14::main::48 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_14::main::51 enum(::day_14::main::52 x(w7 w1))))
}

::day_14::main::51 {
  enum(w0 x(x(w4 w14) w2))
  ::std::data::Array::to_list::cast = fn(w0 w9)
  ::std::unicode::String::from_chars::cast = fn(w9 w10)
  ::std::IO::println = fn(ref(w4 w6) fn(w10 _))
  ::day_14::main::48 = x(x(w6 w14) w2)
}

::day_14::main::52 { x(x(w2 w2) _) }

::std::numeric::N32::eq::ne { fn(ref(dup233(w0 @ne(w10 out)) w0) fn(ref(dup234(w3 w10) w3) out)) }

::std::unicode::Char::eq::eq { fn(ref(dup237(w0 @eq(w10 out)) w0) fn(ref(dup238(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::lt { fn(ref(dup257(w0 @lt(w10 out)) w0) fn(ref(dup258(w3 w10) w3) out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup285(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::data::Array::to_list::cast {
  fn(w0 tup(w7 tup(w12 w10)))
  ::std::data::Array::len = fn(ref(w0 w5) w7)
  ::std::data::Array::fold_back = fn(w5 fn(w10 fn(fn(w16 fn(w17 tup(w17 w16))) w12)))
}

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup392(w0 @le(w10 out)) w0) fn(ref(dup393(w3 w10) w3) out)) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::iter { fn(ref(tup(dup570(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::new {
  fn(dup648(w4 w5) fn(w1 tup(w4 w7)))
  ::std::data::Array::Node::new = fn(w5 fn(w1 w7))
}

::std::numeric::N32::eq::eq { fn(ref(dup685(w0 @eq(w10 out)) w0) fn(ref(dup686(w3 w10) w3) out)) }

::std::data::Array::fold_back {
  fn(tup(w0 w1) fn(w3 fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::fold_back::3 ::std::data::Array::fold_back::2 x(w10 x(w1 x(w3 x(w4 w14)))))))
}

::std::data::Array::fold_back::2 { x(_ x(_ x(w3 x(_ w3)))) }

::std::data::Array::fold_back::3 {
  x(dup731(w1 w2) x(w30 x(w29 x(w28 w14))))
  ::std::data::Array::Node::zip_with = fn(w2 fn(w22 fn(w30 fn(w28 w7))))
  ::std::data::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::logical::Option::unwrap = fn(w13 w14)
  ::std::data::Array::push_back = fn(ref(w11 tup(_ w22)) fn(w29 _))
}

::std::data::Array::len { fn(ref(tup(dup742(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup747(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup762(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_back {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup779(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_back::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_back::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w8)
}

::std::data::Array::push_back::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w7 w1))))
}

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup804(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::pop_front {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_front::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_front::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup913(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(ref(w2 w41) x(w30 w37))
  ref(w2 w5) = ref(tup(w8 w10) tup(w39 w21))
  tup(w10 w8) = tup(w17 w18)
  ::std::numeric::N32::add::add = fn(w30 fn(1 w25))
  ::std::numeric::N32::div::div = fn(w25 fn(2 w26))
  ::std::numeric::N32::eq::eq = fn(ref(w26 w33) fn(ref(1 _) ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w33 x(x(w5 w41) x(x(w17 w39) w37)))))))
}

::std::data::Array::pop_front::8 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) enum(enum(w3 w17) enum(_ w17))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::new {
  fn(w0 fn(w1 w11))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w7) fn(ref(1 _) ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(w7 x(w1 w11)))))
}

::std::data::Array::Node::new::2 {
  x(_ x(w3 w1))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w3 w1)
}

::std::data::Array::Node::new::3 {
  x(dup962(w0 w5) x(dup963(w3 w7) tup(w4 w8)))
  ::std::numeric::N32::add::add = fn(w0 fn(1 w1))
  ::std::numeric::N32::div::div = fn(w1 fn(2 w2))
  ::std::data::Array::Node::new = fn(w2 fn(w3 w4))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::new = fn(w6 fn(w7 w8))
}

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::data::Array::Node::zip_with {
  fn(w0 fn(w1 fn(w2 fn(w3 w13))))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w9) fn(ref(1 _) ?(::std::data::Array::Node::zip_with::3 ::std::data::Array::Node::zip_with::2 x(w9 x(w1 x(w2 x(w3 w13)))))))
}

::std::data::Array::Node::zip_with::2 {
  x(_ x(w10 x(w9 x(fn(w2 fn(w4 w5)) w6))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w10 w2)
  ::std::data::Array::Node::node_to_leaf::cast = fn(w9 w4)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w6)
}

::std::data::Array::Node::zip_with::3 {
  x(dup1037(w8 w15) x(tup(w1 w2) x(tup(w5 w6) x(dup1040(w13 w19) tup(w14 w20)))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::std::numeric::N32::div::div = fn(w9 fn(2 w10))
  ::std::data::Array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  ::std::numeric::N32::div::div = fn(w15 fn(2 w16))
  ::std::data::Array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse {
  fn(w0 w15)
  ::std::unicode::String::to_chars::cast = fn(w0 tup(w5 tup(w6 _)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w11) fn(ref(0 _) ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w11 x(w6 w15)))))
}

::std::numeric::N32::parse::2 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::4 {
  x(w8 w7)
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w1 w7))))
}

::std::numeric::N32::parse::5 {
  x(w18 x(tup(w1 w2) x(w16 w29)))
  ::std::unicode::Char::ord::le = fn(ref(48 _) fn(ref(w1 w22) @n32_and(w27 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w21 w29))))))))
  ::std::unicode::Char::ord::le = fn(ref(w22 w21) fn(ref(57 _) w27))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  ::std::numeric::N32::mul::mul = fn(w2 fn(10 w13))
  ::std::unicode::Char::sub_char::sub = fn(w1 fn(48 w15))
  ::std::numeric::N32::add::add = fn(w13 fn(w15 w17))
  ::std::numeric::N32::sub::sub = fn(w4 fn(1 w19))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w9 w9) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::ord::le { fn(ref(dup1720(w0 @le(w10 out)) w0) fn(ref(dup1721(w3 w10) w3) out)) }

::std::unicode::Char::sub_char::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::unicode::Char::eq::ne { fn(ref(dup2387(w0 @ne(w10 out)) w0) fn(ref(dup2388(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2438(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

