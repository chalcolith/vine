
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_20::main }

::day_20::main {
  fn(ref(w1 w38) _)
  ::day_20::main::1 = x(x(w1 w53) x(x(tup(0 tup(w45 w45)) w51) x(x(_ dup8(w12 w15)) x(_ w47))))
  ::std::data::Array::from_list::cast = fn(w51 w10)
  ::std::numeric::N32::neg::neg = fn(1 w17)
  ::std::numeric::N32::neg::neg = fn(1 w18)
  ::day_20::main::16 = x(w47 x(w10 x(x(tup(1 tup(tup(w12 w54) w54)) w58) x(w15 tup(w17 w18)))))
  ::std::data::List::len = fn(ref(w58 w22) w24)
  ::std::numeric::N32::sub::sub = fn(w24 fn(1 _))
  ::day_20::main::26 = x(w22 x(x(0 w65) x(x(0 w63) 0)))
  ::std::numeric::N32::to_string::to_string = fn(w65 tup(@n32_add(8 w67) tup(w68 w69)))
  ::std::IO::println = fn(ref(w53 w31) fn(tup(w67 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w68)))))))) w69)) _))
  ::std::numeric::N32::to_string::to_string = fn(w63 tup(@n32_add(8 w72) tup(w73 w74)))
  ::std::IO::println = fn(ref(w31 w38) fn(tup(w72 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w73)))))))) w74)) _))
}

::day_20::main::1 {
  x(x(w12 w20) w10)
  ::std::IO::read_line = fn(ref(w12 w1) enum(::day_20::main::4 enum(::day_20::main::5 x(x(w1 w20) w10))))
}

::day_20::main::4 {
  enum(w0 x(w9 x(x(w7 w33) x(x(w5 w31) x(w3 w29)))))
  ::day_20::main::6 = x(x(w7 w27) x(x(w5 w25) x(x(w3 w23) x(w0 x(tup(0 tup(w18 w18)) w20)))))
  ::std::data::Array::from_list::cast = fn(w20 w16)
  ::std::data::List::push_back = fn(ref(w27 w13) fn(w16 _))
  ::day_20::main::1 = x(w9 x(x(w13 w33) x(x(w25 w31) x(w23 w29))))
}

::day_20::main::5 { x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1)))) }

::day_20::main::6 {
  x(w15 x(w13 x(w11 x(w9 w8))))
  ::std::data::List::pop_front = fn(ref(w9 w2) enum(::day_20::main::9 enum(::day_20::main::10 x(w15 x(w13 x(w11 x(w2 w8)))))))
}

::day_20::main::9 {
  enum(w0 x(x(w10 w45) x(x(w8 w43) x(x(w6 w41) x(w4 x(w3 w38))))))
  ::std::unicode::Char::eq::eq = fn(ref(w0 w22) fn(ref(83 _) ?(::day_20::main::13 ::day_20::main::12 x(x(w10 w36) x(x(w8 w34) x(x(w6 w32) x(x(w3 w30) x(x(w22 w28) _))))))))
  ::std::unicode::Char::eq::ne = fn(ref(w28 _) fn(ref(35 _) w19))
  ::std::data::List::push_back = fn(ref(w30 w13) fn(w19 _))
  ::day_20::main::6 = x(x(w36 w45) x(x(w34 w43) x(x(w32 w41) x(w4 x(w13 w38)))))
}

::day_20::main::10 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1))))) }

::day_20::main::12 {
  x(x(w20 w5) x(x(_ tup(w3 w7)) x(x(w16 w16) x(x(w14 w1) x(x(w12 w12) _)))))
  ::std::data::List::len = fn(ref(w14 w1) w3)
  ::std::data::List::len = fn(ref(w20 w5) w7)
}

::day_20::main::13 {
  x(w15 x(x(w13 w13) x(w11 x(w9 x(x(w7 w1) w16)))))
  ::std::unicode::Char::eq::eq = fn(ref(w7 w1) fn(ref(69 _) ?(::day_20::main::15 ::day_20::main::14 x(w15 x(w11 x(w9 w16))))))
}

::day_20::main::14 {
  x(x(w16 w5) x(x(_ tup(w3 w7)) x(x(w12 w1) _)))
  ::std::data::List::len = fn(ref(w12 w1) w3)
  ::std::data::List::len = fn(ref(w16 w5) w7)
}

::day_20::main::15 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_20::main::16 {
  x(dup116(w1 w14) x(w7 x(w6 x(dup120(w0 w10) w3))))
  ::day_20::eq = fn(w0 fn(w1 ?(::day_20::main::18 ::day_20::main::17 x(w14 x(w7 x(w6 x(w10 w3)))))))
}

::day_20::main::17 { x(_ x(_ x(x(w3 w3) _))) }

::day_20::main::18 {
  x(w37 x(w36 x(x(w35 w65) x(dup132(w2 dup132(w7 dup132(w13 dup132(w18 w28)))) dup134(w41 dup134(w47 dup134(w53 w59)))))))
  ::day_20::main::19 = x(x(w36 w43) x(w41 x(x(_ w40) fn(w4 _))))
  ::std::ops::vectorized::add::add::1 = fn(w2 fn(tup(1 0) w4))
  ::day_20::main::19 = x(x(w43 w49) x(w47 x(x(w40 w46) fn(w10 _))))
  ::std::numeric::N32::neg::neg = fn(1 w8)
  ::std::ops::vectorized::add::add::1 = fn(w7 fn(tup(w8 0) w10))
  ::day_20::main::19 = x(x(w49 w55) x(w53 x(x(w46 w52) fn(w15 _))))
  ::std::ops::vectorized::add::add::1 = fn(w13 fn(tup(0 1) w15))
  ::day_20::main::19 = x(x(w55 w61) x(w59 x(x(w52 dup136(w26 w30)) fn(w21 _))))
  ::std::numeric::N32::neg::neg = fn(1 w19)
  ::std::ops::vectorized::add::add::1 = fn(w18 fn(tup(0 w19) w21))
  ::std::data::List::push_back = fn(ref(w35 w24) fn(w26 _))
  ::day_20::main::16 = x(w37 x(w61 x(x(w24 w65) x(w30 w28))))
}

::day_20::main::19 {
  x(w9 x(w7 x(w6 fn(dup150(w11 w14) w13))))
  ::day_20::eq = fn(w7 fn(w11 ?(::day_20::main::22 ::day_20::main::21 x(w9 x(w6 x(w14 w13))))))
}

::day_20::main::21 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_20::main::22 {
  x(x(w28 w1) x(w26 x(tup(w5 dup156(w8 w6)) w29)))
  ::std::data::Array::get = fn(ref(w28 w1) fn(w8 w10))
  ::std::data::Array::get = fn(w10 fn(w18 ref(dup158(?(::day_20::main::24 ::day_20::main::23 x(w26 x(tup(w15 w16) w29))) w21) w21)))
  tup(w5 w6) = tup(dup157(w18 w15) w16)
}

::day_20::main::23 { x(x(_ w3) x(w3 _)) }

::day_20::main::24 { x(x(w3 w3) _) }

::day_20::main::26 {
  x(w10 w9)
  ::std::data::List::pop_front = fn(ref(w10 w1) enum(::day_20::main::29 enum(::day_20::main::30 x(w1 w9))))
}

::day_20::main::29 {
  enum(w0 x(dup179(w11 w29) x(x(w6 w28) x(x(w4 w26) dup186(w8 dup186(w19 w14))))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::std::data::List::into_iter = fn(w11 w12)
  ::day_20::main::31 = x(x(w6 w23) x(x(w4 w21) x(w19 x(w0 x(w9 w12)))))
  ::std::numeric::N32::add::add = fn(w14 fn(1 w15))
  ::day_20::main::26 = x(w29 x(x(w23 w28) x(x(w21 w26) w15)))
}

::day_20::main::30 { x(_ x(x(w4 w4) x(x(w2 w2) _))) }

::day_20::main::31 {
  x(w12 x(w10 x(w8 x(w7 x(w6 w5)))))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_20::main::34 enum(::day_20::main::35 x(w12 x(w10 x(w8 x(w7 x(w6 w1))))))))
}

::day_20::main::34 {
  enum(w0 x(x(w9 w41) x(x(w7 w39) x(dup210(w15 w37) x(dup211(w10 w36) x(dup212(w14 w21) w2))))))
  ::day_20::dist = fn(w10 fn(w0 dup216(w17 w29)))
  ::std::numeric::N32::sub::sub = fn(w14 fn(w15 w16))
  ::std::numeric::N32::sub::sub = fn(w16 fn(w17 w18))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w18 _) fn(ref(50 _) ?(::day_20::main::38 ::day_20::main::37 x(x(w9 w33) x(x(w7 w31) x(w29 _))))))
  ::std::numeric::N32::add::add = fn(w21 fn(1 w22))
  ::day_20::main::31 = x(x(w33 w41) x(x(w31 w39) x(w37 x(w36 x(w22 w2)))))
}

::day_20::main::35 { x(x(w7 w7) x(x(w5 w5) _)) }

::day_20::main::37 {
  x(w7 x(w5 x(w3 w21)))
  ::std::numeric::N32::eq::eq = fn(ref(w3 w9) fn(ref(2 _) ?(::day_20::main::41 ::day_20::main::40 x(w7 _))))
  ::std::numeric::N32::ord::le = fn(ref(w9 _) fn(ref(20 _) ?(::day_20::main::44 ::day_20::main::43 x(w5 w21))))
}

::day_20::main::38 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_20::main::40 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_20::main::41 { x(x(w2 w2) _) }

::day_20::main::43 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_20::main::44 { x(x(w2 w2) _) }

::std::unicode::Char::eq::eq { fn(ref(dup241(w0 @n32_eq(w10 out)) w0) fn(ref(dup242(w3 w10) w3) out)) }

::std::unicode::Char::eq::ne { fn(ref(dup245(w0 @n32_ne(w10 out)) w0) fn(ref(dup246(w3 w10) w3) out)) }

::std::data::Array::from_list::cast {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::numeric::N32::neg::neg { fn(@n32_sub$(0 out) out) }

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::N32::add::add = fn(w1 fn(w4 w13))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup282(w0 @n32_le(w10 out)) w0) fn(ref(dup283(w3 w10) w3) out)) }

::std::numeric::N32::eq::eq { fn(ref(dup286(w0 @n32_eq(w10 out)) w0) fn(ref(dup287(w3 w10) w3) out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup304(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup310(w0 @n32_ne(w10 out)) w0) fn(ref(dup311(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::day_20::eq {
  fn(tup(w0 w1) fn(tup(w3 w4) w17))
  ::std::numeric::N32::eq::eq = fn(ref(w0 _) fn(ref(w3 _) ?(::day_20::eq::3 ::day_20::eq::2 x(w1 x(w4 w17)))))
}

::day_20::eq::2 {
  x(w9 x(w8 w10))
  ::std::numeric::N32::eq::eq = fn(ref(w9 _) fn(ref(w8 _) ?(0 1 w10)))
}

::day_20::eq::3 { x(_ x(_ 0)) }

::day_20::dist {
  fn(tup(w0 w1) fn(tup(w3 w4) w14))
  ::std::numeric::N32::diff = fn(w0 fn(w3 w10))
  ::std::numeric::N32::diff = fn(w1 fn(w4 w13))
  ::std::numeric::N32::add::add = fn(w10 fn(w13 w14))
}

::std::data::List::len { fn(ref(tup(dup356(w11 w7) w8) tup(w7 w8)) w11) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup385(w0 @n32_lt(w10 out)) w0) fn(ref(dup386(w3 w10) w3) out)) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::from_fn {
  fn(w0 fn(ref(dup702(w1 w16) w1) fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w10 x(w16 x(w4 w14))))))
}

::std::data::Array::from_fn::2 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::from_fn::3 {
  x(dup708(w1 dup708(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::data::Array::get {
  fn(ref(tup(dup781(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup796(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_front {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup843(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_front::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w7)
}

::std::data::Array::push_front::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(w7 w1))))
}

::std::data::Array::push_front::5 {
  x(x(ref(tup(w2 w4) tup(w15 w12)) w26) w21)
  tup(w4 w2) = tup(w11 w12)
  ::std::numeric::N32::div::div = fn(w21 fn(2 w19))
  ::std::data::Array::push_front::4 = x(x(ref(w11 w15) w26) w19)
}

::std::data::Array::push_front::6 { x(x(w2 w2) _) }

::std::data::Array::pop_back {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_back::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_back::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup895(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 {
  x(ref(w6 w28) x(dup901(w0 w11) w26))
  ::std::numeric::N32::sub::sub = fn(w0 fn(1 w1))
  ::std::numeric::N32::rem::rem = fn(w1 fn(2 dup904(w12 w29)))
  ::std::data::Array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 tup(w14 w15))))
  ::std::numeric::N32::eq::eq = fn(ref(w15 w22) fn(ref(1 _) ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(w14 x(w22 x(w29 x(x(w9 w28) w26)))))))
}

::std::data::Array::pop_back::8 {
  x(ref(w1 _) x(_ x(w16 x(x(tup(w6 w7) w24) enum(enum(w3 w27) enum(_ w27))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(w6 x(w7 w24)))))
}

::std::data::Array::pop_back::9 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::data::Array::pop_back::6 = x(w5 x(w4 w24))
}

::std::data::Array::pop_back::11 { x(_ x(w2 w2)) }

::std::data::Array::pop_back::12 { x(w3 x(_ w3)) }

::std::data::Array::pop_back::13 { x(w11 w11) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::data::Array::Node::unzip_with {
  fn(w0 fn(w1 fn(w2 w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w8) fn(ref(1 _) ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(w8 x(w1 x(w2 w12))))))
}

::std::data::Array::Node::unzip_with::2 {
  x(_ x(w14 x(fn(w2 tup(w4 w5)) tup(w8 w10))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w14 w2)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w4 w8)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w10)
}

::std::data::Array::Node::unzip_with::3 {
  x(dup1092(w4 w13) x(tup(w1 w2) x(dup1094(w8 w16) tup(tup(w10 w18) tup(w11 w19)))))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w5))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::unzip_with = fn(w6 fn(w1 fn(w8 tup(w10 w11))))
  ::std::numeric::N32::div::div = fn(w13 fn(2 w14))
  ::std::data::Array::Node::unzip_with = fn(w14 fn(w2 fn(w16 tup(w18 w19))))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N32::diff {
  fn(w0 fn(w1 w13))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::diff::3 ::std::numeric::N32::diff::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::diff::2 {
  x(w5 x(w4 w2))
  ::std::numeric::N32::sub::sub = fn(w5 fn(w4 w2))
}

::std::numeric::N32::diff::3 {
  x(w5 x(w4 w2))
  ::std::numeric::N32::sub::sub = fn(w4 fn(w5 w2))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

