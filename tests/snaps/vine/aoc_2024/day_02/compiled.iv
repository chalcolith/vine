
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_02::main }

::day_02::main {
  fn(ref(w1 w27) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w36) w36)) w12))
  ::std::data::List::into_iter = fn(w12 w17)
  ::day_02::main::1 = x(x(0 w41) x(x(0 w39) w17))
  ::std::numeric::N32::to_string::to_string = fn(w41 tup(@add(12 w42) tup(w43 w44)))
  ::std::IO::println = fn(ref(w6 w20) fn(tup(w42 tup(tup(83 tup(97 tup(102 tup(101 tup(32 tup(67 tup(111 tup(117 tup(110 tup(116 tup(58 tup(32 w43)))))))))))) w44)) _))
  ::std::numeric::N32::to_string::to_string = fn(w39 tup(@add(21 w47) tup(w48 w49)))
  ::std::IO::println = fn(ref(w20 w27) fn(tup(w47 tup(tup(68 tup(97 tup(109 tup(112 tup(101 tup(110 tup(101 tup(100 tup(32 tup(83 tup(97 tup(102 tup(101 tup(32 tup(67 tup(111 tup(117 tup(110 tup(116 tup(58 tup(32 w48))))))))))))))))))))) w49)) _))
}

::day_02::main::1 {
  x(w9 x(w7 w5))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_02::main::4 enum(::day_02::main::5 x(w9 x(w7 w1)))))
}

::day_02::main::4 {
  enum(w0 x(x(w6 w35) x(x(w4 w33) w2)))
  ::std::unicode::String::split = fn(w0 fn(tup(1 tup(tup(32 w16) w16)) w9))
  ::std::numeric::N32::parse = fn(w17 w21)
  ::std::logical::Option::unwrap = fn(w21 w22)
  ::std::data::List::map = fn(w9 fn(fn(w17 w22) dup30(w23 w26)))
  ::day_02::is_safe = fn(w23 ?(::day_02::main::9 ::day_02::main::8 x(x(w6 w30) x(x(w4 w28) x(w26 _)))))
  ::day_02::main::1 = x(x(w30 w35) x(x(w28 w33) w2))
}

::day_02::main::5 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_02::main::8 {
  x(x(w9 w1) x(x(w7 w3) _))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w1))
  ::std::numeric::N32::add::add = fn(w7 fn(1 w3))
}

::day_02::main::9 {
  x(x(w7 w7) x(w5 x(w3 w8)))
  ::day_02::problem_dampener = fn(w3 ?(::day_02::main::11 ::day_02::main::10 x(w5 w8)))
}

::day_02::main::10 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_02::main::11 { x(x(w2 w2) _) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup69(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup75(w0 @ne(w10 out)) w0) fn(ref(dup76(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::day_02::is_safe {
  fn(w0 w9)
  ::std::data::List::into_iter = fn(w0 w6)
  ::day_02::is_safe::1 = x(::std::logical::Option::None x(::std::logical::Option::None x(w6 w9)))
}

::day_02::is_safe::1 {
  x(w8 x(w7 x(w6 w9)))
  ::std::data::List::IntoIter::next = fn(ref(w6 w1) enum(::day_02::is_safe::4 enum(::day_02::is_safe::5 x(w8 x(w7 x(w1 w9))))))
}

::day_02::is_safe::4 { enum(w0 x(enum(::day_02::is_safe::9 enum(::day_02::is_safe::10 x(w4 x(w3 x(w0 w12))))) x(w4 x(w3 w12)))) }

::day_02::is_safe::5 { x(_ x(_ x(_ 1))) }

::day_02::is_safe::9 {
  enum(w0 x(w5 x(w4 x(w3 w39))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w0 dup126(w27 w40)) fn(ref(w3 dup124(w28 w41)) ?(::day_02::is_safe::13 ::day_02::is_safe::12 x(w28 x(w27 w26)))))
  ::std::numeric::N32::ord::le = fn(ref(1 _) fn(ref(w26 w32) @n32_and(w37 ?(::day_02::is_safe::16 ::day_02::is_safe::15 x(w5 x(w4 x(w41 x(w40 w39))))))))
  ::std::numeric::N32::ord::le = fn(ref(w32 _) fn(ref(3 _) w37))
}

::day_02::is_safe::10 {
  x(w3 x(w2 x(w1 w5)))
  ::day_02::is_safe::26 = x(w3 x(w2 x(w1 x(w5 _))))
}

::day_02::is_safe::12 {
  x(w5 x(w4 w2))
  ::std::numeric::N32::sub::sub = fn(w4 fn(w5 w2))
}

::day_02::is_safe::13 {
  x(w5 x(w4 w2))
  ::std::numeric::N32::sub::sub = fn(w5 fn(w4 w2))
}

::day_02::is_safe::15 { x(enum(::day_02::is_safe::20 enum(::day_02::is_safe::24 w3)) w3) }

::day_02::is_safe::16 { x(_ x(_ x(_ x(_ 0)))) }

::day_02::is_safe::20 {
  enum(w0 x(w5 x(w4 x(w3 w18))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w3 w10) fn(ref(w4 w13) w15))
  ::std::logical::Bool::eq::ne = fn(ref(w0 _) fn(ref(w15 _) ?(::day_02::is_safe::24 ::day_02::is_safe::22 x(w5 x(w13 x(w10 w18))))))
}

::day_02::is_safe::22 { x(_ x(_ x(_ 0))) }

::day_02::is_safe::24 {
  x(w3 x(w2 x(w1 w19)))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w1 _) fn(ref(w2 w12) w14))
  ::day_02::is_safe::26 = x(enum(enum(w14 w17) enum(_ w17)) x(w3 x(w12 x(w19 _))))
}

::day_02::is_safe::26 {
  x(w8 x(w7 x(w6 x(w10 _))))
  ::day_02::is_safe::1 = x(enum(enum(w6 w9) enum(_ w9)) x(w8 x(w7 w10)))
}

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup184(w0 @lt(w10 out)) w0) fn(ref(dup185(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::le { fn(ref(dup192(w0 @le(w10 out)) w0) fn(ref(dup193(w3 w10) w3) out)) }

::std::logical::Bool::eq::ne { fn(ref(dup196(w0 @ne(w10 out)) w0) fn(ref(dup197(w3 w10) w3) out)) }

::day_02::problem_dampener {
  fn(w0 w9)
  ::day_02::problem_dampener::1 = x(tup(0 tup(w8 w8)) x(w0 w9))
}

::day_02::problem_dampener::1 {
  x(w7 x(w6 w8))
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_02::problem_dampener::4 enum(::day_02::problem_dampener::5 x(w7 x(w1 w8)))))
}

::day_02::problem_dampener::4 {
  enum(w0 x(dup210(w10 w17) x(dup211(w11 w16) w14)))
  ::std::data::List::concat::concat = fn(w10 fn(w11 w12))
  ::day_02::is_safe = fn(w12 ?(::day_02::problem_dampener::8 ::day_02::problem_dampener::7 x(w17 x(w16 x(w0 w14)))))
}

::day_02::problem_dampener::5 { x(_ x(_ 0)) }

::day_02::problem_dampener::7 { x(_ x(_ x(_ 1))) }

::day_02::problem_dampener::8 {
  x(w3 x(w2 x(w1 w10)))
  ::std::data::List::concat::concat = fn(w3 fn(tup(1 tup(tup(w1 w9) w9)) w8))
  ::day_02::problem_dampener::1 = x(w8 x(w2 w10))
}

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::data::List::map {
  fn(tup(dup296(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup316(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::iter { fn(ref(tup(dup470(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::numeric::N32::eq::eq { fn(ref(dup595(w0 @eq(w10 out)) w0) fn(ref(dup596(w3 w10) w3) out)) }

::std::numeric::N32::mul::mul { fn(@mul(w1 out) fn(w1 out)) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse {
  fn(w0 w15)
  ::std::unicode::String::to_chars::cast = fn(w0 tup(w5 tup(w6 _)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w11) fn(ref(0 _) ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w11 x(w6 w15)))))
}

::std::numeric::N32::parse::2 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::4 {
  x(w8 w7)
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w1 w7))))
}

::std::numeric::N32::parse::5 {
  x(w18 x(tup(w1 w2) x(w16 w29)))
  ::std::unicode::Char::ord::le = fn(ref(48 _) fn(ref(w1 w22) @n32_and(w27 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w21 w29))))))))
  ::std::unicode::Char::ord::le = fn(ref(w22 w21) fn(ref(57 _) w27))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  ::std::numeric::N32::mul::mul = fn(w2 fn(10 w13))
  ::std::unicode::Char::sub_char::sub = fn(w1 fn(48 w15))
  ::std::numeric::N32::add::add = fn(w13 fn(w15 w17))
  ::std::numeric::N32::sub::sub = fn(w4 fn(1 w19))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w9 w9) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::ord::le { fn(ref(dup1630(w0 @le(w10 out)) w0) fn(ref(dup1631(w3 w10) w3) out)) }

::std::unicode::Char::sub_char::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::eq::ne { fn(ref(dup2304(w0 @ne(w10 out)) w0) fn(ref(dup2305(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2355(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split {
  fn(w0 fn(w1 w9))
  ::std::unicode::String::split::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w9)))
}

::std::unicode::String::split::1 {
  x(w14 x(dup2364(w1 w20) x(w12 w18)))
  ::std::unicode::String::split_once = fn(w14 fn(w1 tup(w3 enum(::std::unicode::String::split::5 enum(::std::unicode::String::split::6 x(w20 x(w9 w18)))))))
  ::std::data::List::concat::concat = fn(w12 fn(tup(1 tup(tup(w3 w15) w15)) w9))
}

::std::unicode::String::split::5 {
  enum(w0 w4)
  ::std::unicode::String::split::1 = x(w0 w4)
}

::std::unicode::String::split::6 { x(_ x(w1 w1)) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 {
  x(w26 x(dup2388(w1 w46) x(w24 x(w23 x(x(w22 w43) w41)))))
  ::std::unicode::String::split_once = fn(w26 fn(w1 tup(w3 enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(w46 x(w35 x(w44 x(x(w38 w43) w41)))))))))
  ::std::unicode::String::len = fn(ref(w3 w7) w9)
  ::std::numeric::N32::eq::eq = fn(ref(w9 _) fn(ref(0 _) dup2399(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(w23 dup2392(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(w24 w35) x(w33 x(w7 _)))) w44))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(w38 dup2394(w22 w33))))))
}

::std::unicode::String::split_trim::3 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(w4 w4) _) }

::std::unicode::String::split_trim::10 { x(w5 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(w5 w2)) w2)) }

::std::unicode::String::split_trim::11 { x(x(w3 w3) _) }

::std::unicode::String::split_trim::12 {
  x(x(w7 w3) x(w5 _))
  ::std::data::List::concat::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::unicode::String::split_trim::15 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 {
  enum(w0 w7)
  ::std::unicode::String::split_trim::1 = x(w0 w7)
}

::std::unicode::String::split_trim::24 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w19) x(w7 w15))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w11) fn(ref(0 _) ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w19) x(w7 x(w11 w15))))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 { x(x(w7 w7) x(w5 x(_ w5))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

