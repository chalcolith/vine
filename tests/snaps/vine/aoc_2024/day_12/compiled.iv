
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_12::main }

::day_12::main {
  fn(ref(w1 w41) _)
  ::day_12::main::1 = x(x(w1 w58) x(x(::std::data::Array::empty w56) x(x(tup(0 tup(w48 w48)) w54) x(tup(0 tup(w49 w49)) x(0 dup12(w33 w75))))))
  ref(w56 w15) = ref(w18 w30)
  ::day_12::main::25 = x(x(0 w63) x(0 x(w18 w60)))
  ::std::numeric::N32::to_string::to_string = fn(w63 tup(@n32_add(8 w64) tup(w65 w66)))
  ::std::IO::println = fn(ref(w58 w23) fn(tup(w64 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w65)))))))) w66)) _))
  ::std::data::Array::len = fn(ref(w60 w30) w32)
  ::std::numeric::N32::div::div = fn(w32 fn(w33 w34))
  ::day_12::main::33 = x(w15 x(w54 x(w75 x(w34 x(x(0 w73) x(0 tup(0 tup(w69 w69))))))))
  ::std::numeric::N32::to_string::to_string = fn(w73 tup(@n32_add(8 w78) tup(w79 w80)))
  ::std::IO::println = fn(ref(w23 w41) fn(tup(w78 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w79)))))))) w80)) _))
}

::day_12::main::1 {
  x(x(w13 w22) w11)
  ::std::IO::read_line = fn(ref(w13 w1) enum(::day_12::main::4 enum(::day_12::main::5 x(x(w1 w22) w11))))
}

::day_12::main::4 {
  enum(dup50(w13 w28) x(w10 x(x(w8 w38) x(x(w6 w36) x(w4 x(w3 w33))))))
  ::std::numeric::N32::add::add = fn(w3 fn(1 w12))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w13 w23) w23)) w16))
  ::day_12::main::6 = x(x(w8 w31) x(w4 x(w28 x(x(tup(0 tup(w24 w24)) w27) tup(35 0)))))
  ::day_12::main::1 = x(w10 x(x(w31 w38) x(x(w16 w36) x(w27 x(w12 w33)))))
}

::day_12::main::5 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1))))) }

::day_12::main::6 {
  x(w13 x(w11 x(w10 w9)))
  ::std::data::List::pop_front = fn(ref(w10 w2) enum(::day_12::main::9 enum(::day_12::main::10 x(w13 x(w11 x(w2 w9))))))
}

::day_12::main::9 {
  enum(w0 x(x(w8 w64) x(w6 x(w5 x(x(w4 w60) tup(w28 w29))))))
  ::day_12::Regions::new = fn(ref(w8 w10) w12)
  ::std::unicode::Char::eq::eq = fn(ref(w28 _) fn(ref(w0 w36) ?(::day_12::main::15 ::day_12::main::14 x(x(w10 w44) x(x(w12 w42) x(w29 _))))))
  ::std::data::List::pop_front = fn(ref(w6 w46) enum(::day_12::main::20 enum(::day_12::main::21 x(x(w44 w56) x(x(w36 dup81(w16 w20)) x(x(w42 dup84(w17 w21)) _))))))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(tup(w20 w21) w57) w57)) w25))
  ::day_12::main::6 = x(x(w56 w64) x(w46 x(w5 x(x(w25 w60) tup(w16 w17)))))
}

::day_12::main::10 { x(x(w6 w6) x(_ x(_ x(x(w2 w2) _)))) }

::day_12::main::14 {
  x(x(w18 w7) x(x(w16 w11) x(w14 _)))
  ::day_12::Regions::find = fn(ref(w18 w1) fn(w14 w4))
  ::day_12::Regions::union_found = fn(ref(w1 w7) fn(w16 fn(w4 w11)))
}

::day_12::main::15 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_12::main::20 {
  enum(tup(w2 w3) x(w12 x(x(w10 w17) x(w8 w20))))
  ::std::unicode::Char::eq::eq = fn(ref(w2 _) fn(ref(w10 w17) ?(::day_12::main::23 ::day_12::main::22 x(w12 x(w8 x(w3 w20))))))
}

::day_12::main::21 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_12::main::22 {
  x(x(w18 w7) x(x(w16 w11) x(w14 _)))
  ::day_12::Regions::find = fn(ref(w18 w1) fn(w14 w4))
  ::day_12::Regions::union_found = fn(ref(w1 w7) fn(w16 fn(w4 w11)))
}

::day_12::main::23 { x(x(w5 w5) x(x(w3 w3) _)) }

::day_12::main::25 {
  x(w13 x(w11 x(w10 w15)))
  ::std::data::Array::len = fn(ref(w10 w4) w6)
  ::std::numeric::N32::ord::lt = fn(ref(w11 w1) fn(ref(w6 _) ?(::day_12::main::27 ::day_12::main::26 x(w13 x(w1 x(w4 w15))))))
}

::day_12::main::26 {
  x(x(w7 w24) x(dup144(w11 w1) x(w4 w21)))
  ::std::data::Array::get = fn(ref(w4 w9) fn(w11 ref(dup140(enum(::day_12::main::31 enum(::day_12::main::32 x(x(w7 w19) _))) w14) w14)))
  ::std::numeric::N32::add::add = fn(w1 fn(1 w2))
  ::day_12::main::25 = x(x(w19 w24) x(w2 x(w9 w21)))
}

::day_12::main::27 { x(x(w4 w4) x(_ x(w1 w1))) }

::day_12::main::31 {
  enum(dup155(w7 w8) enum(w1 x(x(w6 w15) _)))
  ::std::numeric::N32::mul::mul = fn(w8 fn(4 w9))
  ::std::numeric::N32::mul::mul = fn(w1 fn(2 w11))
  ::std::numeric::N32::sub::sub = fn(w9 fn(w11 w12))
  ::std::numeric::N32::mul::mul = fn(w7 fn(w12 w13))
  ::std::numeric::N32::add::add = fn(w6 fn(w13 w15))
}

::day_12::main::32 { enum(_ x(x(w3 w3) _)) }

::day_12::main::33 {
  x(w14 x(w13 x(w12 x(w11 x(w10 x(w8 w7))))))
  ::std::numeric::N32::ord::le = fn(ref(w8 w1) fn(ref(w12 w4) ?(::day_12::main::35 ::day_12::main::34 x(w14 x(w13 x(w4 x(w11 x(w10 x(w1 w7)))))))))
}

::day_12::main::34 {
  x(w24 x(w23 x(w22 x(w21 x(x(w20 w43) x(dup182(w33 w15) w17))))))
  ::std::data::List::pop_front = fn(ref(w23 w1) w3)
  ::std::logical::Option::unwrap_or = fn(w3 fn(tup(0 tup(w27 w27)) w5))
  ::std::unicode::String::to_chars::cast = fn(w5 dup186(w8 w13))
  ::day_12::main::36 = x(x(w24 w39) x(x(w21 w37) x(x(w20 w35) x(w33 x(w17 x(w8 x(0 35)))))))
  ::std::numeric::N32::add::add = fn(w15 fn(1 w16))
  ::day_12::main::33 = x(w39 x(w1 x(w22 x(w37 x(x(w35 w43) x(w16 w13))))))
}

::day_12::main::35 { x(_ x(_ x(_ x(_ x(x(w3 w3) _))))) }

::day_12::main::36 {
  x(w18 x(x(w16 w28) x(w14 x(w12 x(w11 x(w10 x(w9 w8)))))))
  ::std::numeric::N32::ord::le = fn(ref(w9 w1) fn(ref(w16 w4) ?(::day_12::main::38 ::day_12::main::37 x(w18 x(x(w4 w28) x(w14 x(w12 x(w11 x(w10 x(w1 w8))))))))))
}

::day_12::main::37 {
  x(x(w65 w101) x(x(dup213(w69 dup213(w75 dup213(w81 dup213(w87 w98)))) w99) x(x(w61 w97) x(dup220(w15 dup220(w24 dup220(w33 dup220(w42 w95)))) x(w58 x(w57 x(dup225(w13 dup225(w23 dup225(w32 dup225(w40 w52)))) x(dup227(w17 dup227(w29 dup227(w36 w44))) dup229(w20 dup229(w28 dup229(w35 w43)))))))))))
  ::std::data::List::pop_front = fn(ref(w58 w1) w3)
  ::std::logical::Option::unwrap_or = fn(w3 fn(35 dup231(w18 dup231(w26 dup231(w37 dup231(w45 w48))))))
  ::std::data::List::pop_front = fn(ref(w57 w7) w9)
  ::std::logical::Option::unwrap_or = fn(w9 fn(35 dup232(w19 dup232(w27 dup232(w34 dup232(w46 w50))))))
  ::day_12::main::39 = x(x(w65 w71) x(w69 x(x(w61 w68) fn(w14 fn(w16 fn(w17 fn(w18 fn(w19 fn(w20 _)))))))))
  ::std::numeric::N32::sub::sub = fn(w13 fn(1 w14))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w16))
  ::day_12::main::39 = x(x(w71 w77) x(w75 x(x(w68 w74) fn(w23 fn(w25 fn(w26 fn(w27 fn(w28 fn(w29 _)))))))))
  ::std::numeric::N32::sub::sub = fn(w24 fn(1 w25))
  ::day_12::main::39 = x(x(w77 w83) x(w81 x(x(w74 w80) fn(w32 fn(w33 fn(w34 fn(w35 fn(w36 fn(w37 _)))))))))
  ::day_12::main::39 = x(x(w83 w89) x(w87 x(x(w80 w86) fn(w41 fn(w42 fn(w43 fn(w44 fn(w45 fn(w46 _)))))))))
  ::std::numeric::N32::sub::sub = fn(w40 fn(1 w41))
  ::std::numeric::N32::add::add = fn(w52 fn(1 w53))
  ::day_12::main::36 = x(x(w89 w101) x(x(w98 w99) x(x(w86 w97) x(w95 x(w1 x(w7 x(w53 x(w48 w50))))))))
}

::day_12::main::38 { x(x(w11 w11) x(x(w9 w9) x(x(w7 w7) _))) }

::day_12::main::39 {
  x(w14 x(w12 x(w11 fn(w0 fn(w1 fn(w2 fn(w3 fn(w4 fn(w5 w20)))))))))
  ::std::unicode::Char::eq::ne = fn(ref(w2 w16) fn(ref(35 _) ?(::day_12::main::42 ::day_12::main::41 x(w14 x(w12 x(w11 x(w0 x(w1 x(w16 x(w3 x(w4 x(w5 w20))))))))))))
}

::day_12::main::41 {
  x(w25 x(w23 x(w22 x(w20 x(w19 x(w18 x(w17 x(w16 x(w15 w26)))))))))
  ::std::unicode::Char::eq::ne = fn(ref(w17 w1) fn(ref(w18 w5) @n32_and(w12 ?(::day_12::main::44 ::day_12::main::43 x(w25 x(w23 x(w22 x(w20 x(w19 x(w4 x(w1 x(w16 x(w10 w26)))))))))))))
  ::std::unicode::Char::eq::ne = fn(ref(w5 w4) fn(ref(w15 w10) w12))
}

::day_12::main::42 { x(x(w11 w11) x(_ x(x(w8 w8) _))) }

::day_12::main::43 {
  x(w11 x(w9 x(w8 x(w6 x(w5 x(_ x(_ x(_ x(_ w12)))))))))
  ::day_12::main::47 = x(w11 x(w9 x(w8 x(w6 x(w5 w12)))))
}

::day_12::main::44 {
  x(w32 x(w30 x(w29 x(w27 x(w26 x(w25 x(w24 x(w23 x(w22 w33)))))))))
  ::std::unicode::Char::eq::eq = fn(ref(w25 _) fn(ref(w24 w5) @n32_and(w14 @n32_and(w19 ?(::day_12::main::46 ::day_12::main::47 x(w32 x(w30 x(w29 x(w27 x(w26 w33))))))))))
  ::std::unicode::Char::eq::eq = fn(ref(w5 _) fn(ref(w22 w11) w14))
  ::std::unicode::Char::eq::ne = fn(ref(w11 _) fn(ref(w23 _) w19))
}

::day_12::main::46 { x(x(w7 w7) x(_ x(x(w4 w4) _))) }

::day_12::main::47 {
  x(x(w22 w7) x(w20 x(x(w19 w14) x(w17 x(w16 _)))))
  ::std::numeric::N32::mul::mul = fn(w16 fn(w20 w3))
  ::std::numeric::N32::add::add = fn(w17 fn(w3 w4))
  ::day_12::Regions::get_area = fn(ref(w22 w7) fn(w4 w10))
  ::std::numeric::N32::add::add = fn(w19 fn(w10 w14))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::eq::eq { fn(ref(dup326(w0 @n32_eq(w10 out)) w0) fn(ref(dup327(w3 w10) w3) out)) }

::std::numeric::N32::ord::lt { fn(ref(dup330(w0 @n32_lt(w10 out)) w0) fn(ref(dup331(w3 w10) w3) out)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup356(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup362(w0 @n32_ne(w10 out)) w0) fn(ref(dup363(w3 w10) w3) out)) }

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::le { fn(ref(dup378(w0 @n32_le(w10 out)) w0) fn(ref(dup379(w3 w10) w3) out)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::eq::ne { fn(ref(dup385(w0 @n32_ne(w10 out)) w0) fn(ref(dup386(w3 w10) w3) out)) }

::day_12::Regions::new {
  fn(ref(w1 w13) w10)
  ::std::data::Array::len = fn(ref(w1 w8) w10)
  ::std::data::Array::push_back = fn(ref(w8 w13) fn(enum(enum(1 enum(0 w19)) enum(_ w19)) _))
}

::day_12::Regions::find {
  fn(ref(w1 w17) fn(w5 w11))
  ::day_12::Regions::find::1 = x(x(w1 w17) x(x(w5 dup429(w13 w11)) w13))
}

::day_12::Regions::find::1 {
  x(x(w13 w19) x(x(dup438(w3 w16) w17) w15))
  ::std::data::Array::get = fn(ref(w13 w1) fn(w3 ref(enum(::day_12::Regions::find::4 enum(::day_12::Regions::find::5 x(x(w1 w19) x(x(w16 w17) x(w15 w14))))) w14)))
}

::day_12::Regions::find::4 { enum(w1 enum(w3 x(x(w10 w10) x(x(w8 w8) x(_ enum(enum(w1 enum(w3 w11)) enum(_ w11))))))) }

::day_12::Regions::find::5 {
  enum(w1 x(w10 x(x(_ w18) x(dup452(w14 w16) enum(_ enum(enum(w14 w11) w11))))))
  ::day_12::Regions::find::1 = x(w10 x(x(w1 w18) w16))
}

::day_12::Regions::get_area {
  fn(ref(w1 w13) fn(w3 w31))
  ::day_12::Regions::find = fn(ref(w1 w7) fn(w3 w10))
  ::std::data::Array::get = fn(ref(w7 w13) fn(w10 ref(dup458(enum(::day_12::Regions::get_area::3 enum(_ w31)) w28) w28)))
}

::day_12::Regions::get_area::3 { enum(w0 enum(_ w0)) }

::day_12::Regions::union_found {
  fn(ref(w1 w22) fn(w5 fn(w6 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w12) fn(ref(w6 w15) ?(::day_12::Regions::union_found::3 ::day_12::Regions::union_found::2 x(x(w1 w22) x(w12 x(w15 w18))))))
}

::day_12::Regions::union_found::2 {
  x(x(w6 w8) x(dup485(w10 w1) x(_ w1)))
  ::std::data::Array::get = fn(ref(w6 w8) fn(w10 ref(enum(::day_12::Regions::union_found::6 enum(::day_12::Regions::union_found::7 x(_ w16))) w16)))
}

::day_12::Regions::union_found::3 {
  x(x(w21 w9) x(dup494(w3 w36) x(dup495(w11 w35) w30)))
  ::std::data::Array::get = fn(ref(w21 w1) fn(w3 ref(dup497(w22 w33) w34)))
  ::std::data::Array::get = fn(ref(w1 w9) fn(w11 ref(dup499(w23 w31) w32)))
  tup(w22 w23) = tup(w26 enum(::day_12::Regions::union_found::13 enum(::day_12::Regions::union_found::16 x(w36 x(w35 x(x(w33 w34) x(x(w31 w32) x(w30 w26))))))))
}

::day_12::Regions::union_found::6 {
  enum(w1 enum(w3 x(_ enum(enum(w1 enum(w12 w10)) enum(_ w10)))))
  ::std::numeric::N32::add::add = fn(w3 fn(1 w12))
}

::day_12::Regions::union_found::7 { enum(w1 x(_ enum(_ enum(enum(w1 w5) w5)))) }

::day_12::Regions::union_found::11 { x(_ x(dup515(w4 w7) x(enum(_ enum(enum(w4 w16) w16)) x(enum(enum(w10 enum(w9 w15)) enum(_ w15)) x(w10 x(w9 w7)))))) }

::day_12::Regions::union_found::12 { x(dup521(w4 w7) x(_ x(enum(enum(w10 enum(w9 w15)) enum(_ w15)) x(enum(_ enum(enum(w4 w16) w16)) x(w10 x(w9 w7)))))) }

::day_12::Regions::union_found::13 { enum(w0 enum(w1 x(w10 x(w9 x(w8 x(w6 x(w13 enum(::day_12::Regions::union_found::14 enum(::day_12::Regions::union_found::15 x(w10 x(w9 x(w8 x(w6 x(w13 x(w0 w1))))))))))))))) }

::day_12::Regions::union_found::14 {
  enum(dup541(w15 w25) enum(w1 x(w14 x(w13 x(x(_ w36) x(x(_ w35) x(w32 x(dup543(w16 w28) w6))))))))
  ::std::numeric::N32::add::add = fn(w15 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w1 fn(w6 w21))
  ::std::numeric::N32::add::add = fn(w21 fn(1 w22))
  ::std::numeric::N32::ord::lt = fn(ref(w25 _) fn(ref(w28 _) ?(::day_12::Regions::union_found::12 ::day_12::Regions::union_found::11 x(w14 x(w13 x(w36 x(w35 x(w17 x(w22 w32)))))))))
}

::day_12::Regions::union_found::15 { enum(_ x(_ x(_ x(x(w7 w7) x(x(w5 w5) _))))) }

::day_12::Regions::union_found::16 { enum(_ x(_ x(_ x(x(w6 w6) x(x(w4 w4) _))))) }

::std::numeric::N32::eq::eq { fn(ref(dup557(w0 @n32_eq(w10 out)) w0) fn(ref(dup558(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::len { fn(ref(tup(dup983(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup988(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup1003(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_back {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup1020(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_back::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_back::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w8)
}

::std::data::Array::push_back::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w7 w1))))
}

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup1045(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8))) fn(w1 w8)) }

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

