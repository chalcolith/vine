
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_21::main }

::day_21::main {
  fn(ref(w1 w34) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w43) w43)) dup5(w13 w30)))
  ::std::data::List::into_iter = fn(w13 w14)
  ::day_21::main::1 = x(x(0 w46) w14)
  ::std::numeric::N32::to_string::to_string = fn(w46 tup(@n32_add(8 w47) tup(w48 w49)))
  ::std::IO::println = fn(ref(w6 w17) fn(tup(w47 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w48)))))))) w49)) _))
  ::day_21::main::7 = x(x(::day_21::base_cost_func w54) 0)
  ::day_21::cost_func = fn(w54 fn(12 fn(0 w27)))
  ::std::data::List::into_iter = fn(w30 w31)
  ::day_21::main::10 = x(w27 x(x(0 w57) w31))
  ::std::numeric::N64::to_string::to_string = fn(w57 tup(@n32_add(8 w59) tup(w60 w61)))
  ::std::IO::println = fn(ref(w17 w34) fn(tup(w59 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w60)))))))) w61)) _))
}

::day_21::main::1 {
  x(w7 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_21::main::4 enum(::day_21::main::5 x(w7 w1))))
}

::day_21::main::4 {
  enum(dup27(w32 dup27(w34 dup27(w36 dup27(w38 w17)))) x(x(w4 w44) w2))
  ::day_21::main::6 = x(w32 fn(0 w6))
  ::day_21::main::6 = x(w34 fn(1 w8))
  ::std::numeric::N32::min = fn(w6 fn(w8 w9))
  ::day_21::main::6 = x(w36 fn(2 w11))
  ::std::numeric::N32::min = fn(w9 fn(w11 w12))
  ::day_21::main::6 = x(w38 fn(3 w14))
  ::std::numeric::N32::min = fn(w12 fn(w14 w15))
  ::std::unicode::String::split_once = fn(w17 fn(tup(1 tup(tup(65 w41) w41)) tup(w20 _)))
  ::std::numeric::N32::parse = fn(w20 w23)
  ::std::logical::Option::unwrap = fn(w23 w24)
  ::std::numeric::N32::mul::mul = fn(w24 fn(w15 w28))
  ::std::numeric::N32::add::add = fn(w4 fn(w28 w30))
  ::day_21::main::1 = x(x(w30 w44) w2)
}

::day_21::main::5 { x(x(w2 w2) _) }

::day_21::main::6 {
  x(w18 fn(w0 w16))
  ::day_21::control_string = fn(65 fn(w18 fn(w0 fn(::day_21::control_numeric w5))))
  ::day_21::control_string = fn(65 fn(w5 fn(0 fn(::day_21::control_directional w8))))
  ::day_21::control_string = fn(65 fn(w8 fn(0 fn(::day_21::control_directional w11))))
  ::std::unicode::String::len = fn(ref(w11 _) w16)
}

::day_21::main::7 {
  x(w7 w5)
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(25 _) ?(::day_21::main::9 ::day_21::main::8 x(w7 w1))))
}

::day_21::main::8 {
  x(x(w7 w10) w5)
  ::day_21::cost_func = fn(w7 fn(6 fn(1 w1)))
  ::std::numeric::N32::add::add = fn(w5 fn(1 w4))
  ::day_21::main::7 = x(x(w1 w10) w4)
}

::day_21::main::9 { x(x(w2 w2) _) }

::day_21::main::10 {
  x(w8 x(w7 w5))
  ::std::data::List::IntoIter::next = fn(ref(w5 w1) enum(::day_21::main::13 enum(::day_21::main::14 x(w8 x(w7 w1)))))
}

::day_21::main::13 {
  enum(dup66(w6 w28) x(w5 x(x(w4 w36) w2)))
  ::day_21::main::15 = x(x(w5 w30) x(w28 x(x(0 w27) 2)))
  ::std::unicode::String::split_once = fn(w6 fn(tup(1 tup(tup(65 w33) w33)) tup(w13 _)))
  ::std::numeric::N32::parse = fn(w13 w16)
  ::std::logical::Option::unwrap = fn(w16 w17)
  ::std::numeric::N64::from_n32::cast = fn(w17 w21)
  ::std::numeric::N64::mul::mul = fn(w27 fn(w21 w22))
  ::std::numeric::N64::add::add = fn(w4 fn(w22 w24))
  ::day_21::main::10 = x(w30 x(x(w24 w36) w2))
}

::day_21::main::14 { x(_ x(x(w2 w2) _)) }

::day_21::main::15 {
  x(w12 x(w10 w9))
  ::std::data::List::pop_front = fn(ref(w10 w2) enum(::day_21::main::18 enum(::day_21::main::19 x(w12 x(w2 w9)))))
}

::day_21::main::18 {
  enum(w0 x(x(w7 w45) x(w5 x(x(w4 w42) w2))))
  ::std::unicode::Char::eq::eq = fn(ref(w29 w34) fn(ref(48 _) ?(::day_21::main::23 ::day_21::main::22 x(w34 w38))))
  ::std::data::Array::get = fn(ref(w7 w13) fn(w2 w17))
  ::std::data::Array::get = fn(w17 fn(w20 ref(dup83(w24 w23) w23)))
  ::std::numeric::N64::add::add = fn(w4 fn(w24 w26))
  ::day_21::main::15 = x(x(w13 w45) x(w5 x(x(w26 w42) w27)))
  fn(w29 w38) = fn(w0 dup96(w20 w27))
}

::day_21::main::19 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::day_21::main::22 { x(_ 1) }

::day_21::main::23 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(65 _) ?(::day_21::main::25 ::day_21::main::24 x(w1 w7))))
}

::day_21::main::24 { x(_ 2) }

::day_21::main::25 {
  x(w4 w2)
  ::std::unicode::Char::sub_char::sub = fn(w4 fn(49 w1))
  ::std::numeric::N32::add::add = fn(w1 fn(3 w2))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup132(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup138(w0 @n32_ne(w10 out)) w0) fn(ref(dup139(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::numeric::N32::ord::lt { fn(ref(dup164(w0 @n32_lt(w10 out)) w0) fn(ref(dup165(w3 w10) w3) out)) }

::std::unicode::Char::eq::eq { fn(ref(dup168(w0 @n32_eq(w10 out)) w0) fn(ref(dup169(w3 w10) w3) out)) }

::std::unicode::Char::sub_char::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N64::add::add { fn(tup(dup(@n32_add(bl0 l) @n32_add_high(bl1 c)) @n32_add(bh @n32_add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul::mul { fn(tup(dup(@n32_mul(bl0 l) dup(@n32_mul_high(bl1 ll) @n32_mul(bh @n32_add(hl @n32_add(ll h))))) ah) fn(tup(dup(bl0 dup(bl1 @n32_mul(ah hl))) bh) tup(l h))) }

::std::numeric::N64::from_n32::cast { fn(w0 tup(w0 0)) }

::std::numeric::N64::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N64::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N64::to_string::to_string::2 {
  x(w4 w9)
  ::std::numeric::N64::to_string::to_string::4 = x(w4 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N64::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N64::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N64::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N64::to_string::to_string::5 {
  x(w16 x(w15 w19))
  ::std::numeric::N64::div_rem_n32 = fn(w16 fn(10 tup(w2 w3)))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w3 w6))
  ::std::unicode::String::from_chars::cast = fn(tup(1 tup(tup(w6 w17) w17)) w8)
  ::std::data::List::concat::concat = fn(w8 fn(w15 w10))
  ::std::numeric::N64::to_string::to_string::4 = x(w2 x(w10 w19))
}

::std::numeric::N64::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::eq::ne {
  fn(ref(tup(w1 w3) tup(w19 w29)) fn(ref(tup(w8 w10) tup(w22 w27)) w25))
  ::std::numeric::N32::eq::ne = fn(ref(w1 w19) fn(ref(w8 w22) ?(::std::numeric::N64::eq::ne::3 ::std::numeric::N64::eq::ne::2 x(x(w3 w29) x(x(w10 w27) w25)))))
}

::std::numeric::N64::eq::ne::2 { x(x(w4 w4) x(x(w2 w2) 1)) }

::std::numeric::N64::eq::ne::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::numeric::N32::eq::ne = fn(ref(w11 w1) fn(ref(w9 w4) ?(0 1 w12)))
}

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::day_21::control_string {
  fn(w0 fn(w1 fn(w2 fn(w3 w14))))
  ::day_21::control_string::1 = x(w0 x(w1 x(w2 x(w3 x(tup(0 tup(w12 w12)) w14)))))
}

::day_21::control_string::1 {
  x(w12 x(w11 w10))
  ::std::data::List::pop_front = fn(ref(w11 w2) enum(::day_21::control_string::4 enum(::day_21::control_string::5 x(w12 x(w2 w10)))))
}

::day_21::control_string::4 {
  enum(dup263(w10 w19) x(w7 x(w6 x(dup257(w11 w21) x(dup259(fn(w7 fn(w10 fn(w15 w16))) w25) x(w3 w24))))))
  ::std::numeric::N32::and::and = fn(w11 fn(1 w12))
  ::std::numeric::N32::eq::ne = fn(ref(w12 _) fn(ref(0 _) w15))
  ::std::data::List::concat::concat = fn(w3 fn(w16 w18))
  ::std::numeric::N32::div::div = fn(w21 fn(2 w22))
  ::day_21::control_string::1 = x(w19 x(w6 x(w22 x(w25 x(w18 w24)))))
}

::day_21::control_string::5 { x(_ x(_ x(_ x(_ x(w1 w1))))) }

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::day_21::control_numeric {
  fn(w0 fn(w1 fn(?(::day_21::control_numeric::9 ::day_21::control_numeric::8 x(x(w16 dup277(w74 w86)) x(x(w19 dup278(w33 w41)) x(x(w22 dup281(w73 w85)) x(x(w25 dup282(w34 w40)) dup272(?(::day_21::control_numeric::24 ::day_21::control_numeric::23 x(w74 x(w73 x(x(tup(0 tup(w68 w68)) w72) _)))) ?(::day_21::control_numeric::27 ::day_21::control_numeric::26 x(w86 x(w85 x(x(w45 w84) _)))))))))) w49)))
  ::std::numeric::N32::rem::rem = fn(w15 fn(3 w16))
  ::std::numeric::N32::div::div = fn(w18 fn(3 w19))
  ::std::numeric::N32::rem::rem = fn(w21 fn(3 w22))
  ::std::numeric::N32::div::div = fn(w24 fn(3 w25))
  ::day_21::pos_diff = fn(w33 fn(w34 w35))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(118 w77) w77)) fn(w35 w36))
  ::std::data::List::concat::concat = fn(w72 fn(w36 w38))
  ::day_21::pos_diff = fn(w40 fn(w41 w42))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(94 w80) w80)) fn(w42 w43))
  ::std::data::List::concat::concat = fn(w38 fn(w43 w45))
  ::std::data::List::concat::concat = fn(w84 fn(tup(1 tup(tup(65 w89) w89)) w49))
  tup(0 tup(w53 w53)) = _
  ::day_21::control_numeric::1 = fn(w0 dup274(w15 w18))
  ::day_21::control_numeric::1 = fn(w1 dup275(w21 w24))
}

::day_21::control_numeric::1 {
  fn(w0 w10)
  ::std::unicode::Char::eq::eq = fn(ref(w0 w6) fn(ref(48 _) ?(::day_21::control_numeric::4 ::day_21::control_numeric::3 x(w6 w10))))
}

::day_21::control_numeric::3 { x(_ 1) }

::day_21::control_numeric::4 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(65 _) ?(::day_21::control_numeric::6 ::day_21::control_numeric::5 x(w1 w7))))
}

::day_21::control_numeric::5 { x(_ 2) }

::day_21::control_numeric::6 {
  x(w4 w2)
  ::std::unicode::Char::sub_char::sub = fn(w4 fn(49 w1))
  ::std::numeric::N32::add::add = fn(w1 fn(3 w2))
}

::day_21::control_numeric::8 {
  x(x(w8 w8) x(w6 x(w4 x(x(w2 w2) w9))))
  ::day_21::control_numeric::15 = x(w6 x(w4 w9))
}

::day_21::control_numeric::9 {
  x(x(w13 w1) w11)
  ::std::numeric::N32::eq::eq = fn(ref(w13 w1) fn(ref(0 _) ?(::day_21::control_numeric::11 ::day_21::control_numeric::10 w11)))
}

::day_21::control_numeric::10 {
  x(w11 x(w9 x(x(w7 w1) w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w7 w1) fn(ref(0 _) ?(::day_21::control_numeric::13 ::day_21::control_numeric::15 x(w11 x(w9 w12)))))
}

::day_21::control_numeric::11 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) 0))) }

::day_21::control_numeric::13 { x(x(w4 w4) x(x(w2 w2) 0)) }

::day_21::control_numeric::15 {
  x(x(w9 w1) w7)
  ::std::numeric::N32::eq::eq = fn(ref(w9 w1) fn(ref(0 _) ?(::day_21::control_numeric::17 ::day_21::control_numeric::16 w7)))
}

::day_21::control_numeric::16 {
  x(x(w7 w1) w8)
  ::std::numeric::N32::eq::eq = fn(ref(w7 w1) fn(ref(0 _) ?(1 0 w8)))
}

::day_21::control_numeric::17 { x(x(w2 w2) 1) }

::day_21::control_numeric::23 {
  x(dup358(w2 w8) x(dup359(w1 w9) x(x(w16 w13) _)))
  ::day_21::pos_diff = fn(w1 fn(w2 w3))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(62 w21) w21)) fn(w3 w4))
  ::std::data::List::concat::concat = fn(w16 fn(w4 w6))
  ::day_21::pos_diff = fn(w8 fn(w9 w10))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(60 w24) w24)) fn(w10 w11))
  ::std::data::List::concat::concat = fn(w6 fn(w11 w13))
}

::day_21::control_numeric::24 { x(_ x(_ x(x(w2 w2) _))) }

::day_21::control_numeric::26 { x(_ x(_ x(x(w2 w2) _))) }

::day_21::control_numeric::27 {
  x(dup366(w2 w8) x(dup367(w1 w9) x(x(w16 w13) _)))
  ::day_21::pos_diff = fn(w1 fn(w2 w3))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(62 w21) w21)) fn(w3 w4))
  ::std::data::List::concat::concat = fn(w16 fn(w4 w6))
  ::day_21::pos_diff = fn(w8 fn(w9 w10))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(60 w24) w24)) fn(w10 w11))
  ::std::data::List::concat::concat = fn(w6 fn(w11 w13))
}

::std::numeric::N32::eq::eq { fn(ref(dup372(w0 @n32_eq(w10 out)) w0) fn(ref(dup373(w3 w10) w3) out)) }

::day_21::control_directional {
  fn(w0 fn(w1 fn(_ w58)))
  ::std::numeric::N32::rem::rem = fn(w14 fn(3 dup380(w36 w44)))
  ::std::numeric::N32::div::div = fn(w17 fn(3 dup381(w29 w51)))
  ::std::numeric::N32::rem::rem = fn(w20 fn(3 dup382(w37 w43)))
  ::std::numeric::N32::div::div = fn(w23 fn(3 dup383(w30 w50)))
  ::day_21::pos_diff = fn(w29 fn(w30 w31))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(118 w70) w70)) fn(w31 w32))
  ::std::data::List::concat::concat = fn(tup(0 tup(w67 w67)) fn(w32 w34))
  ::day_21::pos_diff = fn(w36 fn(w37 w38))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(60 w73) w73)) fn(w38 w39))
  ::std::data::List::concat::concat = fn(w34 fn(w39 w41))
  ::day_21::pos_diff = fn(w43 fn(w44 w45))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(62 w76) w76)) fn(w45 w46))
  ::std::data::List::concat::concat = fn(w41 fn(w46 w48))
  ::day_21::pos_diff = fn(w50 fn(w51 w52))
  ::std::unicode::String::repeat = fn(tup(1 tup(tup(94 w79) w79)) fn(w52 w53))
  ::std::data::List::concat::concat = fn(w48 fn(w53 w55))
  ::std::data::List::concat::concat = fn(w55 fn(tup(1 tup(tup(65 w82) w82)) w58))
  tup(0 tup(w62 w62)) = _
  ::day_21::control_directional::1 = fn(w0 dup378(w14 w17))
  ::day_21::control_directional::1 = fn(w1 dup379(w20 w23))
}

::day_21::control_directional::1 {
  fn(w0 w10)
  ::std::unicode::Char::eq::eq = fn(ref(w0 w6) fn(ref(60 _) ?(::day_21::control_directional::4 ::day_21::control_directional::3 x(w6 w10))))
}

::day_21::control_directional::3 { x(_ 0) }

::day_21::control_directional::4 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(118 _) ?(::day_21::control_directional::6 ::day_21::control_directional::5 x(w1 w7))))
}

::day_21::control_directional::5 { x(_ 1) }

::day_21::control_directional::6 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 w1) fn(ref(62 _) ?(::day_21::control_directional::8 ::day_21::control_directional::7 x(w1 w7))))
}

::day_21::control_directional::7 { x(_ 2) }

::day_21::control_directional::8 {
  x(w6 w7)
  ::std::unicode::Char::eq::eq = fn(ref(w6 _) fn(ref(94 _) ?(5 4 w7)))
}

::day_21::pos_diff {
  fn(w0 fn(w1 w13))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w1 w7) fn(ref(w0 w10) ?(::day_21::pos_diff::3 ::day_21::pos_diff::2 x(w10 x(w7 w13)))))
}

::day_21::pos_diff::2 { x(_ x(_ 0)) }

::day_21::pos_diff::3 {
  x(w5 x(w4 w2))
  ::std::numeric::N32::sub::sub = fn(w5 fn(w4 w2))
}

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::day_21::base_cost_func {
  w3
  ::std::data::Array::new = fn(6 fn(::std::numeric::N64::one w2))
  ::std::data::Array::new = fn(6 fn(w2 w3))
}

::day_21::cost_func {
  fn(w0 fn(dup435(w5 dup435(w6 w17)) fn(w2 w15)))
  ::std::data::Array::new = fn(w6 fn(_ w7))
  ::std::data::Array::new = fn(w5 fn(w7 w8))
  ::day_21::cost_func::1 = x(w0 x(w17 x(w2 x(x(w8 w15) 0))))
}

::day_21::cost_func::1 {
  x(w12 x(w11 x(w10 x(w9 w7))))
  ::std::numeric::N32::ord::lt = fn(ref(w7 w1) fn(ref(w11 w4) ?(::day_21::cost_func::3 ::day_21::cost_func::2 x(w12 x(w4 x(w10 x(w9 w1)))))))
}

::day_21::cost_func::2 {
  x(w8 x(w7 x(w6 x(x(w5 w21) dup459(w10 w1)))))
  ::day_21::cost_func::4 = x(x(w8 w18) x(x(w7 w16) x(x(w6 w14) x(x(w5 w12) x(w10 0)))))
  ::std::numeric::N32::add::add = fn(w1 fn(1 w2))
  ::day_21::cost_func::1 = x(w18 x(w16 x(w14 x(x(w12 w21) w2))))
}

::day_21::cost_func::3 { x(_ x(_ x(_ x(x(w2 w2) _)))) }

::day_21::cost_func::4 {
  x(w16 x(x(w14 w24) x(w12 x(w10 x(w8 w7)))))
  ::std::numeric::N32::ord::lt = fn(ref(w7 w1) fn(ref(w14 w4) ?(::day_21::cost_func::6 ::day_21::cost_func::5 x(w16 x(x(w4 w24) x(w12 x(w10 x(w8 w1))))))))
}

::day_21::cost_func::5 {
  x(x(w30 w54) x(w28 x(x(w26 w50) x(x(w24 w48) x(dup488(w33 dup488(w40 dup488(w10 w46))) dup489(w32 dup489(w39 dup489(w15 w19))))))))
  ::day_21::cost_func::7 = x(x(w30 w37) x(x(w26 w35) x(w33 x(w32 fn(1 w1)))))
  ::day_21::cost_func::7 = x(x(w37 w44) x(x(w35 w42) x(w40 x(w39 fn(0 w3)))))
  ::std::numeric::N64::min = fn(w1 fn(w3 w4))
  ::std::data::Array::get = fn(ref(w24 w8) fn(w10 w12))
  ::std::data::Array::get = fn(w12 fn(w15 ref(_ w4)))
  ::std::numeric::N32::add::add = fn(w19 fn(1 w20))
  ::day_21::cost_func::4 = x(x(w44 w54) x(w28 x(x(w42 w50) x(x(w8 w48) x(w46 w20)))))
}

::day_21::cost_func::6 { x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) _)))) }

::day_21::cost_func::7 {
  x(x(w29 w60) x(w27 x(dup503(w4 w7) x(dup504(w10 w13) fn(?(::day_21::cost_func::25 ::day_21::cost_func::24 x(w27 x(x(w5 w39) x(x(w8 w37) x(x(w11 w35) x(x(w14 w33) ?(::day_21::cost_func::40 ::day_21::cost_func::39 x(x(w29 w53) x(x(0 w51) x(w39 x(w37 x(w35 x(w33 x(x(5 w45) _)))))))))))))) w58)))))
  ::std::numeric::N32::rem::rem = fn(w4 fn(3 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(3 w8))
  ::std::numeric::N32::rem::rem = fn(w10 fn(3 w11))
  ::std::numeric::N32::div::div = fn(w13 fn(3 w14))
  ::day_21::cost_func::8 = x(x(w53 w60) x(x(w51 w58) x(x(w45 _) fn(5 _))))
}

::day_21::cost_func::8 {
  x(x(w26 w4) x(x(w24 w17) x(x(w22 w18) fn(dup532(w11 w18) _))))
  ::std::data::Array::get = fn(ref(w26 w4) fn(w22 w8))
  ::std::data::Array::get = fn(w8 fn(w11 ref(dup525(w15 w14) w14)))
  ::std::numeric::N64::add::add = fn(w24 fn(w15 w17))
}

::day_21::cost_func::9 {
  x(x(w10 w28) x(x(w8 w26) x(w6 x(w5 x(x(w4 w22) _)))))
  ::day_21::cost_func::10 = x(x(w10 w20) x(x(w8 w18) x(x(w6 w16) x(x(w5 w14) x(w4 w12)))))
  ::day_21::cost_func::13 = x(x(w20 w28) x(x(w18 w26) x(w16 x(w14 x(w12 w22)))))
}

::day_21::cost_func::10 {
  x(w16 x(w14 x(x(w12 w22) x(x(w10 w20) w8))))
  ::std::numeric::N32::ord::lt = fn(ref(w12 w1) fn(ref(w10 w4) ?(::day_21::cost_func::12 ::day_21::cost_func::11 x(w16 x(w14 x(x(w1 w22) x(x(w4 w20) w8)))))))
}

::day_21::cost_func::11 {
  x(x(w13 w30) x(x(w11 w28) x(x(w9 w26) x(w7 x(w5 w22)))))
  ::day_21::cost_func::8 = x(x(w13 w20) x(x(w11 w18) x(x(w5 w16) fn(2 _))))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w3))
  ::day_21::cost_func::10 = x(x(w20 w30) x(x(w18 w28) x(x(w3 w26) x(w7 x(w16 w22)))))
}

::day_21::cost_func::12 { x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1))))) }

::day_21::cost_func::13 {
  x(w14 x(w12 x(w10 x(w9 w8))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w10 w1) fn(ref(w9 w4) ?(::day_21::cost_func::15 ::day_21::cost_func::14 x(w14 x(w12 x(w1 x(w4 w8)))))))
}

::day_21::cost_func::14 {
  x(x(w11 w26) x(x(w9 w24) x(w7 x(w6 x(w5 w20)))))
  ::day_21::cost_func::8 = x(x(w11 w18) x(x(w9 w16) x(x(w5 w14) fn(0 _))))
  ::std::numeric::N32::sub::sub = fn(w7 fn(1 w3))
  ::day_21::cost_func::13 = x(x(w18 w26) x(x(w16 w24) x(w3 x(w6 x(w14 w20)))))
}

::day_21::cost_func::15 { x(x(w7 w7) x(x(w5 w5) x(_ x(_ x(w1 w1))))) }

::day_21::cost_func::16 {
  x(x(w10 w28) x(x(w8 w26) x(w6 x(w5 x(x(w4 w22) _)))))
  ::day_21::cost_func::17 = x(x(w10 w20) x(x(w8 w18) x(x(w6 w16) x(x(w5 w14) x(w4 w12)))))
  ::day_21::cost_func::20 = x(x(w20 w28) x(x(w18 w26) x(w16 x(w14 x(w12 w22)))))
}

::day_21::cost_func::17 {
  x(w16 x(w14 x(x(w12 w22) x(x(w10 w20) w8))))
  ::std::numeric::N32::ord::lt = fn(ref(w12 w1) fn(ref(w10 w4) ?(::day_21::cost_func::19 ::day_21::cost_func::18 x(w16 x(w14 x(x(w1 w22) x(x(w4 w20) w8)))))))
}

::day_21::cost_func::18 {
  x(x(w13 w30) x(x(w11 w28) x(x(w9 w26) x(w7 x(w5 w22)))))
  ::day_21::cost_func::8 = x(x(w13 w20) x(x(w11 w18) x(x(w5 w16) fn(4 _))))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w3))
  ::day_21::cost_func::17 = x(x(w20 w30) x(x(w18 w28) x(x(w3 w26) x(w7 x(w16 w22)))))
}

::day_21::cost_func::19 { x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1))))) }

::day_21::cost_func::20 {
  x(w14 x(w12 x(w10 x(w9 w8))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w10 w1) fn(ref(w9 w4) ?(::day_21::cost_func::22 ::day_21::cost_func::21 x(w14 x(w12 x(w1 x(w4 w8)))))))
}

::day_21::cost_func::21 {
  x(x(w11 w26) x(x(w9 w24) x(w7 x(w6 x(w5 w20)))))
  ::day_21::cost_func::8 = x(x(w11 w18) x(x(w9 w16) x(x(w5 w14) fn(1 _))))
  ::std::numeric::N32::sub::sub = fn(w7 fn(1 w3))
  ::day_21::cost_func::20 = x(x(w18 w26) x(x(w16 w24) x(w3 x(w6 x(w14 w20)))))
}

::day_21::cost_func::22 { x(x(w7 w7) x(x(w5 w5) x(_ x(_ x(w1 w1))))) }

::day_21::cost_func::24 {
  x(w10 x(x(w8 w8) x(w6 x(w4 x(x(w2 w2) w11)))))
  ::day_21::cost_func::31 = x(w10 x(w6 x(w4 w11)))
}

::day_21::cost_func::25 {
  x(w15 x(x(w13 w1) w11))
  ::std::numeric::N32::eq::eq = fn(ref(w13 w1) fn(ref(0 _) ?(::day_21::cost_func::27 ::day_21::cost_func::26 x(w15 w11))))
}

::day_21::cost_func::26 {
  x(x(w15 w22) x(w13 x(w11 x(x(w9 w1) w16))))
  ::std::numeric::N32::eq::eq = fn(ref(w9 w1) fn(ref(w15 w4) ?(::day_21::cost_func::29 ::day_21::cost_func::31 x(x(w4 w22) x(w13 x(w11 w16))))))
}

::day_21::cost_func::27 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) 0)))) }

::day_21::cost_func::29 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) 0))) }

::day_21::cost_func::31 {
  x(x(w13 w4) x(x(w11 w1) w9))
  ::std::numeric::N32::eq::eq = fn(ref(w11 w1) fn(ref(w13 w4) ?(::day_21::cost_func::33 ::day_21::cost_func::32 w9)))
}

::day_21::cost_func::32 {
  x(x(w7 w1) w8)
  ::std::numeric::N32::eq::eq = fn(ref(w7 w1) fn(ref(0 _) ?(1 0 w8)))
}

::day_21::cost_func::33 { x(x(w2 w2) 1) }

::day_21::cost_func::39 {
  x(x(w14 w32) x(x(w12 w30) x(w10 x(w9 x(w8 x(w7 x(x(w6 w26) _)))))))
  ::day_21::cost_func::9 = x(x(w14 w23) x(x(w12 w21) x(w10 x(w8 x(x(w6 w17) _)))))
  ::day_21::cost_func::16 = x(x(w23 w32) x(x(w21 w30) x(w9 x(w7 x(x(w17 w26) _)))))
}

::day_21::cost_func::40 {
  x(x(w14 w32) x(x(w12 w30) x(w10 x(w9 x(w8 x(w7 x(x(w6 w26) _)))))))
  ::day_21::cost_func::16 = x(x(w14 w23) x(x(w12 w21) x(w9 x(w7 x(x(w6 w17) _)))))
  ::day_21::cost_func::9 = x(x(w23 w32) x(x(w21 w30) x(w10 x(w8 x(x(w17 w26) _)))))
}

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup850(w0 @n32_le(w10 out)) w0) fn(ref(dup851(w3 w10) w3) out)) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::iter { fn(ref(tup(dup1024(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::new {
  fn(dup1102(w4 w5) fn(w1 tup(w4 w7)))
  ::std::data::Array::Node::new = fn(w5 fn(w1 w7))
}

::std::data::Array::get {
  fn(ref(tup(dup1207(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup1222(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::Node::new {
  fn(w0 fn(w1 w11))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w7) fn(ref(1 _) ?(::std::data::Array::Node::new::3 ::std::data::Array::Node::new::2 x(w7 x(w1 w11)))))
}

::std::data::Array::Node::new::2 {
  x(_ x(w3 w1))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w3 w1)
}

::std::data::Array::Node::new::3 {
  x(dup1422(w0 w5) x(dup1423(w3 w7) tup(w4 w8)))
  ::std::numeric::N32::add::add = fn(w0 fn(1 w1))
  ::std::numeric::N32::div::div = fn(w1 fn(2 w2))
  ::std::data::Array::Node::new = fn(w2 fn(w3 w4))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::new = fn(w6 fn(w7 w8))
}

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse {
  fn(w0 w15)
  ::std::unicode::String::to_chars::cast = fn(w0 tup(w5 tup(w6 _)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w11) fn(ref(0 _) ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w11 x(w6 w15)))))
}

::std::numeric::N32::parse::2 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::4 {
  x(w8 w7)
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w1 w7))))
}

::std::numeric::N32::parse::5 {
  x(w18 x(tup(w1 w2) x(w16 w29)))
  ::std::unicode::Char::ord::le = fn(ref(48 _) fn(ref(w1 w22) @n32_and(w27 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w21 w29))))))))
  ::std::unicode::Char::ord::le = fn(ref(w22 w21) fn(ref(57 _) w27))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  ::std::numeric::N32::mul::mul = fn(w2 fn(10 w13))
  ::std::unicode::Char::sub_char::sub = fn(w1 fn(48 w15))
  ::std::numeric::N32::add::add = fn(w13 fn(w15 w17))
  ::std::numeric::N32::sub::sub = fn(w4 fn(1 w19))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w9 w9) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::ord::le { fn(ref(dup2176(w0 @n32_le(w10 out)) w0) fn(ref(dup2177(w3 w10) w3) out)) }

::std::numeric::N32::min {
  fn(w0 fn(w1 w13))
  ::std::numeric::N32::ord::lt = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::min::3 ::std::numeric::N32::min::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::min::2 { x(w3 x(_ w3)) }

::std::numeric::N32::min::3 { x(_ x(w2 w2)) }

::std::numeric::N64::one { tup(1 0) }

::std::numeric::N64::sub::sub { fn(tup(dup(@n32_sub(bl0 l) @n32_lt(bl1 c)) @n32_sub(bh @n32_sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@n32_mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::numeric::N64::div_rem_n32 {
  fn(tup(w0 dup2400(w6 w11)) fn(dup2405(w7 dup2405(w10 w32)) tup(tup(w19 w38) w22)))
  ::std::numeric::N32::div::div = fn(w6 fn(w7 w8))
  ::std::numeric::N32::rem::rem = fn(w11 fn(w10 w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w12 w30) fn(ref(w32 dup2404(w39 dup2404(w44 dup2404(w16 w20)))) ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(w30 w41) x(w39 x(x(w8 w38) _))))))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w0 dup2399(w15 w21)) x(w41 x(w44 x(0 w43))))
  ::std::numeric::N32::div::div = fn(w15 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w43 fn(w17 w19))
  ::std::numeric::N32::rem::rem = fn(w21 fn(w20 w22))
}

::std::numeric::N64::div_rem_n32::2 {
  x(x(dup2415(w0 w5) w6) x(dup2416(w1 w4) x(x(_ w2) _)))
  ::std::numeric::N32::div::div = fn(w0 fn(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w5 fn(w4 w6))
}

::std::numeric::N64::div_rem_n32::3 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::4 {
  x(w10 x(w8 w7))
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(w10 x(w1 w7)))))
}

::std::numeric::N64::div_rem_n32::5 {
  x(x(w27 w33) x(dup2431(w2 w9) x(dup2433(w0 dup2433(w12 w30)) x(w23 w29))))
  ::std::numeric::N32::div::div = fn(4294967295 fn(w0 w1))
  ::std::numeric::N32::mul::mul = fn(w1 fn(w2 dup2437(w5 w11)))
  ::std::numeric::N32::add::add = fn(w23 fn(w5 w7))
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::6 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::numeric::N64::ord::lt {
  fn(ref(tup(w1 w3) tup(w33 w31)) fn(ref(tup(w8 w10) tup(w29 w27)) w25))
  ::std::numeric::N32::ord::lt = fn(ref(w3 w19) fn(ref(w10 w22) ?(::std::numeric::N64::ord::lt::3 ::std::numeric::N64::ord::lt::2 x(x(w1 w33) x(x(w19 w31) x(x(w8 w29) x(x(w22 w27) w25)))))))
}

::std::numeric::N64::ord::lt::2 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) 1)))) }

::std::numeric::N64::ord::lt::3 {
  x(w15 x(x(w13 w1) x(w11 x(x(w9 w4) w16))))
  ::std::numeric::N32::eq::eq = fn(ref(w13 w1) fn(ref(w9 w4) ?(::std::numeric::N64::ord::lt::5 ::std::numeric::N64::ord::lt::4 x(w15 x(w11 w16)))))
}

::std::numeric::N64::ord::lt::4 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::numeric::N32::ord::lt = fn(ref(w11 w1) fn(ref(w9 w4) ?(0 1 w12)))
}

::std::numeric::N64::ord::lt::5 { x(x(w4 w4) x(x(w2 w2) 0)) }

::std::numeric::N64::min {
  fn(w0 fn(w1 w13))
  ::std::numeric::N64::ord::lt = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N64::min::3 ::std::numeric::N64::min::2 x(w7 x(w10 w13)))))
}

::std::numeric::N64::min::2 { x(w3 x(_ w3)) }

::std::numeric::N64::min::3 { x(_ x(w2 w2)) }

::std::unicode::Char::eq::ne { fn(ref(dup2784(w0 @n32_ne(w10 out)) w0) fn(ref(dup2785(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2835(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 {
  x(w26 x(dup2868(w1 w46) x(w24 x(w23 x(x(w22 w43) w41)))))
  ::std::unicode::String::split_once = fn(w26 fn(w1 tup(w3 enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(w46 x(w35 x(w44 x(x(w38 w43) w41)))))))))
  ::std::unicode::String::len = fn(ref(w3 w7) w9)
  ::std::numeric::N32::eq::eq = fn(ref(w9 _) fn(ref(0 _) dup2879(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(w23 dup2872(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(w24 w35) x(w33 x(w7 _)))) w44))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(w38 dup2874(w22 w33))))))
}

::std::unicode::String::split_trim::3 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(w4 w4) _) }

::std::unicode::String::split_trim::10 { x(w5 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(w5 w2)) w2)) }

::std::unicode::String::split_trim::11 { x(x(w3 w3) _) }

::std::unicode::String::split_trim::12 {
  x(x(w7 w3) x(w5 _))
  ::std::data::List::concat::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::unicode::String::split_trim::15 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 {
  enum(w0 w7)
  ::std::unicode::String::split_trim::1 = x(w0 w7)
}

::std::unicode::String::split_trim::24 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::unicode::String::repeat {
  fn(w0 fn(w1 w12))
  ::std::unicode::String::repeat::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) w12)))
}

::std::unicode::String::repeat::1 {
  x(w8 x(w7 w6))
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::unicode::String::repeat::3 ::std::unicode::String::repeat::2 x(w8 x(w1 w6)))))
}

::std::unicode::String::repeat::2 {
  x(dup3220(w0 w12) x(w7 x(w6 w10)))
  ::std::data::List::concat::concat = fn(w6 fn(w0 w2))
  ::std::numeric::N32::sub::sub = fn(w7 fn(1 w4))
  ::std::unicode::String::repeat::1 = x(w12 x(w4 x(w2 w10)))
}

::std::unicode::String::repeat::3 { x(_ x(_ x(w1 w1))) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w19) x(w7 w15))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w11) fn(ref(0 _) ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w19) x(w7 x(w11 w15))))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 { x(x(w7 w7) x(w5 x(_ w5))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

