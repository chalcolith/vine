
::std::logical::Option::None { enum(_ enum(r r)) }

::std::ops::comparison::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::ops::comparison::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::ops::comparison::Ord::Gt { enum(_ enum(_ enum(r r))) }

::main { ::day_22::main }

::day_22::main {
  fn(ref(w1 w29) _)
  ::day_22::main::1 = x(x(w1 w42) x(x(::std::data::Map::empty w40) x(x(0 w38) 0)))
  ::std::numeric::N64::to_string::to_string = fn(w38 tup(@n32_add(8 w43) tup(w44 w45)))
  ::std::IO::println = fn(ref(w42 w9) fn(tup(w43 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w44)))))))) w45)) _))
  ::std::data::Map::len = fn(ref(w40 w19) w21)
  ::std::numeric::N32::to_string::to_string = fn(w21 w22)
  ::std::IO::println = fn(ref(w9 w16) fn(w22 _))
  ::std::data::Map::into_iter = fn(w19 w26)
  ::day_22::main::15 = x(x(0 w50) w26)
  ::std::numeric::N32::to_string::to_string = fn(w50 tup(@n32_add(8 w51) tup(w52 w53)))
  ::std::IO::println = fn(ref(w16 w29) fn(tup(w51 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w52)))))))) w53)) _))
}

::day_22::main::1 {
  x(x(w11 w18) w9)
  ::std::IO::read_line = fn(ref(w11 w1) enum(::day_22::main::4 enum(::day_22::main::5 x(x(w1 w18) w9))))
}

::day_22::main::4 {
  enum(w0 x(w8 x(x(w6 w42) x(x(w4 w40) w2))))
  0 = tup(_ tup(w11 tup(w12 w13)))
  ::std::numeric::N32::parse = fn(w0 w16)
  ::std::logical::Option::unwrap = fn(w16 w17)
  ::day_22::main::6 = x(x(w6 w37) x(x(w2 w35) x(w11 x(w12 x(w13 x(x(w17 w30) 0))))))
  ::std::numeric::N64::from_n32::cast = fn(w30 w22)
  ::std::numeric::N64::add::add = fn(w4 fn(w22 w24))
  ::std::numeric::N32::add::add = fn(w35 fn(1 w26))
  ::day_22::main::1 = x(w8 x(x(w37 w42) x(x(w24 w40) w26)))
}

::day_22::main::5 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_22::main::6 {
  x(w15 x(w13 x(w11 x(w10 x(w9 x(w8 x(w6 w5)))))))
  ::std::numeric::N32::ord::lt = fn(ref(w6 w1) fn(ref(2000 _) ?(::day_22::main::8 ::day_22::main::7 x(w15 x(w13 x(w11 x(w10 x(w9 x(w8 x(w1 w5))))))))))
}

::day_22::main::7 {
  x(x(w34 w60) x(x(w32 w58) x(w30 x(w29 x(w28 x(x(w27 w53) x(w25 w24)))))))
  ::day_22::evolve = fn(ref(w27 dup76(w4 w52)) _)
  ::std::numeric::N32::rem::rem = fn(w4 fn(10 dup82(w10 dup82(w19 w41))))
  ::std::numeric::N32::sub::sub = fn(w10 fn(w24 w12))
  tup(w30 tup(w29 tup(w28 w12))) = tup(w14 tup(dup69(w44 w56) tup(dup71(w43 w55) dup73(w42 w54))))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w25 w36) fn(ref(4 _) ?(::day_22::main::11 ::day_22::main::10 x(x(w34 w49) x(x(w32 w47) x(w14 x(w44 x(w43 x(w42 x(w41 _))))))))))
  ::std::numeric::N32::add::add = fn(w36 fn(1 w23))
  ::day_22::main::6 = x(x(w49 w60) x(x(w47 w58) x(w56 x(w55 x(w54 x(x(w52 w53) x(w23 w19)))))))
}

::day_22::main::8 { x(x(w10 w10) x(x(w8 w8) x(_ x(_ x(_ x(x(w3 w3) _)))))) }

::day_22::main::10 {
  x(x(w33 w1) x(x(w31 w30) x(w29 x(w28 x(w27 x(w26 x(w25 w41)))))))
  ::std::numeric::N32::mul::mul = fn(w29 fn(20 w4))
  ::std::numeric::N32::add::add = fn(w4 fn(w28 w6))
  ::std::numeric::N32::mul::mul = fn(w6 fn(20 w7))
  ::std::numeric::N32::add::add = fn(w7 fn(w27 w9))
  ::std::numeric::N32::mul::mul = fn(w9 fn(20 w10))
  ::std::numeric::N32::add::add = fn(w10 fn(w26 w12))
  ::std::numeric::N32::neg::neg = fn(1 w13)
  ::std::data::Map::get_or_insert::1 = fn(ref(w33 w1) fn(w12 fn(tup(0 w13) ref(tup(w17 w19) tup(w45 w43)))))
  ::std::numeric::N32::eq::ne = fn(ref(w19 w35) fn(ref(w31 dup89(w30 w47)) ?(::day_22::main::14 ::day_22::main::13 x(w47 x(w25 x(x(w17 w45) x(x(w35 w43) w41)))))))
}

::day_22::main::11 { x(x(w9 w9) x(x(w7 w7) _)) }

::day_22::main::13 {
  x(w11 x(w10 x(x(w9 w2) x(x(_ w11) _))))
  ::std::numeric::N32::add::add = fn(w9 fn(w10 w2))
}

::day_22::main::14 { x(_ x(_ x(x(w4 w4) x(x(w2 w2) _)))) }

::day_22::main::15 {
  x(w7 w5)
  ::std::data::Map::IntoIter::next = fn(ref(w5 w1) enum(::day_22::main::18 enum(::day_22::main::19 x(w7 w1))))
}

::day_22::main::18 {
  enum(tup(_ tup(w5 _)) x(x(w10 w17) w8))
  ::std::numeric::N32::max = fn(w10 fn(w5 w13))
  ::day_22::main::15 = x(x(w13 w17) w8)
}

::day_22::main::19 { x(x(w2 w2) _) }

::std::numeric::N32::ord::lt { fn(ref(dup129(w0 @n32_lt(w10 out)) w0) fn(ref(dup130(w3 w10) w3) out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup147(w0 @n32_le(w10 out)) w0) fn(ref(dup148(w3 w10) w3) out)) }

::std::data::Map::get_or_insert::1 {
  fn(w1 fn(w3 fn(w4 ref(w17 w20))))
  ::std::data::Map::insert::1 = fn(w1 fn(w3 fn(w20 w13)))
  ::std::logical::Option::unwrap_or = fn(w13 fn(w4 w17))
}

::std::data::Map::insert::1 {
  fn(ref(tup(w1 w3) tup(w24 w22)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w1 w14) fn(ref(0 _) ?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(w14 w24) x(x(w3 w22) x(w7 x(w8 w18)))))))
}

::std::data::Map::insert::1::2 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(w8 w7) ::std::data::Map::empty))) x(w8 x(w7 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::3 {
  x(w25 x(x(w23 w47) x(w21 x(w20 w35))))
  ref(w23 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w43 tup(tup(w41 w39) w37)))
  ::std::ops::comparison::Ord::cmp_from_lt::1 = fn(ref(w21 w27) fn(ref(w6 w30) enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(w25 x(x(w1 w47) x(w27 x(w20 x(x(w4 w43) x(x(w30 w41) x(x(w8 w39) x(x(w12 w37) x(w35 _))))))))))))))
}

::std::data::Map::insert::1::8 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w17) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w9 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_right = fn(ref(w24 w29) _)
}

::std::data::Map::insert::1::9 { x(x(w15 w15) x(x(w13 w13) x(w11 x(w10 x(x(w9 w9) x(x(_ w11) x(x(w5 w10) x(x(w3 w3) x(enum(enum(w5 w23) enum(_ w23)) _))))))))) }

::std::data::Map::insert::1::10 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w17) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w3 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_left = fn(ref(w24 w29) _)
}

::std::numeric::N32::eq::eq { fn(ref(dup235(w0 @n32_eq(w10 out)) w0) fn(ref(dup236(w3 w10) w3) out)) }

::std::ops::comparison::Ord::cmp_from_lt::1 {
  fn(ref(w1 w21) fn(ref(w4 w19) w17))
  ::std::numeric::N32::ord::lt = fn(ref(w1 w11) fn(ref(w4 w14) ?(::std::ops::comparison::Ord::cmp_from_lt::1::3 ::std::ops::comparison::Ord::cmp_from_lt::1::2 x(x(w11 w21) x(x(w14 w19) w17)))))
}

::std::ops::comparison::Ord::cmp_from_lt::1::2 { x(x(w4 w4) x(x(w2 w2) ::std::ops::comparison::Ord::Lt)) }

::std::ops::comparison::Ord::cmp_from_lt::1::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w11 w1) fn(ref(w9 w4) ?(::std::ops::comparison::Ord::Eq ::std::ops::comparison::Ord::Gt w12)))
}

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::numeric::N32::neg::neg { fn(@n32_sub$(0 out) out) }

::std::numeric::N32::eq::ne { fn(ref(dup276(w0 @n32_ne(w10 out)) w0) fn(ref(dup277(w3 w10) w3) out)) }

::std::numeric::N64::add::add { fn(tup(dup(@n32_add(bl0 l) @n32_add_high(bl1 c)) @n32_add(bh @n32_add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::from_n32::cast { fn(w0 tup(w0 0)) }

::std::numeric::N64::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N64::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N64::to_string::to_string::2 {
  x(w4 w9)
  ::std::numeric::N64::to_string::to_string::4 = x(w4 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N64::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N64::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N64::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N64::to_string::to_string::5 {
  x(w16 x(w15 w19))
  ::std::numeric::N64::div_rem_n32 = fn(w16 fn(10 tup(w2 w3)))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w3 w6))
  ::std::unicode::String::from_chars::cast = fn(tup(1 tup(tup(w6 w17) w17)) w8)
  ::std::data::List::concat::concat = fn(w8 fn(w15 w10))
  ::std::numeric::N64::to_string::to_string::4 = x(w2 x(w10 w19))
}

::std::numeric::N64::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::eq::ne {
  fn(ref(tup(w1 w3) tup(w19 w29)) fn(ref(tup(w8 w10) tup(w22 w27)) w25))
  ::std::numeric::N32::eq::ne = fn(ref(w1 w19) fn(ref(w8 w22) ?(::std::numeric::N64::eq::ne::3 ::std::numeric::N64::eq::ne::2 x(x(w3 w29) x(x(w10 w27) w25)))))
}

::std::numeric::N64::eq::ne::2 { x(x(w4 w4) x(x(w2 w2) 1)) }

::std::numeric::N64::eq::ne::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::numeric::N32::eq::ne = fn(ref(w11 w1) fn(ref(w9 w4) ?(0 1 w12)))
}

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup366(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::day_22::evolve {
  fn(ref(dup377(w5 w6) w21) _)
  ::std::numeric::N32::shl::shl = fn(w6 fn(6 w7))
  ::std::numeric::N32::xor::xor = fn(w5 fn(w7 w8))
  ::std::numeric::N32::and::and = fn(w8 fn(16777215 dup378(w11 w12)))
  ::std::numeric::N32::shr::shr = fn(w12 fn(5 w13))
  ::std::numeric::N32::xor::xor = fn(w11 fn(w13 w14))
  ::std::numeric::N32::and::and = fn(w14 fn(16777215 dup379(w17 w18)))
  ::std::numeric::N32::shl::shl = fn(w18 fn(11 w19))
  ::std::numeric::N32::xor::xor = fn(w17 fn(w19 w20))
  ::std::numeric::N32::and::and = fn(w20 fn(16777215 w21))
}

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::numeric::N32::xor::xor { fn(@n32_xor(w1 out) fn(w1 out)) }

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_front {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w3 w12) w12)) fn(w1 w9))
}

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new {
  fn(w0 fn(w1 fn(w2 tup(w14 tup(w6 tup(w1 w10))))))
  ::std::data::Map::len = fn(ref(w0 w6) w8)
  ::std::data::Map::len = fn(ref(w2 w10) w12)
  ::std::numeric::N32::add::add = fn(w8 fn(w12 w13))
  ::std::numeric::N32::add::add = fn(w13 fn(1 w14))
}

::std::data::Map::len { fn(ref(tup(dup1151(w0 w8) w2) tup(w0 w2)) w8) }

::std::data::Map::into_iter { fn(w0 tup(w0 tup(0 tup(w7 w7)))) }

::std::data::Map::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w24 w18)) w22)
  ::std::data::Map::IntoIter::next::1 = x(x(w1 w16) x(x(w3 w14) _))
  ::std::data::List::pop_front = fn(ref(w14 w18) enum(::std::data::Map::IntoIter::next::8 enum(::std::data::Map::IntoIter::next::9 x(x(w16 w24) w22))))
}

::std::data::Map::IntoIter::next::1 {
  x(x(tup(w2 w3) w35) x(w22 w30))
  ::std::numeric::N32::eq::eq = fn(ref(w2 _) fn(ref(0 _) ?(::std::data::Map::IntoIter::next::4 ::std::data::Map::IntoIter::next::3 x(x(_ w35) x(w22 x(w3 w30))))))
}

::std::data::Map::IntoIter::next::3 { x(x(w5 w5) x(x(w3 w3) _)) }

::std::data::Map::IntoIter::next::4 {
  x(x(_ w30) x(x(w3 w28) x(tup(w13 w14) w26)))
  ::std::data::List::push_front = fn(ref(w3 w18) fn(w14 _))
  ::std::data::Map::IntoIter::next::1 = x(x(w13 w30) x(x(w18 w28) w26))
}

::std::data::Map::IntoIter::next::8 { enum(tup(w2 w3) x(x(_ w3) enum(enum(w2 w13) enum(_ w13)))) }

::std::data::Map::IntoIter::next::9 { x(x(w2 w2) ::std::logical::Option::None) }

::std::data::Map::balance_left {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w6 w14) fn(ref(w8 w17) ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(w14 x(w7 x(w17 w20))))))
}

::std::data::Map::balance_left::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_left::3 {
  x(w10 x(w9 x(tup(_ tup(w1 tup(w2 w3))) w18)))
  ::std::data::Map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))))
}

::std::data::Map::balance_left::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w3 tup(w9 w8)))))))
  ::std::data::Map::new = fn(w12 fn(w11 fn(w10 w3)))
}

::std::data::Map::balance_left::6 {
  x(w21 x(w20 x(tup(_ tup(w1 tup(w2 w3))) x(w18 x(w17 tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w18 fn(w17 w14)))
}

::std::data::Map::balance_right {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w8 w14) fn(ref(w6 w17) ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(w17 x(w7 x(w14 w20))))))
}

::std::data::Map::balance_right::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_right::3 {
  x(tup(_ tup(w1 tup(w2 w3))) x(w9 x(w8 w18)))
  ::std::data::Map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))))
}

::std::data::Map::balance_right::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w10 tup(w9 w5)))))))
  ::std::data::Map::new = fn(w8 fn(w12 fn(w11 w5)))
}

::std::data::Map::balance_right::6 {
  x(w21 x(w20 x(w19 x(w18 x(tup(_ tup(w1 tup(w2 w3))) tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w21 fn(w20 w14)))
}

::std::data::Map::is_balanced {
  fn(ref(tup(dup1435(w0 w14) w2) tup(w0 w2)) fn(ref(tup(w7 w8) tup(w19 w8)) w21))
  ::std::numeric::N32::mul::mul = fn(3 fn(w14 w15))
  ::std::numeric::N32::add::add = fn(w15 fn(2 w16))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w16 _) fn(ref(w7 w19) w21))
}

::std::data::Map::is_single {
  fn(ref(tup(w1 w2) tup(w15 w2)) fn(ref(tup(dup1442(w6 w17) w8) tup(w6 w8)) w20))
  ::std::numeric::N32::mul::mul = fn(2 fn(w17 w18))
  ::std::numeric::N32::ord::le = fn(ref(w1 w15) fn(ref(w18 _) w20))
}

::std::data::Map::size {
  fn(ref(tup(tup(dup1445(w0 w16) w2) tup(w5 tup(dup1446(w6 w17) w8))) tup(tup(w0 w2) tup(w5 tup(w6 w8)))) w19)
  ::std::numeric::N32::add::add = fn(w16 fn(w17 w18))
  ::std::numeric::N32::add::add = fn(w18 fn(1 w19))
}

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8))) fn(w1 w8)) }

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::numeric::N32::parse {
  fn(w0 w15)
  ::std::unicode::String::to_chars::cast = fn(w0 tup(w5 tup(w6 _)))
  ::std::numeric::N32::eq::eq = fn(ref(w5 w11) fn(ref(0 _) ?(::std::numeric::N32::parse::3 ::std::numeric::N32::parse::2 x(w11 x(w6 w15)))))
}

::std::numeric::N32::parse::2 {
  x(_ x(_ w4))
  ::std::numeric::N32::parse::10 = x(w4 ::std::logical::Option::None)
}

::std::numeric::N32::parse::3 {
  x(w5 x(w4 w6))
  ::std::numeric::N32::parse::4 = x(w5 x(w4 x(0 w6)))
}

::std::numeric::N32::parse::4 {
  x(w8 w7)
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N32::parse::6 ::std::numeric::N32::parse::5 x(w1 w7))))
}

::std::numeric::N32::parse::5 {
  x(w18 x(tup(w1 w2) x(w16 w29)))
  ::std::unicode::Char::ord::le = fn(ref(48 _) fn(ref(w1 w22) @n32_and(w27 ?(::std::numeric::N32::parse::9 ::std::numeric::N32::parse::8 x(w18 x(w2 x(w16 x(w21 w29))))))))
  ::std::unicode::Char::ord::le = fn(ref(w22 w21) fn(ref(57 _) w27))
}

::std::numeric::N32::parse::6 {
  x(_ x(_ x(w1 w9)))
  ::std::numeric::N32::parse::10 = x(w9 enum(enum(w1 w7) enum(_ w7)))
}

::std::numeric::N32::parse::8 {
  x(w4 x(w3 x(w2 x(w1 w20))))
  ::std::numeric::N32::mul::mul = fn(w2 fn(10 w13))
  ::std::unicode::Char::sub_char::sub = fn(w1 fn(48 w15))
  ::std::numeric::N32::add::add = fn(w13 fn(w15 w17))
  ::std::numeric::N32::sub::sub = fn(w4 fn(1 w19))
  ::std::numeric::N32::parse::4 = x(w19 x(w3 x(w17 w20)))
}

::std::numeric::N32::parse::9 { x(_ x(_ x(_ x(_ ::std::logical::Option::None)))) }

::std::numeric::N32::parse::10 { x(w9 w9) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::Char::ord::le { fn(ref(dup1773(w0 @n32_le(w10 out)) w0) fn(ref(dup1774(w3 w10) w3) out)) }

::std::unicode::Char::sub_char::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::max {
  fn(w0 fn(w1 w13))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::max::3 ::std::numeric::N32::max::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::max::2 { x(w3 x(_ w3)) }

::std::numeric::N32::max::3 { x(_ x(w2 w2)) }

::std::numeric::N64::sub::sub { fn(tup(dup(@n32_sub(bl0 l) @n32_lt(bl1 c)) @n32_sub(bh @n32_sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@n32_mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::numeric::N64::div_rem_n32 {
  fn(tup(w0 dup1985(w6 w11)) fn(dup1990(w7 dup1990(w10 w32)) tup(tup(w19 w38) w22)))
  ::std::numeric::N32::div::div = fn(w6 fn(w7 w8))
  ::std::numeric::N32::rem::rem = fn(w11 fn(w10 w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w12 w30) fn(ref(w32 dup1989(w39 dup1989(w44 dup1989(w16 w20)))) ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(w30 w41) x(w39 x(x(w8 w38) _))))))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w0 dup1984(w15 w21)) x(w41 x(w44 x(0 w43))))
  ::std::numeric::N32::div::div = fn(w15 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w43 fn(w17 w19))
  ::std::numeric::N32::rem::rem = fn(w21 fn(w20 w22))
}

::std::numeric::N64::div_rem_n32::2 {
  x(x(dup2000(w0 w5) w6) x(dup2001(w1 w4) x(x(_ w2) _)))
  ::std::numeric::N32::div::div = fn(w0 fn(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w5 fn(w4 w6))
}

::std::numeric::N64::div_rem_n32::3 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::4 {
  x(w10 x(w8 w7))
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(w10 x(w1 w7)))))
}

::std::numeric::N64::div_rem_n32::5 {
  x(x(w27 w33) x(dup2016(w2 w9) x(dup2018(w0 dup2018(w12 w30)) x(w23 w29))))
  ::std::numeric::N32::div::div = fn(4294967295 fn(w0 w1))
  ::std::numeric::N32::mul::mul = fn(w1 fn(w2 dup2022(w5 w11)))
  ::std::numeric::N32::add::add = fn(w23 fn(w5 w7))
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::6 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::unicode::Char::eq::eq { fn(ref(dup2369(w0 @n32_eq(w10 out)) w0) fn(ref(dup2370(w3 w10) w3) out)) }

::std::unicode::Char::eq::ne { fn(ref(dup2373(w0 @n32_ne(w10 out)) w0) fn(ref(dup2374(w3 w10) w3) out)) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

