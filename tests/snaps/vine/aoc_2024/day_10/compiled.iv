
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_10::main }

::day_10::main {
  fn(ref(w1 w41) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w50) w50)) w15))
  ::std::data::List::map = fn(w15 fn(fn(w51 w51) w17))
  ::std::unicode::Char::eq::eq = fn(ref(w126 w127) fn(ref(48 _) ?(::day_10::main::5 ::day_10::main::4 x(w127 x(x(w66 w145) x(x(w68 w143) x(x(w70 w141) x(w77 x(w78 x(w85 x(w86 x(w93 x(w94 x(w101 x(w102 dup42(w118 dup42(w120 dup42(w122 w124))))))))))))))))))
  ::day_10::cross = fn(w17 fn(fn(dup13(w108 dup13(w110 dup13(w112 dup13(w114 w126)))) fn(tup(tup(tup(w77 w78) tup(w108 w118)) tup(tup(tup(w85 w86) tup(w110 w120)) tup(tup(tup(w93 w94) tup(w112 w122)) tup(tup(w101 w102) tup(w114 w124))))) fn(ref(tup(w64 tup(w66 tup(w68 w70))) tup(w64 tup(w145 tup(w143 w141)))) _))) fn(tup(46 0) fn(ref(tup(w6 0) tup(w22 tup(_ tup(w26 w28)))) _))))
  ::std::numeric::N32::to_string::to_string = fn(w26 tup(@add(8 w147) tup(w148 w149)))
  ::std::IO::println = fn(ref(w22 w34) fn(tup(w147 tup(tup(83 tup(99 tup(111 tup(114 tup(101 tup(115 tup(58 tup(32 w148)))))))) w149)) _))
  ::std::numeric::N32::to_string::to_string = fn(w28 tup(@add(9 w152) tup(w153 w154)))
  ::std::IO::println = fn(ref(w34 w41) fn(tup(w152 tup(tup(82 tup(97 tup(116 tup(105 tup(110 tup(103 tup(115 tup(58 tup(32 w153))))))))) w154)) _))
}

::day_10::main::4 {
  x(_ x(x(dup51(w0 w2) w3) x(x(w19 w19) x(x(w17 w17) x(_ x(_ x(_ x(_ x(_ x(_ x(_ x(_ tup(w5 1)))))))))))))
  ::std::numeric::N32::add::add = fn(w2 fn(1 w3))
  ::day_10::set = fn(w0 w5)
}

::day_10::main::5 {
  x(dup56(w0 w66) x(x(w36 w36) x(w34 x(w32 x(w30 x(w29 x(w28 x(w27 x(w26 x(w25 x(w24 x(w23 w71))))))))))))
  ::std::unicode::Char::sub_n32::sub = fn(w0 fn(1 w1))
  ::day_10::main::6 = x(x(w1 w44) x(x(0 w42) x(x(0 w40) fn(w30 fn(w29 _)))))
  ::day_10::main::6 = x(x(w44 w51) x(x(w42 w49) x(x(w40 w47) fn(w28 fn(w27 _)))))
  ::day_10::main::6 = x(x(w51 w58) x(x(w49 w56) x(x(w47 w54) fn(w26 fn(w25 _)))))
  ::day_10::main::6 = x(x(w58 _) x(x(w56 w63) x(x(w54 w61) fn(w24 fn(w23 _)))))
  ::std::unicode::Char::eq::eq = fn(ref(w66 _) fn(ref(57 _) ?(::day_10::main::12 ::day_10::main::11 x(w34 x(w32 x(w63 x(w61 w71)))))))
}

::day_10::main::6 {
  x(x(w13 w18) x(w11 x(w9 fn(w0 fn(tup(w1 w2) w21)))))
  ::std::unicode::Char::eq::eq = fn(ref(w0 _) fn(ref(w13 w18) ?(::day_10::main::9 ::day_10::main::8 x(w11 x(w9 x(w1 x(w2 w21)))))))
}

::day_10::main::8 {
  x(x(w12 w2) x(x(w10 w5) x(w8 x(w7 _))))
  ::std::ops::vectorized::or::or::1 = fn(w12 fn(w8 w2))
  ::std::numeric::N32::add::add = fn(w10 fn(w7 w5))
}

::day_10::main::9 { x(x(w6 w6) x(x(w4 w4) _)) }

::day_10::main::11 {
  x(x(w13 w3) x(x(w11 w6) x(w9 x(w8 _))))
  ::day_10::count = fn(w9 w1)
  ::std::numeric::N32::add::add = fn(w13 fn(w1 w3))
  ::std::numeric::N32::add::add = fn(w11 fn(w8 w6))
}

::day_10::main::12 { x(x(w9 w9) x(x(w7 w7) x(w5 x(w4 tup(w5 w4))))) }

::std::unicode::Char::eq::eq { fn(ref(dup123(w0 @eq(w10 out)) w0) fn(ref(dup124(w3 w10) w3) out)) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::unicode::Char::sub_n32::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::ops::vectorized::or::or::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::ops::vectorized::or::or::2 = fn(w0 fn(w3 w10))
  ::std::ops::vectorized::or::or::2 = fn(w1 fn(w4 w13))
}

::std::ops::vectorized::or::or::2 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::ops::vectorized::or::or::3 = fn(w0 fn(w3 w10))
  ::std::ops::vectorized::or::or::3 = fn(w1 fn(w4 w13))
}

::std::ops::vectorized::or::or::3 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::or::or = fn(w0 fn(w3 w10))
  ::std::numeric::N32::or::or = fn(w1 fn(w4 w13))
}

::std::numeric::N32::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup171(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup177(w0 @ne(w10 out)) w0) fn(ref(dup178(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::day_10::set {
  fn(dup204(w3 dup204(w6 dup204(w11 w17))) w23)
  ::std::numeric::N32::shl::shl = fn(1 fn(w3 w4))
  ::std::numeric::N32::and::and = fn(w6 fn(32 w7))
  ::day_10::set::f = fn(w7 fn(w4 fn(0 w9)))
  ::std::numeric::N32::and::and = fn(w11 fn(64 w12))
  ::day_10::set::f = fn(w12 fn(w9 fn(0 w15)))
  ::std::numeric::N32::and::and = fn(w17 fn(128 w18))
  ::day_10::set::f = fn(w18 fn(w15 fn(0 w23)))
}

::std::numeric::N32::shl::shl { fn(@n32_shl(w1 out) fn(w1 out)) }

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::day_10::set::f {
  fn(w0 fn(w1 fn(w2 w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 _) fn(ref(0 _) ?(::day_10::set::f::3 ::day_10::set::f::2 x(w1 x(w2 w12)))))
}

::day_10::set::f::2 { x(w5 x(w4 tup(w5 w4))) }

::day_10::set::f::3 { x(w5 x(w4 tup(w4 w5))) }

::std::numeric::N32::eq::eq { fn(ref(dup231(w0 @eq(w10 out)) w0) fn(ref(dup232(w3 w10) w3) out)) }

::day_10::count {
  fn(tup(w4 w5) w13)
  ::std::numeric::N32::add::add = fn(w9 fn(w12 w13))
  ::day_10::count::6 = fn(w4 w9)
  ::day_10::count::6 = fn(w5 w12)
}

::day_10::count::1 {
  fn(w0 w7)
  ::day_10::count::2 = x(w0 x(0 w7))
}

::day_10::count::2 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::day_10::count::4 ::day_10::count::3 x(w1 w6))))
}

::day_10::count::3 {
  x(dup251(w0 w4) x(w7 w10))
  ::std::numeric::N32::and::and = fn(w0 fn(1 w1))
  ::std::numeric::N32::add::add = fn(w7 fn(w1 w3))
  ::std::numeric::N32::shr::shr = fn(w4 fn(1 w5))
  ::day_10::count::2 = x(w5 x(w3 w10))
}

::day_10::count::4 { x(_ x(w1 w1)) }

::day_10::count::5 {
  fn(tup(w0 w1) w11)
  ::std::numeric::N32::add::add = fn(w7 fn(w10 w11))
  ::day_10::count::1 = fn(w0 w7)
  ::day_10::count::1 = fn(w1 w10)
}

::day_10::count::6 {
  fn(tup(w0 w1) w11)
  ::std::numeric::N32::add::add = fn(w7 fn(w10 w11))
  ::day_10::count::5 = fn(w0 w7)
  ::day_10::count::5 = fn(w1 w10)
}

::std::numeric::N32::shr::shr { fn(@n32_shr(w1 out) fn(w1 out)) }

::day_10::Channel::send { fn(tup(w0 w3) fn(w3 w0)) }

::day_10::cross {
  fn(w0 fn(w1 fn(dup309(w18 dup309(w30 w23)) fn(ref(w4 w29) _))))
  ::std::data::List::get = fn(ref(w0 w9) fn(0 w12))
  ::std::data::List::len = fn(w12 w15)
  ::day_10::neglect_channel = fn(w18 w19)
  ::std::data::List::new = fn(w15 fn(w19 w20))
  ::day_10::cross::1 = x(w9 x(w1 x(w30 x(x(w4 w29) x(w20 w27)))))
  ::day_10::drop_all = fn(w27 fn(w23 _))
}

::day_10::cross::1 {
  x(w11 w10)
  ::std::data::List::pop_front = fn(ref(w11 w1) enum(::day_10::cross::4 enum(::day_10::cross::5 x(w1 w10))))
}

::day_10::cross::4 {
  enum(w0 x(w8 x(dup327(w32 w38) x(dup328(w9 dup328(w14 w37)) x(x(w5 w36) x(w3 w34))))))
  ::day_10::neglect_channel = fn(w9 w10)
  ::std::data::List::iter = fn(ref(w3 w17) w19)
  ::day_10::cross::7 = x(w32 x(x(w5 w31) x(w0 x(x(w10 w28) x(w19 w26)))))
  ::std::data::List::Iter::drop = fn(ref(w26 _) _)
  ::day_10::Channel::send = fn(w28 fn(w14 _))
  ::day_10::cross::1 = x(w8 x(w38 x(w37 x(x(w31 w36) x(w17 w34)))))
}

::day_10::cross::5 { x(_ x(_ x(_ x(x(w3 w3) x(w1 w1))))) }

::day_10::cross::7 {
  x(w12 x(w11 x(w9 w8)))
  ::std::data::List::pop_front = fn(ref(w9 w1) enum(::day_10::cross::10 enum(::day_10::cross::11 x(w12 x(w11 x(w1 w8))))))
}

::day_10::cross::10 {
  enum(w0 x(dup354(fn(w0 fn(tup(w23 tup(w24 tup(w15 w14))) fn(ref(w8 w34) _))) w44) x(x(w8 w43) x(w6 x(x(w5 w40) x(w3 w38))))))
  ::day_10::foo_channel = fn(ref(w5 w11) tup(w14 w15))
  ::std::data::List::Iter::next = fn(ref(w3 w18) w20)
  ::std::logical::Option::unwrap = fn(w20 w21)
  ::day_10::foo_channel = fn(w21 tup(w23 w24))
  ::day_10::cross::7 = x(w44 x(x(w34 w43) x(w6 x(x(w11 w40) x(w18 w38)))))
}

::day_10::cross::11 { x(_ x(x(w6 w6) x(_ x(x(w3 w3) x(w1 w1))))) }

::day_10::drop_all {
  fn(w0 fn(w1 _))
  ::day_10::drop_all::1 = x(w0 w1)
}

::day_10::drop_all::1 {
  x(w6 w5)
  ::std::data::List::pop_front = fn(ref(w6 w1) enum(::day_10::drop_all::4 enum(_ x(w1 w5))))
}

::day_10::drop_all::4 {
  enum(w0 x(w3 dup383(w5 w7)))
  ::day_10::Channel::send = fn(w0 fn(w5 _))
  ::day_10::drop_all::1 = x(w3 w7)
}

::day_10::foo_channel {
  fn(ref(w1 w8) tup(w1 w9))
  ::day_10::new_channel = tup(w8 w9)
}

::day_10::new_channel { tup(tup(dup393(_ w4) w6) tup(dup394(_ w6) w4)) }

::day_10::neglect_channel { fn(w0 tup(w0 _)) }

::std::data::List::len { fn(ref(tup(dup402(w11 w7) w8) tup(w7 w8)) w11) }

::std::data::List::new {
  fn(w0 fn(w1 w10))
  ::std::data::List::new::1 = x(w0 x(w1 x(tup(0 tup(w8 w8)) w10)))
}

::std::data::List::new::1 {
  x(w8 w7)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w8 w1) fn(ref(0 _) ?(::std::data::List::new::3 ::std::data::List::new::2 x(w1 w7))))
}

::std::data::List::new::2 {
  x(w10 x(dup420(w3 w13) x(w8 w12)))
  ::std::data::List::push_back = fn(ref(w8 w1) fn(w3 _))
  ::std::numeric::N32::sub::sub = fn(w10 fn(1 w6))
  ::std::data::List::new::1 = x(w6 x(w13 x(w1 w12)))
}

::std::data::List::new::3 { x(_ x(_ x(w1 w1))) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup431(w0 @lt(w10 out)) w0) fn(ref(dup432(w3 w10) w3) out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup490(w0 @le(w10 out)) w0) fn(ref(dup491(w3 w10) w3) out)) }

::std::data::List::map {
  fn(tup(dup494(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup514(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::iter { fn(ref(tup(dup668(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::eq::ne { fn(ref(dup2482(w0 @ne(w10 out)) w0) fn(ref(dup2483(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2529(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 {
  x(w26 x(dup2562(w1 w46) x(w24 x(w23 x(x(w22 w43) w41)))))
  ::std::unicode::String::split_once = fn(w26 fn(w1 tup(w3 enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(w46 x(w35 x(w44 x(x(w38 w43) w41)))))))))
  ::std::unicode::String::len = fn(ref(w3 w7) w9)
  ::std::numeric::N32::eq::eq = fn(ref(w9 _) fn(ref(0 _) dup2573(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(w23 dup2566(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(w24 w35) x(w33 x(w7 _)))) w44))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(w38 dup2568(w22 w33))))))
}

::std::unicode::String::split_trim::3 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(w4 w4) _) }

::std::unicode::String::split_trim::10 { x(w5 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(w5 w2)) w2)) }

::std::unicode::String::split_trim::11 { x(x(w3 w3) _) }

::std::unicode::String::split_trim::12 {
  x(x(w7 w3) x(w5 _))
  ::std::data::List::concat::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::unicode::String::split_trim::15 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 {
  enum(w0 w7)
  ::std::unicode::String::split_trim::1 = x(w0 w7)
}

::std::unicode::String::split_trim::24 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w19) x(w7 w15))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w11) fn(ref(0 _) ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w19) x(w7 x(w11 w15))))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 { x(x(w7 w7) x(w5 x(_ w5))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

