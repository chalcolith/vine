
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_09::main }

::day_09::main {
  fn(ref(w1 w20) _)
  ::std::IO::read_line = fn(ref(w1 w6) w8)
  ::std::logical::Option::unwrap = fn(w8 dup5(w15 w23))
  ::day_09::part1 = fn(w15 w16)
  ::std::numeric::N64::to_string::to_string = fn(w16 tup(@n32_add(8 w28) tup(w29 w30)))
  ::std::IO::println = fn(ref(w6 w12) fn(tup(w28 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w29)))))))) w30)) _))
  ::day_09::part2 = fn(w23 w24)
  ::std::numeric::N64::to_string::to_string = fn(w24 tup(@n32_add(8 w33) tup(w34 w35)))
  ::std::IO::println = fn(ref(w12 w20) fn(tup(w33 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w34)))))))) w35)) _))
}

::std::numeric::N64::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N64::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::3 ::std::numeric::N64::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N64::to_string::to_string::2 {
  x(w4 w9)
  ::std::numeric::N64::to_string::to_string::4 = x(w4 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N64::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N64::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N64::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N64::to_string::to_string::6 ::std::numeric::N64::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N64::to_string::to_string::5 {
  x(w16 x(w15 w19))
  ::std::numeric::N64::div_rem_n32 = fn(w16 fn(10 tup(w2 w3)))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w3 w6))
  ::std::unicode::String::from_chars::cast = fn(tup(1 tup(tup(w6 w17) w17)) w8)
  ::std::data::List::concat::concat = fn(w8 fn(w15 w10))
  ::std::numeric::N64::to_string::to_string::4 = x(w2 x(w10 w19))
}

::std::numeric::N64::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N64::eq::ne {
  fn(ref(tup(w1 w3) tup(w19 w29)) fn(ref(tup(w8 w10) tup(w22 w27)) w25))
  ::std::numeric::N32::eq::ne = fn(ref(w1 w19) fn(ref(w8 w22) ?(::std::numeric::N64::eq::ne::3 ::std::numeric::N64::eq::ne::2 x(x(w3 w29) x(x(w10 w27) w25)))))
}

::std::numeric::N64::eq::ne::2 { x(x(w4 w4) x(x(w2 w2) 1)) }

::std::numeric::N64::eq::ne::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::numeric::N32::eq::ne = fn(ref(w11 w1) fn(ref(w9 w4) ?(0 1 w12)))
}

::std::numeric::N32::eq::ne { fn(ref(dup52(w0 @n32_ne(w10 out)) w0) fn(ref(dup53(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::day_09::part1 {
  fn(w0 w28)
  ::day_09::part1::1 = x(w0 x(x(tup(0 tup(w15 w15)) w23) x(x(tup(0 tup(w16 w16)) w21) x(x(0 w19) 0))))
  ::day_09::part1::7 = x(w23 x(w21 x(x(0 w28) x(0 w19))))
}

::day_09::part1::1 {
  x(w14 w13)
  ::std::data::List::pop_front = fn(ref(w14 w2) enum(::day_09::part1::4 enum(::day_09::part1::5 x(w2 w13))))
}

::day_09::part1::4 {
  enum(w0 x(w9 x(x(w8 w48) x(x(w6 w46) x(x(w4 w44) dup116(w25 dup116(w33 w40)))))))
  ::std::unicode::Char::sub_char::sub = fn(w0 fn(48 dup119(w26 dup119(w34 w37))))
  ::std::data::List::pop_front = fn(ref(w9 w15) w18)
  ::std::logical::Option::unwrap_or = fn(w18 fn(48 w19))
  ::std::unicode::Char::sub_char::sub = fn(w19 fn(48 w20))
  ::std::data::List::push_back = fn(ref(w8 w23) fn(tup(w25 tup(w26 w20)) _))
  ::std::data::List::push_front = fn(ref(w6 w31) fn(tup(w33 w34) _))
  ::std::numeric::N32::add::add = fn(w4 fn(w37 w39))
  ::std::numeric::N32::add::add = fn(w40 fn(1 w41))
  ::day_09::part1::1 = x(w15 x(x(w23 w48) x(x(w31 w46) x(x(w39 w44) w41))))
}

::day_09::part1::5 { x(_ x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _)))) }

::day_09::part1::6 {
  x(x(w29 w21) x(x(dup128(w4 dup128(w14 w16)) w23) fn(w0 fn(w1 _))))
  ::std::numeric::N32::add::add = fn(w4 fn(w1 dup131(w10 dup131(w12 w23))))
  ::std::numeric::N32::sub::sub = fn(w10 fn(1 w11))
  ::std::numeric::N32::mul::mul = fn(w11 fn(w12 w13))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w15))
  ::std::numeric::N32::mul::mul = fn(w15 fn(w16 w17))
  ::std::numeric::N32::sub::sub = fn(w13 fn(w17 w18))
  ::std::numeric::N32::div::div = fn(w18 fn(2 w19))
  ::std::numeric::N64::mul_n32_n32 = fn(w0 fn(w19 w20))
  ::std::numeric::N64::add::add = fn(w29 fn(w20 w21))
}

::day_09::part1::7 {
  x(w10 x(w9 x(w8 x(w6 w5))))
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::day_09::part1::9 ::day_09::part1::8 x(w10 x(w9 x(w8 x(w6 w1)))))))
}

::day_09::part1::8 {
  x(w32 x(w31 x(x(w30 w48) x(w28 dup152(w10 w18)))))
  ::std::data::List::pop_front = fn(ref(w32 w1) w3)
  ::std::logical::Option::unwrap = fn(w3 tup(w5 tup(w6 w7)))
  ::std::numeric::N32::min = fn(w6 fn(w10 dup158(w15 w17)))
  ::day_09::part1::6 = x(x(w30 w37) x(x(w28 w35) fn(w5 fn(w15 _))))
  ::std::numeric::N32::sub::sub = fn(w18 fn(w17 dup153(w21 w25)))
  ::std::numeric::N32::min = fn(w7 fn(w21 dup159(w24 w38)))
  ::std::numeric::N32::sub::sub = fn(w25 fn(w24 w26))
  ::day_09::part1::10 = x(x(w31 w44) x(x(w37 w42) x(x(w35 w40) w38)))
  ::day_09::part1::7 = x(w1 x(w44 x(x(w42 w48) x(w40 w26))))
}

::day_09::part1::9 { x(_ x(_ x(x(w3 w3) _))) }

::day_09::part1::10 {
  x(w11 x(w9 x(w7 w5)))
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::day_09::part1::12 ::day_09::part1::11 x(w11 x(w9 x(w7 w1))))))
}

::day_09::part1::11 {
  x(x(w32 w52) x(x(w30 w50) x(x(w28 w48) dup180(w12 w24))))
  ::std::data::List::get = fn(ref(w32 w1) fn(0 ref(tup(dup182(w4 w20) dup184(w11 w16)) tup(w4 w34))))
  ::std::numeric::N32::min = fn(w11 fn(w12 dup186(w15 dup186(w21 w23))))
  ::std::numeric::N32::sub::sub = fn(w16 fn(w15 w17))
  ::std::numeric::N32::eq::eq = fn(ref(w17 w34) fn(ref(0 _) ?(::day_09::part1::15 ::day_09::part1::14 x(x(w1 w40) _))))
  ::day_09::part1::6 = x(x(w30 w45) x(x(w28 w43) fn(w20 fn(w21 _))))
  ::std::numeric::N32::sub::sub = fn(w24 fn(w23 w25))
  ::day_09::part1::10 = x(x(w40 w52) x(x(w45 w50) x(x(w43 w48) w25)))
}

::day_09::part1::12 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_09::part1::14 {
  x(x(w6 w1) _)
  ::std::data::List::pop_front = fn(ref(w6 w1) _)
}

::day_09::part1::15 { x(x(w2 w2) _) }

::std::unicode::Char::sub_char::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N64::add::add { fn(tup(dup(@n32_add(bl0 l) @n32_add_high(bl1 c)) @n32_add(bh @n32_add(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::eq { fn(ref(dup216(w0 @n32_eq(w10 out)) w0) fn(ref(dup217(w3 w10) w3) out)) }

::day_09::part2 {
  fn(w0 w22)
  ::day_09::part2::1 = x(w0 x(x(tup(0 tup(w12 w12)) w19) x(x(tup(0 tup(w13 w13)) w17) 0)))
  ::day_09::part2::6 = x(w19 x(w17 x(0 w22)))
}

::day_09::part2::1 {
  x(w13 w12)
  ::std::data::List::pop_front = fn(ref(w13 w2) enum(::day_09::part2::4 enum(::day_09::part2::5 x(w2 w12))))
}

::day_09::part2::4 {
  enum(w0 x(w8 x(x(w7 w51) x(x(w5 w49) x(dup248(w26 w29) dup250(w24 w44))))))
  ::std::unicode::Char::sub_char::sub = fn(w0 fn(48 dup253(w25 w30)))
  ::std::data::List::pop_front = fn(ref(w8 w14) w17)
  ::std::logical::Option::unwrap_or = fn(w17 fn(48 w18))
  ::std::unicode::Char::sub_char::sub = fn(w18 fn(48 dup254(w37 w41)))
  ::std::data::List::push_front = fn(ref(w5 w22) fn(tup(w24 tup(w25 w26)) _))
  ::std::numeric::N32::add::add = fn(w29 fn(w30 dup255(w36 w40)))
  ::std::data::List::push_back = fn(ref(w7 w34) fn(tup(w36 w37) _))
  ::std::numeric::N32::add::add = fn(w40 fn(w41 w42))
  ::std::numeric::N32::add::add = fn(w44 fn(1 w45))
  ::day_09::part2::1 = x(w14 x(x(w34 w51) x(x(w22 w49) x(w42 w45))))
}

::day_09::part2::5 { x(_ x(x(w5 w5) x(x(w3 w3) _))) }

::day_09::part2::6 {
  x(w8 x(w7 w6))
  ::std::data::List::pop_front = fn(ref(w7 w1) enum(::day_09::part2::9 enum(::day_09::part2::10 x(w8 x(w1 w6)))))
}

::day_09::part2::9 {
  enum(tup(w2 tup(w3 dup274(w17 w46))) x(w11 x(w10 x(w9 w50))))
  ::std::data::List::iter = fn(ref(w11 w13) w15)
  ::day_09::part2::11 = x(x(w3 w48) x(w46 x(x(w15 w45) x(w17 dup277(w23 dup277(w33 w35))))))
  ::std::data::List::Iter::drop = fn(ref(w45 _) _)
  ::std::numeric::N32::add::add = fn(w23 fn(w48 dup279(w29 w31)))
  ::std::numeric::N32::sub::sub = fn(w29 fn(1 w30))
  ::std::numeric::N32::mul::mul = fn(w30 fn(w31 w32))
  ::std::numeric::N32::sub::sub = fn(w33 fn(1 w34))
  ::std::numeric::N32::mul::mul = fn(w34 fn(w35 w36))
  ::std::numeric::N32::sub::sub = fn(w32 fn(w36 w37))
  ::std::numeric::N32::div::div = fn(w37 fn(2 w38))
  ::std::numeric::N64::mul_n32_n32 = fn(w2 fn(w38 w39))
  ::std::numeric::N64::add::add = fn(w9 fn(w39 w40))
  ::day_09::part2::6 = x(w13 x(w10 x(w40 w50)))
}

::day_09::part2::10 { x(_ x(_ x(w1 w1))) }

::day_09::part2::11 {
  x(w11 x(w9 x(x(w8 w15) w6)))
  ::std::data::List::Iter::next = fn(ref(w8 w1) enum(::day_09::part2::14 enum(::day_09::part2::15 x(w11 x(w9 x(x(w1 w15) w6))))))
}

::day_09::part2::14 {
  enum(ref(tup(w7 w9) tup(w33 w31)) x(w20 x(w18 x(w17 w15))))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w7 w24) fn(ref(w18 w27) ?(::day_09::part2::18 ::day_09::part2::17 x(w20 x(w27 x(w17 x(w15 x(x(w24 w33) x(w9 w31)))))))))
}

::day_09::part2::15 { x(x(w6 w6) x(_ x(x(w3 w3) x(w1 w1)))) }

::day_09::part2::17 { x(x(w10 w10) x(_ x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1)))))) }

::day_09::part2::18 {
  x(x(w10 w30) x(w8 x(w7 x(w5 x(w3 x(w1 w21))))))
  ::std::numeric::N32::ord::le = fn(ref(w10 w14) fn(ref(w1 w17) ?(::day_09::part2::21 ::day_09::part2::20 x(x(w14 w30) x(w8 x(w7 x(w5 x(w3 x(w17 w21)))))))))
}

::day_09::part2::20 {
  x(x(dup335(w17 dup335(w2 w5)) w17) x(_ x(x(w15 w15) x(x(_ w0) x(x(dup339(w0 w6) w7) x(w9 w4))))))
  ::std::numeric::N32::sub::sub = fn(w9 fn(w2 w4))
  ::std::numeric::N32::add::add = fn(w6 fn(w5 w7))
}

::day_09::part2::21 {
  x(w10 x(w8 x(w7 x(w5 x(x(w3 w3) x(w1 w1))))))
  ::day_09::part2::11 = x(w10 x(w8 x(w7 w5)))
}

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::lt { fn(ref(dup357(w0 @n32_lt(w10 out)) w0) fn(ref(dup358(w3 w10) w3) out)) }

::std::numeric::N32::ord::le { fn(ref(dup361(w0 @n32_le(w10 out)) w0) fn(ref(dup362(w3 w10) w3) out)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::push_front {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w3 w12) w12)) fn(w1 w9))
}

::std::data::List::iter { fn(ref(tup(dup609(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8))) fn(w1 w8)) }

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::numeric::N32::min {
  fn(w0 fn(w1 w13))
  ::std::numeric::N32::ord::lt = fn(ref(w0 w7) fn(ref(w1 w10) ?(::std::numeric::N32::min::3 ::std::numeric::N32::min::2 x(w7 x(w10 w13)))))
}

::std::numeric::N32::min::2 { x(w3 x(_ w3)) }

::std::numeric::N32::min::3 { x(_ x(w2 w2)) }

::std::numeric::N64::sub::sub { fn(tup(dup(@n32_sub(bl0 l) @n32_lt(bl1 c)) @n32_sub(bh @n32_sub(c h))) fn(tup(dup(bl0 bl1) bh) tup(l h))) }

::std::numeric::N64::mul_n32_n32 { fn(dup(@n32_mul(b0 l) @n32_mul_high(b1 h)) fn(dup(b0 b1) tup(l h))) }

::std::numeric::N64::div_rem_n32 {
  fn(tup(w0 dup2020(w6 w11)) fn(dup2025(w7 dup2025(w10 w32)) tup(tup(w19 w38) w22)))
  ::std::numeric::N32::div::div = fn(w6 fn(w7 w8))
  ::std::numeric::N32::rem::rem = fn(w11 fn(w10 w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w12 w30) fn(ref(w32 dup2024(w39 dup2024(w44 dup2024(w16 w20)))) ?(::std::numeric::N64::div_rem_n32::3 ::std::numeric::N64::div_rem_n32::2 x(x(w30 w41) x(w39 x(x(w8 w38) _))))))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w0 dup2019(w15 w21)) x(w41 x(w44 x(0 w43))))
  ::std::numeric::N32::div::div = fn(w15 fn(w16 w17))
  ::std::numeric::N32::add::add = fn(w43 fn(w17 w19))
  ::std::numeric::N32::rem::rem = fn(w21 fn(w20 w22))
}

::std::numeric::N64::div_rem_n32::2 {
  x(x(dup2035(w0 w5) w6) x(dup2036(w1 w4) x(x(_ w2) _)))
  ::std::numeric::N32::div::div = fn(w0 fn(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w5 fn(w4 w6))
}

::std::numeric::N64::div_rem_n32::3 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::numeric::N64::div_rem_n32::4 {
  x(w10 x(w8 w7))
  ::std::numeric::N32::eq::ne = fn(ref(w8 w1) fn(ref(0 _) ?(::std::numeric::N64::div_rem_n32::6 ::std::numeric::N64::div_rem_n32::5 x(w10 x(w1 w7)))))
}

::std::numeric::N64::div_rem_n32::5 {
  x(x(w27 w33) x(dup2051(w2 w9) x(dup2053(w0 dup2053(w12 w30)) x(w23 w29))))
  ::std::numeric::N32::div::div = fn(4294967295 fn(w0 w1))
  ::std::numeric::N32::mul::mul = fn(w1 fn(w2 dup2057(w5 w11)))
  ::std::numeric::N32::add::add = fn(w23 fn(w5 w7))
  ::std::numeric::N64::mul_n32_n32 = fn(w11 fn(w12 w13))
  ::std::numeric::N64::sub::sub = fn(tup(w27 w9) fn(w13 tup(w15 w16)))
  ::std::numeric::N64::div_rem_n32::4 = x(x(w15 w33) x(w16 x(w30 x(w7 w29))))
}

::std::numeric::N64::div_rem_n32::6 { x(x(w5 w5) x(_ x(_ x(w1 w1)))) }

::std::unicode::Char::eq::eq { fn(ref(dup2404(w0 @n32_eq(w10 out)) w0) fn(ref(dup2405(w3 w10) w3) out)) }

::std::unicode::Char::eq::ne { fn(ref(dup2408(w0 @n32_ne(w10 out)) w0) fn(ref(dup2409(w3 w10) w3) out)) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

