
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::day_06::main }

::day_06::main {
  fn(ref(w1 w52) _)
  ::std::IO::full_input = fn(ref(w1 w6) w8)
  ::std::unicode::String::split_trim = fn(w8 fn(tup(1 tup(tup(10 w61) w61)) w12))
  ::std::data::List::iter = fn(ref(w12 w17) w19)
  ::day_06::main::1 = x(x(_ dup10(w29 w84)) x(0 w19))
  ::std::data::List::map = fn(w17 fn(::std::data::Array::from_list::cast w23))
  ::std::data::Array::from_list::cast = fn(w23 w24)
  ::day_06::walk = fn(ref(w24 w27) fn(w29 tup(_ w31)))
  ::std::numeric::N32::to_string::to_string = fn(w31 tup(@n32_add(8 w73) tup(w74 w75)))
  ::std::IO::println = fn(ref(w6 w34) fn(tup(w73 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w74)))))))) w75)) _))
  ::day_06::clear = fn(ref(w27 w43) fn(ref(tup(0 tup(w78 w78)) w46) _))
  ::day_06::main::15 = x(x(w34 w86) x(w84 x(w43 x(w46 x(0 x(0 w80))))))
  ::std::numeric::N32::to_string::to_string = fn(w80 tup(@n32_add(8 w87) tup(w88 w89)))
  ::std::IO::println = fn(ref(w86 w52) fn(tup(w87 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w88)))))))) w89)) _))
}

::day_06::main::1 {
  x(w8 x(w6 w5))
  ::std::data::List::Iter::next = fn(ref(w5 w1) enum(::day_06::main::4 enum(::day_06::main::5 x(w8 x(w6 w1)))))
}

::day_06::main::4 {
  enum(w2 x(x(w7 w26) x(dup36(w20 w16) w4)))
  ::std::data::List::iter = fn(w2 w14)
  ::day_06::main::6 = x(x(w7 w22) x(w20 x(0 w14)))
  ::std::numeric::N32::add::add = fn(w16 fn(1 w17))
  ::day_06::main::1 = x(x(w22 w26) x(w17 w4))
}

::day_06::main::5 { x(x(w3 w3) _) }

::day_06::main::6 {
  x(w9 x(w7 x(w6 w5)))
  ::std::data::List::Iter::next = fn(ref(w5 w1) enum(::day_06::main::9 enum(::day_06::main::10 x(w9 x(w7 x(w6 w1))))))
}

::day_06::main::9 {
  enum(ref(w2 w19) x(x(w8 w28) x(dup55(w21 w26) x(dup56(w20 w10) w4))))
  ::std::unicode::Char::eq::eq = fn(ref(w2 w13) fn(ref(94 _) ?(::day_06::main::13 ::day_06::main::12 x(x(w8 w23) x(w21 x(w20 x(x(w13 w19) _)))))))
  ::std::numeric::N32::add::add = fn(w10 fn(1 w11))
  ::day_06::main::6 = x(x(w23 w28) x(w26 x(w11 w4)))
}

::day_06::main::10 { x(x(w4 w4) _) }

::day_06::main::12 { x(x(_ tup(w8 w9)) x(w9 x(w8 x(x(_ 88) _)))) }

::day_06::main::13 { x(x(w6 w6) x(_ x(_ x(x(w2 w2) _)))) }

::day_06::main::15 {
  x(w12 x(w10 x(w9 x(w8 w7))))
  ::std::data::List::pop_front = fn(ref(w8 w1) enum(::day_06::main::18 enum(::day_06::main::19 x(w12 x(w10 x(w9 x(w1 w7)))))))
}

::day_06::main::18 {
  enum(tup(w2 w3) x(x(w13 w65) x(dup85(w31 w63) x(dup86(w14 w62) x(w9 x(w8 x(w7 w59)))))))
  ::std::data::Array::get = fn(ref(w14 w17) fn(w3 w21))
  ::std::data::Array::get = fn(w21 fn(w2 ref(_ 35)))
  ::day_06::walk = fn(ref(w17 _) fn(w31 tup(?(::day_06::main::22 ::day_06::main::21 x(x(w7 dup92(w44 w58)) _)) _)))
  ::std::numeric::N32::add::add = fn(w8 fn(1 dup89(w42 w60)))
  ::std::numeric::N32::to_string::to_string = fn(w42 tup(@n32_add(1 w54) tup(w52 tup(32 w55))))
  ::std::numeric::N32::to_string::to_string = fn(w44 tup(@n32_add(w54 w51) tup(w55 w53)))
  ::std::IO::println = fn(ref(w13 w39) fn(tup(w51 tup(w52 w53)) _))
  ::day_06::main::15 = x(x(w39 w65) x(w63 x(w62 x(w9 x(w60 x(w58 w59))))))
}

::day_06::main::19 { x(x(w7 w7) x(_ x(_ x(_ x(_ x(w1 w1)))))) }

::day_06::main::21 {
  x(x(w4 w1) _)
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_06::main::22 { x(x(w2 w2) _) }

::std::unicode::Char::eq::eq { fn(ref(dup108(w0 @n32_eq(w10 out)) w0) fn(ref(dup109(w3 w10) w3) out)) }

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::data::Array::from_list::cast {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup140(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup146(w0 @n32_ne(w10 out)) w0) fn(ref(dup147(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::day_06::clear {
  fn(ref(w1 w30) fn(ref(w4 w28) _))
  ::std::data::Array::len = fn(ref(w1 w9) w11)
  ::std::data::Array::get = fn(ref(w9 w14) fn(0 w17))
  ::std::data::Array::len = fn(w17 w20)
  ::day_06::clear::1 = x(x(w14 w30) x(x(w4 w28) x(w11 x(w20 0))))
}

::day_06::clear::1 {
  x(w13 x(w11 x(w9 x(w8 w7))))
  ::std::numeric::N32::ord::lt = fn(ref(w7 w1) fn(ref(w9 w4) ?(::day_06::clear::3 ::day_06::clear::2 x(w13 x(w11 x(w4 x(w8 w1)))))))
}

::day_06::clear::2 {
  x(x(w17 w32) x(x(w15 w30) x(w13 x(w12 dup201(w3 dup201(w21 w9))))))
  ::std::data::Array::get = fn(ref(w17 w1) fn(w3 ref(w6 w20)))
  ::day_06::clear::4 = x(x(w15 w25) x(x(w12 w23) x(w21 x(x(w6 w20) 0))))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w10))
  ::day_06::clear::1 = x(x(w1 w32) x(x(w25 w30) x(w13 x(w23 w10))))
}

::day_06::clear::3 { x(x(w6 w6) x(x(w4 w4) _)) }

::day_06::clear::4 {
  x(w14 x(x(w12 w20) x(w10 x(w9 w7))))
  ::std::numeric::N32::ord::lt = fn(ref(w7 w1) fn(ref(w12 w4) ?(::day_06::clear::6 ::day_06::clear::5 x(w14 x(x(w4 w20) x(w10 x(w9 w1)))))))
}

::day_06::clear::5 {
  x(x(w18 w38) x(w16 x(dup223(w28 w34) x(x(w13 w33) dup227(w3 dup227(w27 w9))))))
  ::std::data::Array::get = fn(ref(w13 w1) fn(w3 ref(w6 w26)))
  ::std::unicode::Char::eq::eq = fn(ref(w6 w20) fn(ref(88 _) ?(::day_06::clear::9 ::day_06::clear::8 x(x(w18 w30) x(w28 x(w27 x(x(w20 w26) _)))))))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w10))
  ::day_06::clear::4 = x(x(w30 w38) x(w16 x(w34 x(x(w1 w33) w10))))
}

::day_06::clear::6 { x(x(w7 w7) x(x(w5 w5) x(_ x(x(w2 w2) _)))) }

::day_06::clear::8 {
  x(x(w13 w5) x(w11 x(w10 x(x(_ 46) _))))
  ::std::data::List::concat::concat = fn(w13 fn(tup(1 tup(tup(tup(w10 w11) w14) w14)) w5))
}

::day_06::clear::9 { x(x(w6 w6) x(_ x(_ x(x(w2 w2) _)))) }

::std::numeric::N32::ord::lt { fn(ref(dup244(w0 @n32_lt(w10 out)) w0) fn(ref(dup245(w3 w10) w3) out)) }

::day_06::walk {
  fn(ref(w1 w36) fn(w3 w28))
  ::std::data::Array::len = fn(ref(w1 w7) w9)
  ::std::data::Array::get = fn(ref(w7 w12) fn(0 w15))
  ::std::data::Array::len = fn(w15 w18)
  ::std::numeric::N32::neg::neg = fn(1 w20)
  ::day_06::walk::1 = x(x(w12 w36) x(w3 x(w9 x(w18 x(tup(0 w20) x(1 x(0 w28)))))))
}

::day_06::walk::1 {
  x(w15 x(w13 x(w12 x(w11 x(w10 x(dup266(w3 w18) x(w8 w16)))))))
  ::std::numeric::N32::mul::mul = fn(3 fn(w3 w4))
  ::std::numeric::N32::ord::lt = fn(ref(w8 w1) fn(ref(w4 _) ?(::day_06::walk::3 ::day_06::walk::2 x(w15 x(w13 x(w12 x(w11 x(w10 x(w18 x(w1 w16))))))))))
}

::day_06::walk::2 {
  x(w35 x(dup272(w0 w52) x(w32 x(w31 x(dup276(w1 w49) x(w29 x(w28 w43)))))))
  ::std::ops::vectorized::add::add::1 = fn(w0 fn(w1 dup279(tup(w5 w6) w46)))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w5 w37) fn(ref(w31 w40) ?(::day_06::walk::6 ::day_06::walk::5 x(w35 x(w52 x(w32 x(w40 x(w49 x(w29 x(w28 x(w46 x(w37 x(w6 w43)))))))))))))
}

::day_06::walk::3 { x(x(w8 w8) x(_ x(_ x(_ x(_ x(w2 x(_ tup(1 w2)))))))) }

::day_06::walk::5 {
  x(x(w11 w11) x(_ x(_ x(_ x(_ x(w5 x(_ x(_ x(_ x(_ w12))))))))))
  ::day_06::walk::9 = x(w5 w12)
}

::day_06::walk::6 {
  x(w18 x(w16 x(w15 x(w14 x(w13 x(w12 x(w11 x(w10 x(w9 x(w8 w19))))))))))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w8 w1) fn(ref(w15 w4) ?(::day_06::walk::8 ::day_06::walk::7 x(w18 x(w16 x(w4 x(w14 x(w13 x(w12 x(w11 x(w10 x(w9 x(w1 w19)))))))))))))
}

::day_06::walk::7 {
  x(x(w11 w11) x(_ x(_ x(_ x(_ x(w5 x(_ x(_ x(_ x(_ w12))))))))))
  ::day_06::walk::9 = x(w5 w12)
}

::day_06::walk::8 {
  x(x(w11 w55) x(w9 x(w8 x(w7 x(w6 x(w5 x(w4 x(w3 x(w2 x(w1 w44))))))))))
  ::std::data::Array::get = fn(ref(w11 w22) fn(w1 w26))
  ::std::data::Array::get = fn(w26 fn(w2 ref(w32 w46)))
  ::std::unicode::Char::eq::eq = fn(ref(w32 w40) fn(ref(35 _) ?(::day_06::walk::12 ::day_06::walk::11 x(x(w22 w55) x(w9 x(w8 x(w7 x(w6 x(w5 x(w4 x(w3 x(x(w40 w46) w44))))))))))))
}

::day_06::walk::9 { x(w3 tup(0 w3)) }

::day_06::walk::11 {
  x(w20 x(w18 x(w17 x(w16 x(tup(w1 w2) x(w14 x(w13 x(_ x(x(w11 w11) w21)))))))))
  ::std::numeric::N32::neg::neg = fn(w2 w5)
  ::day_06::walk::1 = x(w20 x(w18 x(w17 x(w16 x(tup(w5 w1) x(w14 x(w13 w21)))))))
}

::day_06::walk::12 {
  x(w11 x(_ x(w8 x(w7 x(w6 x(w5 x(w4 x(w3 x(x(w2 88) w49)))))))))
  ::std::unicode::Char::eq::eq = fn(ref(w2 _) fn(ref(88 _) ?(::day_06::walk::15 ::day_06::walk::14 x(x(w5 w48) x(x(w4 w46) _)))))
  ::day_06::walk::1 = x(w11 x(w3 x(w8 x(w7 x(w6 x(w48 x(w46 w49)))))))
}

::day_06::walk::14 {
  x(x(w6 w6) x(x(w4 w1) _))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w1))
}

::day_06::walk::15 {
  x(x(w6 w1) x(x(w4 w4) _))
  ::std::numeric::N32::add::add = fn(w6 fn(1 w1))
}

::std::numeric::N32::neg::neg { fn(@n32_sub$(0 out) out) }

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::N32::add::add = fn(w1 fn(w4 w13))
}

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::numeric::N32::ord::le { fn(ref(dup380(w0 @n32_le(w10 out)) w0) fn(ref(dup381(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::data::List::map {
  fn(tup(dup462(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup482(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::iter { fn(ref(tup(dup636(w0 w10) tup(w3 w4)) tup(w0 tup(w12 w4))) tup(w10 ref(w3 w12))) }

::std::data::List::Iter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::Iter::next::3 ::std::data::List::Iter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::Iter::next::2 {
  x(x(w20 w1) x(x(ref(tup(w4 w7) tup(w5 w8)) ref(w7 w8)) enum(enum(ref(w4 w5) w21) enum(_ w21))))
  ::std::numeric::N32::sub::sub = fn(w20 fn(1 w1))
}

::std::data::List::Iter::next::3 { x(x(w8 w8) x(x(ref(w2 w2) _) ::std::logical::Option::None)) }

::std::data::List::Iter::drop { fn(ref(tup(_ ref(w7 w7)) _) _) }

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::from_fn {
  fn(w0 fn(ref(dup730(w1 w16) w1) fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w10 x(w16 x(w4 w14))))))
}

::std::data::Array::from_fn::2 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::from_fn::3 {
  x(dup736(w1 dup736(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::numeric::N32::eq::eq { fn(ref(dup751(w0 @n32_eq(w10 out)) w0) fn(ref(dup752(w3 w10) w3) out)) }

::std::data::Array::len { fn(ref(tup(dup808(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup813(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup828(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_front {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup875(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_front::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w7)
}

::std::data::Array::push_front::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(w7 w1))))
}

::std::data::Array::push_front::5 {
  x(x(ref(tup(w2 w4) tup(w15 w12)) w26) w21)
  tup(w4 w2) = tup(w11 w12)
  ::std::numeric::N32::div::div = fn(w21 fn(2 w19))
  ::std::data::Array::push_front::4 = x(x(ref(w11 w15) w26) w19)
}

::std::data::Array::push_front::6 { x(x(w2 w2) _) }

::std::data::Array::pop_back {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_back::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_back::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup927(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 {
  x(ref(w6 w28) x(dup933(w0 w11) w26))
  ::std::numeric::N32::sub::sub = fn(w0 fn(1 w1))
  ::std::numeric::N32::rem::rem = fn(w1 fn(2 dup936(w12 w29)))
  ::std::data::Array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 tup(w14 w15))))
  ::std::numeric::N32::eq::eq = fn(ref(w15 w22) fn(ref(1 _) ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(w14 x(w22 x(w29 x(x(w9 w28) w26)))))))
}

::std::data::Array::pop_back::8 {
  x(ref(w1 _) x(_ x(w16 x(x(tup(w6 w7) w24) enum(enum(w3 w27) enum(_ w27))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(w6 x(w7 w24)))))
}

::std::data::Array::pop_back::9 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::data::Array::pop_back::6 = x(w5 x(w4 w24))
}

::std::data::Array::pop_back::11 { x(_ x(w2 w2)) }

::std::data::Array::pop_back::12 { x(w3 x(_ w3)) }

::std::data::Array::pop_back::13 { x(w11 w11) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::data::Array::Node::unzip_with {
  fn(w0 fn(w1 fn(w2 w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w8) fn(ref(1 _) ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(w8 x(w1 x(w2 w12))))))
}

::std::data::Array::Node::unzip_with::2 {
  x(_ x(w14 x(fn(w2 tup(w4 w5)) tup(w8 w10))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w14 w2)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w4 w8)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w10)
}

::std::data::Array::Node::unzip_with::3 {
  x(dup1124(w4 w13) x(tup(w1 w2) x(dup1126(w8 w16) tup(tup(w10 w18) tup(w11 w19)))))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w5))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::unzip_with = fn(w6 fn(w1 fn(w8 tup(w10 w11))))
  ::std::numeric::N32::div::div = fn(w13 fn(2 w14))
  ::std::data::Array::Node::unzip_with = fn(w14 fn(w2 fn(w16 tup(w18 w19))))
}

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::unicode::Char::eq::ne { fn(ref(dup2453(w0 @n32_ne(w10 out)) w0) fn(ref(dup2454(w3 w10) w3) out)) }

::std::unicode::String::len { fn(ref(tup(dup2504(w0 w13) w2) tup(w0 w2)) w13) }

::std::unicode::String::split_trim {
  fn(w0 fn(w1 w11))
  ::std::unicode::String::split_trim::1 = x(w0 x(w1 x(tup(0 tup(w10 w10)) x(1 x(x(_ 1) w11)))))
}

::std::unicode::String::split_trim::1 {
  x(w26 x(dup2537(w1 w46) x(w24 x(w23 x(x(w22 w43) w41)))))
  ::std::unicode::String::split_once = fn(w26 fn(w1 tup(w3 enum(::std::unicode::String::split_trim::23 enum(::std::unicode::String::split_trim::24 x(w46 x(w35 x(w44 x(x(w38 w43) w41)))))))))
  ::std::unicode::String::len = fn(ref(w3 w7) w9)
  ::std::numeric::N32::eq::eq = fn(ref(w9 _) fn(ref(0 _) dup2548(?(::std::unicode::String::split_trim::4 ::std::unicode::String::split_trim::3 x(w23 dup2541(?(::std::unicode::String::split_trim::10 ::std::unicode::String::split_trim::9 x(x(w24 w35) x(w33 x(w7 _)))) w44))) ?(::std::unicode::String::split_trim::16 ::std::unicode::String::split_trim::15 x(w38 dup2543(w22 w33))))))
}

::std::unicode::String::split_trim::3 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::4 { x(_ 0) }

::std::unicode::String::split_trim::9 { x(x(w4 w4) _) }

::std::unicode::String::split_trim::10 { x(w5 x(?(::std::unicode::String::split_trim::12 ::std::unicode::String::split_trim::11 x(w5 w2)) w2)) }

::std::unicode::String::split_trim::11 { x(x(w3 w3) _) }

::std::unicode::String::split_trim::12 {
  x(x(w7 w3) x(w5 _))
  ::std::data::List::concat::concat = fn(w7 fn(tup(1 tup(tup(w5 w8) w8)) w3))
}

::std::unicode::String::split_trim::15 { x(?(0 1 w3) w3) }

::std::unicode::String::split_trim::16 { x(_ 0) }

::std::unicode::String::split_trim::23 {
  enum(w0 w7)
  ::std::unicode::String::split_trim::1 = x(w0 w7)
}

::std::unicode::String::split_trim::24 { x(_ x(w4 x(_ x(x(w2 w2) w4)))) }

::std::unicode::String::split_once {
  fn(w0 fn(w1 w16))
  ::std::unicode::String::split_once::1 = x(w1 x(tup(0 tup(w15 w15)) x(w0 w16)))
}

::std::unicode::String::split_once::1 {
  x(w14 x(w13 x(w12 w15)))
  ::std::unicode::String::len = fn(ref(w12 w1) w3)
  ::std::unicode::String::len = fn(ref(w14 w6) w8)
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w3 _) fn(ref(w8 _) ?(::std::unicode::String::split_once::3 ::std::unicode::String::split_once::2 x(w6 x(w13 x(w1 w15))))))
}

::std::unicode::String::split_once::2 {
  x(w27 x(w26 x(w25 w48)))
  ::std::data::List::iter = fn(ref(w27 w2) w5)
  ::std::data::List::iter = fn(ref(w25 w9) w12)
  ::std::unicode::String::split_once::5 = x(w2 x(w26 x(w9 x(w5 x(w12 w48)))))
}

::std::unicode::String::split_once::3 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::5 {
  x(w10 x(w9 x(w8 x(w7 w6))))
  ::std::data::List::Iter::next = fn(ref(w7 w1) enum(::std::unicode::String::split_once::8 enum(::std::unicode::String::split_once::9 x(w10 x(w9 x(w8 x(w1 w6)))))))
}

::std::unicode::String::split_once::8 {
  enum(ref(w2 w17) x(w9 x(w8 x(w7 x(w6 x(w5 w15))))))
  ::std::data::List::Iter::next = fn(ref(w5 w11) enum(::std::unicode::String::split_once::12 enum(::std::unicode::String::split_once::13 x(w9 x(w8 x(w7 x(w6 x(w11 x(x(w2 w17) w15)))))))))
}

::std::unicode::String::split_once::9 {
  x(_ x(w4 x(w3 x(_ w1))))
  ::std::unicode::String::split_once::14 = x(w4 x(w3 w1))
}

::std::unicode::String::split_once::12 {
  enum(w2 x(w11 x(w10 x(w9 x(w8 x(w7 x(x(w6 w14) w20)))))))
  ::std::unicode::Char::eq::ne = fn(ref(w6 w14) fn(w2 ?(::std::unicode::String::split_once::5 ::std::unicode::String::split_once::16 x(w11 x(w10 x(w9 x(w8 x(w7 w20))))))))
}

::std::unicode::String::split_once::13 {
  x(_ x(w6 x(w5 x(_ x(w3 x(x(w2 w2) w8))))))
  ::std::unicode::String::split_once::14 = x(w6 x(w5 x(w3 w8)))
}

::std::unicode::String::split_once::14 {
  x(w3 x(w2 x(tup(w6 ref(w8 _)) tup(w3 enum(enum(w21 w24) enum(_ w24))))))
  ::std::unicode::String::to_chars::cast = fn(w2 tup(_ tup(_ w13)))
  ::std::unicode::String::from_chars::cast = fn(tup(w6 tup(w8 w13)) w21)
}

::std::unicode::String::split_once::16 {
  x(w5 x(w4 x(w3 x(w2 x(w1 w37)))))
  ::std::data::List::Iter::drop = fn(ref(w2 _) _)
  ::std::data::List::Iter::drop = fn(ref(w1 _) _)
  ::std::data::List::pop_front = fn(ref(w3 w32) enum(::std::unicode::String::split_once::21 enum(::std::unicode::String::split_once::22 x(w5 x(w4 x(w32 w37))))))
}

::std::unicode::String::split_once::21 {
  enum(w0 x(w5 x(w4 w3)))
  ::std::data::List::concat::concat = fn(w4 fn(tup(1 tup(tup(w0 w12) w12)) w11))
  ::std::unicode::String::split_once::1 = x(w5 x(w11 w3))
}

::std::unicode::String::split_once::22 { x(_ ::std::unicode::String::split_once::23) }

::std::unicode::String::split_once::23 {
  x(w14 x(w13 tup(w10 ::std::logical::Option::None)))
  ::std::data::List::concat::concat = fn(w14 fn(w13 w10))
}

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::full_input {
  fn(ref(w1 w13) w10)
  ::std::IO::full_input::1 = x(x(w1 w13) x(tup(0 tup(w9 w9)) w10))
}

::std::IO::full_input::1 {
  x(x(w9 w19) x(w7 w15))
  ::std::IO::read_byte = fn(ref(w9 w1) fn(0 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w11) fn(ref(0 _) ?(::std::IO::full_input::4 ::std::IO::full_input::3 x(x(w1 w19) x(w7 x(w11 w15))))))
}

::std::IO::full_input::3 {
  x(w8 x(w6 x(w5 w16)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w5 w9) w9)) w3))
  ::std::IO::full_input::1 = x(w8 x(w3 w16))
}

::std::IO::full_input::4 { x(x(w7 w7) x(w5 x(_ w5))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

