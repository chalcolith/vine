
::std::logical::Option::None { enum(_ enum(r r)) }

::std::ops::comparison::Ord::Lt { enum(r enum(_ enum(_ r))) }

::std::ops::comparison::Ord::Eq { enum(_ enum(r enum(_ r))) }

::std::ops::comparison::Ord::Gt { enum(_ enum(_ enum(r r))) }

::main { ::day_16::main }

::day_16::main {
  fn(ref(w1 w34) _)
  ::day_16::main::1 = x(x(w1 w49) x(x(tup(0 tup(w41 w41)) w47) x(x(_ w45) x(_ w43))))
  ::std::data::Array::from_list::cast = fn(w47 w10)
  ::std::data::Map::insert::1 = fn(ref(::std::data::Map::empty w14) fn(0 fn(tup(1 tup(tup(tup(w45 0) w50) w50)) _)))
  ::day_16::main::26 = x(w43 x(x(w10 w58) x(w14 x(x(0 w55) x(x(0 w53) 0)))))
  ::std::data::Array::to_list::cast = fn(w58 ::day_16::main::57)
  ::std::numeric::N32::to_string::to_string = fn(w55 tup(@n32_add(8 w61) tup(w62 w63)))
  ::std::IO::println = fn(ref(w49 w27) fn(tup(w61 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(49 tup(58 tup(32 w62)))))))) w63)) _))
  ::std::numeric::N32::to_string::to_string = fn(w53 tup(@n32_add(8 w66) tup(w67 w68)))
  ::std::IO::println = fn(ref(w27 w34) fn(tup(w66 tup(tup(80 tup(97 tup(114 tup(116 tup(32 tup(50 tup(58 tup(32 w67)))))))) w68)) _))
}

::day_16::main::1 {
  x(x(w12 w20) w10)
  ::std::IO::read_line = fn(ref(w12 w1) enum(::day_16::main::4 enum(::day_16::main::5 x(x(w1 w20) w10))))
}

::day_16::main::4 {
  enum(w0 x(w9 x(x(w7 w33) x(x(w5 w31) x(w3 w29)))))
  ::day_16::main::6 = x(x(w7 w27) x(x(w5 w25) x(x(w3 w23) x(w0 x(tup(0 tup(w18 w18)) w20)))))
  ::std::data::Array::from_list::cast = fn(w20 w16)
  ::std::data::List::push_back = fn(ref(w27 w13) fn(w16 _))
  ::day_16::main::1 = x(w9 x(x(w13 w33) x(x(w25 w31) x(w23 w29))))
}

::day_16::main::5 { x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w1 w1)))) }

::day_16::main::6 {
  x(w15 x(w13 x(w11 x(w9 w8))))
  ::std::data::List::pop_front = fn(ref(w9 w2) enum(::day_16::main::9 enum(::day_16::main::10 x(w15 x(w13 x(w11 x(w2 w8)))))))
}

::day_16::main::9 {
  enum(w0 x(x(w10 w56) x(x(w8 w54) x(x(w6 w52) x(w4 x(w3 w49))))))
  ::std::unicode::Char::eq::eq = fn(ref(w0 w32) fn(ref(83 _) ?(::day_16::main::13 ::day_16::main::12 x(x(w10 w46) x(x(w8 w44) x(x(w6 w42) x(x(w3 w40) x(x(w32 w38) _))))))))
  ::std::unicode::Char::eq::ne = fn(ref(w38 _) fn(ref(35 _) w19))
  ::std::numeric::N32::neg::neg = fn(1 w20)
  ::std::numeric::N32::neg::neg = fn(1 w22)
  ::std::numeric::N32::neg::neg = fn(1 w24)
  ::std::numeric::N32::neg::neg = fn(1 w26)
  ::std::data::List::push_back = fn(ref(w40 w13) fn(tup(w19 tup(tup(4 tup(tup(tup(w20 _) tup(tup(w22 _) tup(tup(w24 _) tup(tup(w26 _) w47)))) w47)) 0)) _))
  ::day_16::main::6 = x(x(w46 w56) x(x(w44 w54) x(x(w42 w52) x(w4 x(w13 w49)))))
}

::day_16::main::10 { x(x(w8 w8) x(x(w6 w6) x(x(w4 w4) x(_ x(w1 w1))))) }

::day_16::main::12 {
  x(x(w20 w5) x(x(_ tup(w3 w7)) x(x(w16 w16) x(x(w14 w1) x(x(w12 w12) _)))))
  ::std::data::List::len = fn(ref(w14 w1) w3)
  ::std::data::List::len = fn(ref(w20 w5) w7)
}

::day_16::main::13 {
  x(w15 x(x(w13 w13) x(w11 x(w9 x(x(w7 w1) w16)))))
  ::std::unicode::Char::eq::eq = fn(ref(w7 w1) fn(ref(69 _) ?(::day_16::main::15 ::day_16::main::14 x(w15 x(w11 x(w9 w16))))))
}

::day_16::main::14 {
  x(x(w16 w5) x(x(_ tup(w3 w7)) x(x(w12 w1) _)))
  ::std::data::List::len = fn(ref(w12 w1) w3)
  ::std::data::List::len = fn(ref(w16 w5) w7)
}

::day_16::main::15 { x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _))) }

::day_16::main::16 {
  x(x(w32 w10) x(w30 fn(w0 fn(dup119(tup(w6 w7) w38) fn(w2 w34)))))
  ::std::data::Array::get = fn(ref(w32 w10) fn(w7 w14))
  ::std::data::Array::get = fn(w14 fn(w6 ref(tup(dup123(w19 ?(::day_16::main::19 ::day_16::main::18 x(w30 x(w0 x(w38 x(w2 x(x(w22 w36) w34))))))) tup(w22 w23)) tup(w19 tup(w36 w23)))))
}

::day_16::main::18 {
  x(w21 x(w19 x(w18 x(dup134(w3 w34) x(x(w16 w1) w46)))))
  ::std::data::List::get = fn(ref(w16 w1) fn(w3 ref(tup(w6 w8) tup(w43 dup141(w31 w47)))))
  ::std::numeric::N32::ord::lt = fn(ref(w19 dup132(w36 w39)) fn(ref(w6 w26) ?(::day_16::main::22 ::day_16::main::21 x(w21 x(w36 x(w18 x(w34 x(x(w26 w33) x(x(w8 w31) _)))))))))
  ::std::numeric::N32::eq::eq = fn(ref(w39 _) fn(ref(w33 w43) ?(::day_16::main::25 ::day_16::main::24 x(w47 w46))))
}

::day_16::main::19 { x(x(w7 w7) x(_ x(_ x(_ x(x(w2 w2) 0))))) }

::day_16::main::21 {
  x(x(w25 w4) x(dup151(w1 w6) x(w22 x(w21 x(x(_ w1) x(x(0 _) w15))))))
  ::std::data::Map::get_or_insert::1 = fn(ref(w25 w4) fn(w6 fn(tup(0 tup(w26 w26)) w9)))
  ::std::data::List::push_back = fn(w9 fn(tup(w22 w21) w15))
}

::day_16::main::22 { x(x(w9 w9) x(_ x(_ x(_ x(x(w4 w4) x(x(w2 w2) _)))))) }

::day_16::main::24 { x(w0 w0) }

::day_16::main::25 { x(_ 0) }

::day_16::main::26 { x(w9 x(w8 x(w6 x(w5 x(w3 dup171(?(::day_16::main::28 ::day_16::main::27 x(w9 x(w8 x(w6 x(w5 x(w3 w10)))))) w10)))))) }

::day_16::main::27 { x(_ x(x(w7 w7) x(_ x(x(w4 w4) x(x(w2 w2) _))))) }

::day_16::main::28 {
  x(w13 x(w12 x(w10 w9)))
  ::std::data::Map::remove_min::1 = fn(ref(w10 w1) enum(::day_16::main::31 enum(::day_16::main::32 x(w13 x(w12 x(w1 w9))))))
}

::day_16::main::31 {
  enum(tup(w2 w3) x(dup186(w27 w36) x(x(w13 w35) x(w11 x(x(w10 w32) x(x(w8 w30) w6))))))
  ::day_16::main::34 = x(w27 x(x(w13 w26) x(x(w11 w24) x(x(w10 w22) x(x(w8 w20) x(x(w6 w18) x(w2 w3)))))))
  ::day_16::main::26 = x(w36 x(x(w26 w35) x(w24 x(x(w22 w32) x(x(w20 w30) w18)))))
}

::day_16::main::32 { x(_ x(x(w7 w7) x(_ x(x(w4 w4) x(x(w2 w2) _))))) }

::day_16::main::34 {
  x(w17 x(w16 x(w14 x(w12 x(w10 x(w8 x(w6 w5)))))))
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_16::main::37 enum(::day_16::main::38 x(w17 x(w16 x(w14 x(w12 x(w10 x(w8 x(w6 w1))))))))))
}

::day_16::main::37 {
  enum(tup(dup243(tup(dup245(w31 w69) dup246(w26 w68)) w71) dup244(w44 w70)) x(dup223(w83 w96) x(x(w17 w95) x(x(w15 w93) x(x(w13 w91) x(x(w11 w89) x(x(w9 w87) x(w7 w6))))))))
  ::std::data::Array::get = fn(ref(w17 w24) fn(w26 w28))
  ::std::data::Array::get = fn(w28 fn(w31 ref(tup(w33 tup(w35 w37)) tup(w33 tup(w42 w67)))))
  ::std::data::List::get = fn(ref(w35 w42) fn(w44 ref(tup(w47 w63) tup(w65 w49))))
  ::std::numeric::N32::ord::le = fn(ref(w7 dup241(w72 w85)) fn(ref(w47 w58) ?(::day_16::main::41 ::day_16::main::40 x(w83 x(x(w24 w82) x(x(w15 w80) x(x(w13 w78) x(x(w11 w76) x(x(w9 w74) x(w72 x(w71 x(w70 x(w69 x(w68 x(x(w37 w67) x(x(w58 w65) x(x(w49 w63) _)))))))))))))))))
  ::day_16::main::34 = x(w96 x(x(w82 w95) x(x(w80 w93) x(x(w78 w91) x(x(w76 w89) x(x(w74 w87) x(w85 w6)))))))
}

::day_16::main::38 { x(_ x(x(w11 w11) x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) _)))))) }

::day_16::main::40 {
  x(tup(w3 w4) x(w30 x(w28 x(w26 x(w24 x(x(w22 w21) x(dup276(w0 dup276(w44 w55)) x(w19 x(w18 x(w17 x(w16 x(w15 x(x(_ w0) x(x(w11 w10) w61))))))))))))))
  ::std::numeric::N32::eq::eq = fn(ref(w17 _) fn(ref(w3 _) ?(::day_16::main::44 ::day_16::main::43 x(w26 x(x(w22 dup274(w21 ?(::day_16::main::50 ::day_16::main::49 x(w30 x(w28 x(w55 x(w19 x(w18 x(x(w42 dup284(w10 ?(::day_16::main::53 ::day_16::main::52 x(w24 x(w15 w61))))) _))))))))) x(w44 x(w16 x(x(w11 w42) x(w4 _)))))))))
}

::day_16::main::41 { x(_ x(x(w21 w21) x(x(w19 w19) x(x(w17 w17) x(x(w15 w15) x(x(w13 w13) x(_ x(_ x(_ x(_ x(_ x(x(w6 w6) x(x(w4 w4) x(x(w2 w2) _)))))))))))))) }

::day_16::main::43 {
  x(w16 x(w14 x(w12 x(w11 x(w10 x(w8 w17))))))
  ::std::numeric::N32::eq::eq = fn(ref(w11 _) fn(ref(w8 _) ?(::day_16::main::46 ::day_16::main::45 x(w16 x(w14 x(w12 x(w10 w17)))))))
}

::day_16::main::44 { x(x(w9 w9) x(x(w7 w7) x(_ x(_ x(x(w3 w3) _))))) }

::day_16::main::45 { x(x(_ w7) x(x(_ 1) x(w7 x(x(_ 1) _)))) }

::day_16::main::46 { x(x(w7 w7) x(x(w5 w5) x(_ x(x(w2 w2) _)))) }

::day_16::main::49 { x(x(w9 w9) x(x(w7 w7) x(_ x(_ x(_ x(x(w2 w2) _)))))) }

::day_16::main::50 {
  x(x(w44 w59) x(x(w42 w57) x(dup333(w9 dup333(w20 w28)) x(dup334(w11 dup334(w22 w30)) x(dup335(w0 dup335(w4 dup335(w12 w15))) x(x(w37 w34) _))))))
  ::std::numeric::N32::add::add = fn(w0 fn(3 w1))
  ::std::numeric::N32::rem::rem = fn(w1 fn(4 w2))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w5))
  ::std::numeric::N32::rem::rem = fn(w5 fn(4 w6))
  ::day_16::main::16 = x(x(w44 w49) x(x(w42 w47) fn(w10 fn(w14 fn(w15 w16)))))
  ::std::numeric::N32::add::add = fn(w9 fn(1 w10))
  ::day_16::delta = fn(w12 w13)
  ::std::ops::vectorized::add::add::1 = fn(w11 fn(w13 w14))
  ::std::logical::Bool::or::or = fn(w37 fn(w16 w18))
  ::day_16::main::16 = x(x(w49 w54) x(x(w47 w52) fn(w21 fn(w22 fn(w2 w24)))))
  ::std::numeric::N32::add::add = fn(w20 fn(1000 w21))
  ::std::logical::Bool::or::or = fn(w18 fn(w24 w26))
  ::day_16::main::16 = x(x(w54 w59) x(x(w52 w57) fn(w29 fn(w30 fn(w6 w32)))))
  ::std::numeric::N32::add::add = fn(w28 fn(1000 w29))
  ::std::logical::Bool::or::or = fn(w26 fn(w32 w34))
}

::day_16::main::52 { x(w5 x(x(dup349(?(::day_16::main::55 ::day_16::main::54 x(w5 x(x(w7 w8) w6))) w7) w8) w6)) }

::day_16::main::53 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_16::main::54 { x(x(w4 w4) x(x(w2 w2) _)) }

::day_16::main::55 {
  x(x(w7 w1) x(x(_ 1) _))
  ::std::numeric::N32::add::add = fn(w7 fn(1 w1))
}

::day_16::main::57 {
  w5
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_16::main::60 enum(_ w1)))
}

::day_16::main::60 {
  enum(w0 ::day_16::main::57)
  ::std::data::Array::to_list::cast = fn(w0 ::day_16::main::62)
}

::day_16::main::62 {
  w5
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_16::main::65 enum(_ w1)))
}

::day_16::main::65 { enum(tup(_ tup(::day_16::main::67 _)) ::day_16::main::62) }

::day_16::main::67 {
  w5
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::day_16::main::70 enum(_ w1)))
}

::day_16::main::70 { enum(tup(_ 0) ::day_16::main::67) }

::std::unicode::Char::eq::eq { fn(ref(dup382(w0 @n32_eq(w10 out)) w0) fn(ref(dup383(w3 w10) w3) out)) }

::std::unicode::Char::eq::ne { fn(ref(dup386(w0 @n32_ne(w10 out)) w0) fn(ref(dup387(w3 w10) w3) out)) }

::std::numeric::N32::neg::neg { fn(@n32_sub$(0 out) out) }

::std::data::Array::from_list::cast {
  fn(tup(w0 tup(w1 _)) w10)
  ::std::data::Array::from_fn = fn(w0 fn(ref(w1 _) fn(fn(ref(tup(w18 w19) w19) w18) w10)))
}

::std::data::Map::insert::1 {
  fn(ref(tup(w1 w3) tup(w24 w22)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w1 w14) fn(ref(0 _) ?(::std::data::Map::insert::1::3 ::std::data::Map::insert::1::2 x(x(w14 w24) x(x(w3 w22) x(w7 x(w8 w18)))))))
}

::std::data::Map::insert::1::2 { x(x(_ 1) x(x(_ tup(::std::data::Map::empty tup(tup(w8 w7) ::std::data::Map::empty))) x(w8 x(w7 ::std::logical::Option::None)))) }

::std::data::Map::insert::1::3 {
  x(w25 x(x(w23 w47) x(w21 x(w20 w35))))
  ref(w23 w1) = ref(tup(w4 tup(tup(w6 w8) w12)) tup(w43 tup(tup(w41 w39) w37)))
  ::std::ops::comparison::Ord::cmp_from_lt::1 = fn(ref(w21 w27) fn(ref(w6 w30) enum(::std::data::Map::insert::1::8 enum(::std::data::Map::insert::1::9 enum(::std::data::Map::insert::1::10 x(w25 x(x(w1 w47) x(w27 x(w20 x(x(w4 w43) x(x(w30 w41) x(x(w8 w39) x(x(w12 w37) x(w35 _))))))))))))))
}

::std::data::Map::insert::1::8 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w17) x(x(w7 w7) x(x(w5 w5) x(x(w3 w3) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w9 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_right = fn(ref(w24 w29) _)
}

::std::data::Map::insert::1::9 { x(x(w15 w15) x(x(w13 w13) x(w11 x(w10 x(x(w9 w9) x(x(_ w11) x(x(w5 w10) x(x(w3 w3) x(enum(enum(w5 w23) enum(_ w23)) _))))))))) }

::std::data::Map::insert::1::10 {
  x(x(_ w26) x(x(w13 w29) x(w11 x(w10 x(x(w9 w9) x(x(w7 w7) x(x(w5 w5) x(x(w3 w17) x(w21 _)))))))))
  ::std::data::Map::insert::1 = fn(ref(w3 w17) fn(w11 fn(w10 w21)))
  ::std::data::Map::size = fn(ref(w13 w24) w26)
  ::std::data::Map::balance_left = fn(ref(w24 w29) _)
}

::std::numeric::N32::eq::eq { fn(ref(dup476(w0 @n32_eq(w10 out)) w0) fn(ref(dup477(w3 w10) w3) out)) }

::std::ops::comparison::Ord::cmp_from_lt::1 {
  fn(ref(w1 w21) fn(ref(w4 w19) w17))
  ::std::numeric::N32::ord::lt = fn(ref(w1 w11) fn(ref(w4 w14) ?(::std::ops::comparison::Ord::cmp_from_lt::1::3 ::std::ops::comparison::Ord::cmp_from_lt::1::2 x(x(w11 w21) x(x(w14 w19) w17)))))
}

::std::ops::comparison::Ord::cmp_from_lt::1::2 { x(x(w4 w4) x(x(w2 w2) ::std::ops::comparison::Ord::Lt)) }

::std::ops::comparison::Ord::cmp_from_lt::1::3 {
  x(x(w11 w1) x(x(w9 w4) w12))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w11 w1) fn(ref(w9 w4) ?(::std::ops::comparison::Ord::Eq ::std::ops::comparison::Ord::Gt w12)))
}

::std::numeric::N32::ord::lt { fn(ref(dup500(w0 @n32_lt(w10 out)) w0) fn(ref(dup501(w3 w10) w3) out)) }

::std::ops::comparison::Ord::gt::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::lt = fn(w4 fn(w1 w14))
}

::std::data::Map::get_or_insert::1 {
  fn(w1 fn(w3 fn(w4 ref(w17 w20))))
  ::std::data::Map::insert::1 = fn(w1 fn(w3 fn(w20 w13)))
  ::std::logical::Option::unwrap_or = fn(w13 fn(w4 w17))
}

::std::data::Map::remove_min::1 {
  fn(ref(w1 w16) w14)
  ::std::data::Map::len = fn(ref(w1 w8) w10)
  ::std::numeric::N32::eq::eq = fn(ref(w10 _) fn(ref(0 _) ?(::std::data::Map::remove_min::1::3 ::std::data::Map::remove_min::1::2 x(x(w8 w16) w14))))
}

::std::data::Map::remove_min::1::2 { x(x(w2 w2) ::std::logical::Option::None) }

::std::data::Map::remove_min::1::3 {
  x(x(w7 w1) enum(enum(w3 w8) enum(_ w8)))
  ::std::data::Map::_remove_min = fn(ref(w7 w1) w3)
}

::std::numeric::N32::ord::le { fn(ref(dup532(w0 @n32_le(w10 out)) w0) fn(ref(dup533(w3 w10) w3) out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::logical::Bool::or::or { fn(@n32_or(w1 out) fn(w1 out)) }

::std::ops::vectorized::add::add::1 {
  fn(tup(w0 w1) fn(tup(w3 w4) tup(w10 w13)))
  ::std::numeric::N32::add::add = fn(w0 fn(w3 w10))
  ::std::numeric::N32::add::add = fn(w1 fn(w4 w13))
}

::std::data::Array::to_list::cast {
  fn(w0 tup(w7 tup(w12 w10)))
  ::std::data::Array::len = fn(ref(w0 w5) w7)
  ::std::data::Array::fold_back = fn(w5 fn(w10 fn(fn(w16 fn(w17 tup(w17 w16))) w12)))
}

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup578(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup584(w0 @n32_ne(w10 out)) w0) fn(ref(dup585(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::day_16::delta {
  fn(dup606(w7 w13) w18)
  ::std::numeric::N32::and::and = fn(w7 fn(2 w8))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::day_16::delta::3 1 w12)))
  ::std::numeric::N32::and::and = fn(w13 fn(1 w14))
  ::std::numeric::N32::eq::eq = fn(ref(w14 _) fn(ref(0 _) ?(::day_16::delta::6 ::day_16::delta::5 x(w12 w18))))
}

::day_16::delta::3 {
  w0
  ::std::numeric::N32::neg::neg = fn(1 w0)
}

::day_16::delta::5 { x(w3 tup(w3 0)) }

::day_16::delta::6 { x(w3 tup(0 w3)) }

::std::numeric::N32::and::and { fn(@n32_and(w1 out) fn(w1 out)) }

::std::data::List::len { fn(ref(tup(dup622(w11 w7) w8) tup(w7 w8)) w11) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::data::List::get {
  fn(ref(tup(w1 tup(w3 w5)) tup(w1 tup(w4 w5))) fn(w9 ref(w14 w15)))
  ::std::data::List::get::1 = x(x(ref(w3 w4) ref(tup(w14 w16) tup(w15 w16))) w9)
}

::std::data::List::get::1 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::std::data::List::get::3 ::std::data::List::get::2 x(w7 w1))))
}

::std::data::List::get::2 {
  x(x(ref(tup(w1 w3) tup(w1 w4)) w17) w12)
  ::std::numeric::N32::sub::sub = fn(w12 fn(1 w11))
  ::std::data::List::get::1 = x(x(ref(w3 w4) w17) w11)
}

::std::data::List::get::3 { x(x(w2 w2) _) }

::std::ops::comparison::Ord::ge::1 {
  fn(w1 fn(w4 w14))
  ::std::numeric::N32::ord::le = fn(w4 fn(w1 w14))
}

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::Array::empty { tup(0 _) }

::std::data::Array::Node::leaf_to_node::cast { fn(w0 w0) }

::std::data::Array::from_fn {
  fn(w0 fn(ref(dup958(w1 w16) w1) fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::from_fn::3 ::std::data::Array::from_fn::2 x(w10 x(w16 x(w4 w14))))))
}

::std::data::Array::from_fn::2 { x(_ x(_ x(_ ::std::data::Array::empty))) }

::std::data::Array::from_fn::3 {
  x(dup964(w1 dup964(w9 w29)) x(w34 x(fn(ref(w36 w41) w43) tup(w29 w6))))
  ::std::data::Array::Node::unzip_with = fn(w1 fn(w25 fn(fn(w36 tup(w43 w41)) tup(w6 w7))))
  ::std::data::Array::pop_back = fn(ref(tup(w9 w7) w14) w16)
  ::std::logical::Option::unwrap = fn(w16 _)
  ::std::data::Array::push_front = fn(ref(w14 tup(_ w25)) fn(w34 _))
}

::std::data::Array::fold_back {
  fn(tup(w0 w1) fn(w3 fn(w4 w14)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w10) fn(ref(0 _) ?(::std::data::Array::fold_back::3 ::std::data::Array::fold_back::2 x(w10 x(w1 x(w3 x(w4 w14)))))))
}

::std::data::Array::fold_back::2 { x(_ x(_ x(w3 x(_ w3)))) }

::std::data::Array::fold_back::3 {
  x(dup1021(w1 w2) x(w30 x(w29 x(w28 w14))))
  ::std::data::Array::Node::zip_with = fn(w2 fn(w22 fn(w30 fn(w28 w7))))
  ::std::data::Array::pop_front = fn(ref(tup(w1 w7) w11) w13)
  ::std::logical::Option::unwrap = fn(w13 w14)
  ::std::data::Array::push_back = fn(ref(w11 tup(_ w22)) fn(w29 _))
}

::std::data::Array::len { fn(ref(tup(dup1032(w10 w7) w8) tup(w7 w8)) w10) }

::std::data::Array::get {
  fn(ref(tup(dup1037(w0 w11) w3) tup(w0 w4)) fn(w8 w14))
  ::std::data::Array::get::1 = x(x(ref(w3 w4) w19) x(w8 w11))
  ::std::ops::Cast::ref::cast::1 = fn(w19 w14)
}

::std::data::Array::get::1 {
  x(w8 x(w6 w5))
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::get::3 ::std::data::Array::get::2 x(w8 x(w6 w1)))))
}

::std::data::Array::get::2 {
  x(x(w13 w17) x(dup1052(w2 w8) w10))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w13 fn(w10 fn(w3 tup(w5 w6))))
  ::std::numeric::N32::div::div = fn(w8 fn(2 w9))
  ::std::data::Array::get::1 = x(x(w5 w17) x(w9 w6))
}

::std::data::Array::get::3 { x(x(w3 w3) _) }

::std::ops::Cast::ref::cast::1 {
  fn(ref(w1 w13) ref(w6 w9))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w6)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w9 w13)
}

::std::data::Array::Node::node_to_leaf::cast { fn(w0 w0) }

::std::data::Array::push_back {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup1069(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_back::3 ::std::data::Array::push_back::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_back::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_back::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_back::4 = x(x(w13 ref(w4 tup(w4 w8))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w8)
}

::std::data::Array::push_back::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_back::6 ::std::data::Array::push_back::5 x(w7 w1))))
}

::std::data::Array::push_back::5 {
  x(x(w10 w13) dup1094(w1 w2))
  ::std::numeric::N32::rem::rem = fn(w2 fn(2 w3))
  ::std::data::Array::Node::half = fn(w10 fn(w1 fn(w3 tup(w5 w6))))
  ::std::data::Array::push_back::4 = x(x(w5 w13) w6)
}

::std::data::Array::push_back::6 { x(x(w2 w2) _) }

::std::data::Array::push_front {
  fn(ref(tup(w1 w3) tup(w13 w4)) fn(w8 _))
  ::std::numeric::N32::eq::eq = fn(ref(w1 dup1099(w23 w12)) fn(ref(0 _) ?(::std::data::Array::push_front::3 ::std::data::Array::push_front::2 x(w23 x(ref(w3 w4) x(w8 _))))))
  ::std::numeric::N32::add::add = fn(w12 fn(1 w13))
}

::std::data::Array::push_front::2 {
  x(_ x(ref(_ w5) x(w8 _)))
  ::std::data::Array::Node::leaf_to_node::cast = fn(w8 w5)
}

::std::data::Array::push_front::3 {
  x(w14 x(w13 x(w12 _)))
  ::std::data::Array::push_front::4 = x(x(w13 ref(w4 tup(w7 w4))) w14)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w12 w7)
}

::std::data::Array::push_front::4 {
  x(w7 w5)
  ::std::ops::comparison::Ord::gt::1 = fn(ref(w5 w1) fn(ref(1 _) ?(::std::data::Array::push_front::6 ::std::data::Array::push_front::5 x(w7 w1))))
}

::std::data::Array::push_front::5 {
  x(x(ref(tup(w2 w4) tup(w15 w12)) w26) w21)
  tup(w4 w2) = tup(w11 w12)
  ::std::numeric::N32::div::div = fn(w21 fn(2 w19))
  ::std::data::Array::push_front::4 = x(x(ref(w11 w15) w26) w19)
}

::std::data::Array::push_front::6 { x(x(w2 w2) _) }

::std::data::Array::pop_back {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_back::3 ::std::data::Array::pop_back::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_back::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_back::13 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_back::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_back::5 ::std::data::Array::pop_back::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_back::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_back::13 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_back::5 {
  x(x(dup1151(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_back::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_back::6 {
  x(ref(w6 w28) x(dup1157(w0 w11) w26))
  ::std::numeric::N32::sub::sub = fn(w0 fn(1 w1))
  ::std::numeric::N32::rem::rem = fn(w1 fn(2 dup1160(w12 w29)))
  ::std::data::Array::Node::half = fn(ref(w6 w9) fn(w11 fn(w12 tup(w14 w15))))
  ::std::numeric::N32::eq::eq = fn(ref(w15 w22) fn(ref(1 _) ?(::std::data::Array::pop_back::9 ::std::data::Array::pop_back::8 x(w14 x(w22 x(w29 x(x(w9 w28) w26)))))))
}

::std::data::Array::pop_back::8 {
  x(ref(w1 _) x(_ x(w16 x(x(tup(w6 w7) w24) enum(enum(w3 w27) enum(_ w27))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
  ::std::numeric::N32::eq::eq = fn(ref(w16 _) fn(ref(0 _) ?(::std::data::Array::pop_back::12 ::std::data::Array::pop_back::11 x(w6 x(w7 w24)))))
}

::std::data::Array::pop_back::9 {
  x(w5 x(w4 x(_ x(x(w2 w2) w24))))
  ::std::data::Array::pop_back::6 = x(w5 x(w4 w24))
}

::std::data::Array::pop_back::11 { x(_ x(w2 w2)) }

::std::data::Array::pop_back::12 { x(w3 x(_ w3)) }

::std::data::Array::pop_back::13 { x(w11 w11) }

::std::data::Array::pop_front {
  fn(ref(tup(w1 w3) tup(w20 w4)) w17)
  ::std::numeric::N32::eq::eq = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::Array::pop_front::3 ::std::data::Array::pop_front::2 x(x(w13 w20) x(ref(w3 w4) w17)))))
}

::std::data::Array::pop_front::2 {
  x(x(w3 w3) x(_ w5))
  ::std::data::Array::pop_front::10 = x(w5 ::std::logical::Option::None)
}

::std::data::Array::pop_front::3 {
  x(x(w8 w12) w6)
  ::std::numeric::N32::eq::eq = fn(ref(w8 w1) fn(ref(1 _) ?(::std::data::Array::pop_front::5 ::std::data::Array::pop_front::4 x(x(w1 w12) w6))))
}

::std::data::Array::pop_front::4 {
  x(x(_ 0) x(ref(w2 _) w12))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w2 w4)
  ::std::data::Array::pop_front::10 = x(w12 enum(enum(w4 w10) enum(_ w10)))
}

::std::data::Array::pop_front::5 {
  x(x(dup1203(w0 w2) w3) x(w6 w9))
  ::std::numeric::N32::sub::sub = fn(w2 fn(1 w3))
  ::std::data::Array::pop_front::6 = x(w6 x(w0 w9))
}

::std::data::Array::pop_front::6 {
  x(ref(w2 w41) x(w30 w37))
  ref(w2 w5) = ref(tup(w8 w10) tup(w39 w21))
  tup(w10 w8) = tup(w17 w18)
  ::std::numeric::N32::add::add = fn(w30 fn(1 w25))
  ::std::numeric::N32::div::div = fn(w25 fn(2 w26))
  ::std::numeric::N32::eq::eq = fn(ref(w26 w33) fn(ref(1 _) ?(::std::data::Array::pop_front::9 ::std::data::Array::pop_front::8 x(ref(w18 w21) x(w33 x(x(w5 w41) x(x(w17 w39) w37)))))))
}

::std::data::Array::pop_front::8 {
  x(ref(w1 _) x(_ x(x(_ w12) x(x(w12 _) enum(enum(w3 w17) enum(_ w17))))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w1 w3)
}

::std::data::Array::pop_front::9 {
  x(w6 x(w5 x(x(w4 w4) x(x(w2 w2) w36))))
  ::std::data::Array::pop_front::6 = x(w6 x(w5 w36))
}

::std::data::Array::pop_front::10 { x(w11 w11) }

::std::data::Array::Node::half {
  fn(ref(tup(w1 w3) tup(w23 w21)) fn(w7 fn(w8 w18)))
  ::std::numeric::N32::eq::eq = fn(ref(w8 _) fn(ref(0 _) ?(::std::data::Array::Node::half::3 ::std::data::Array::Node::half::2 x(x(w1 w23) x(x(w3 w21) x(w7 w18))))))
}

::std::data::Array::Node::half::2 {
  x(x(w12 w1) x(x(w10 w10) x(w8 tup(ref(w12 w1) w5))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w4))
  ::std::numeric::N32::div::div = fn(w4 fn(2 w5))
}

::std::data::Array::Node::half::3 {
  x(x(w11 w11) x(x(w9 w1) x(w7 tup(ref(w9 w1) w4))))
  ::std::numeric::N32::div::div = fn(w7 fn(2 w4))
}

::std::data::Array::Node::zip_with {
  fn(w0 fn(w1 fn(w2 fn(w3 w13))))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w9) fn(ref(1 _) ?(::std::data::Array::Node::zip_with::3 ::std::data::Array::Node::zip_with::2 x(w9 x(w1 x(w2 x(w3 w13)))))))
}

::std::data::Array::Node::zip_with::2 {
  x(_ x(w10 x(w9 x(fn(w2 fn(w4 w5)) w6))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w10 w2)
  ::std::data::Array::Node::node_to_leaf::cast = fn(w9 w4)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w6)
}

::std::data::Array::Node::zip_with::3 {
  x(dup1327(w8 w15) x(tup(w1 w2) x(tup(w5 w6) x(dup1330(w13 w19) tup(w14 w20)))))
  ::std::numeric::N32::add::add = fn(w8 fn(1 w9))
  ::std::numeric::N32::div::div = fn(w9 fn(2 w10))
  ::std::data::Array::Node::zip_with = fn(w10 fn(w1 fn(w5 fn(w13 w14))))
  ::std::numeric::N32::div::div = fn(w15 fn(2 w16))
  ::std::data::Array::Node::zip_with = fn(w16 fn(w2 fn(w6 fn(w19 w20))))
}

::std::data::Array::Node::unzip_with {
  fn(w0 fn(w1 fn(w2 w12)))
  ::std::numeric::N32::eq::eq = fn(ref(w0 w8) fn(ref(1 _) ?(::std::data::Array::Node::unzip_with::3 ::std::data::Array::Node::unzip_with::2 x(w8 x(w1 x(w2 w12))))))
}

::std::data::Array::Node::unzip_with::2 {
  x(_ x(w14 x(fn(w2 tup(w4 w5)) tup(w8 w10))))
  ::std::data::Array::Node::node_to_leaf::cast = fn(w14 w2)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w4 w8)
  ::std::data::Array::Node::leaf_to_node::cast = fn(w5 w10)
}

::std::data::Array::Node::unzip_with::3 {
  x(dup1348(w4 w13) x(tup(w1 w2) x(dup1350(w8 w16) tup(tup(w10 w18) tup(w11 w19)))))
  ::std::numeric::N32::add::add = fn(w4 fn(1 w5))
  ::std::numeric::N32::div::div = fn(w5 fn(2 w6))
  ::std::data::Array::Node::unzip_with = fn(w6 fn(w1 fn(w8 tup(w10 w11))))
  ::std::numeric::N32::div::div = fn(w13 fn(2 w14))
  ::std::data::Array::Node::unzip_with = fn(w14 fn(w2 fn(w16 tup(w18 w19))))
}

::std::data::Map::empty { tup(0 _) }

::std::data::Map::new {
  fn(w0 fn(w1 fn(w2 tup(w14 tup(w6 tup(w1 w10))))))
  ::std::data::Map::len = fn(ref(w0 w6) w8)
  ::std::data::Map::len = fn(ref(w2 w10) w12)
  ::std::numeric::N32::add::add = fn(w8 fn(w12 w13))
  ::std::numeric::N32::add::add = fn(w13 fn(1 w14))
}

::std::data::Map::len { fn(ref(tup(dup1369(w0 w8) w2) tup(w0 w2)) w8) }

::std::data::Map::_remove_min {
  fn(ref(tup(w1 w3) tup(w10 w40)) w32)
  ::std::numeric::N32::sub::sub = fn(w1 fn(1 w10))
  ref(w3 w12) = ref(tup(w15 tup(w17 w19)) tup(w38 tup(w36 w34)))
  ::std::data::Map::len = fn(ref(w15 w26) w28)
  ::std::numeric::N32::eq::eq = fn(ref(w28 _) fn(ref(0 _) ?(::std::data::Map::_remove_min::3 ::std::data::Map::_remove_min::2 x(x(w12 w40) x(x(w26 w38) x(x(w17 w36) x(x(w19 w34) w32)))))))
}

::std::data::Map::_remove_min::2 { x(x(_ w2) x(x(w14 w14) x(x(w12 _) x(x(tup(_ w2) _) w12)))) }

::std::data::Map::_remove_min::3 {
  x(x(w18 w6) x(x(w16 w1) x(x(w14 w14) x(x(w12 w12) w3))))
  ::std::data::Map::_remove_min = fn(ref(w16 w1) w3)
  ::std::data::Map::balance_left = fn(ref(w18 w6) _)
}

::std::data::Map::balance_left {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w6 w14) fn(ref(w8 w17) ?(::std::data::Map::balance_left::3 ::std::data::Map::balance_left::2 x(w14 x(w7 x(w17 w20))))))
}

::std::data::Map::balance_left::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_left::3 {
  x(w10 x(w9 x(tup(_ tup(w1 tup(w2 w3))) w18)))
  ::std::data::Map::is_single = fn(ref(w1 w12) fn(ref(w3 w15) ?(::std::data::Map::balance_left::6 ::std::data::Map::balance_left::5 x(w10 x(w9 x(w12 x(w2 x(w15 w18))))))))
}

::std::data::Map::balance_left::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w3 tup(w9 w8)))))))
  ::std::data::Map::new = fn(w12 fn(w11 fn(w10 w3)))
}

::std::data::Map::balance_left::6 {
  x(w21 x(w20 x(tup(_ tup(w1 tup(w2 w3))) x(w18 x(w17 tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w21 fn(w20 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w18 fn(w17 w14)))
}

::std::data::Map::balance_right {
  fn(ref(tup(w6 tup(w7 w8)) w20) _)
  ::std::data::Map::is_balanced = fn(ref(w8 w14) fn(ref(w6 w17) ?(::std::data::Map::balance_right::3 ::std::data::Map::balance_right::2 x(w17 x(w7 x(w14 w20))))))
}

::std::data::Map::balance_right::2 { x(w7 x(w6 x(w5 tup(w7 tup(w6 w5))))) }

::std::data::Map::balance_right::3 {
  x(tup(_ tup(w1 tup(w2 w3))) x(w9 x(w8 w18)))
  ::std::data::Map::is_single = fn(ref(w3 w12) fn(ref(w1 w15) ?(::std::data::Map::balance_right::6 ::std::data::Map::balance_right::5 x(w9 x(w8 x(w15 x(w2 x(w12 w18))))))))
}

::std::data::Map::balance_right::5 {
  x(w12 x(w11 x(w10 x(w9 x(w8 tup(w10 tup(w9 w5)))))))
  ::std::data::Map::new = fn(w8 fn(w12 fn(w11 w5)))
}

::std::data::Map::balance_right::6 {
  x(w21 x(w20 x(w19 x(w18 x(tup(_ tup(w1 tup(w2 w3))) tup(w9 tup(w2 w14)))))))
  ::std::data::Map::new = fn(w19 fn(w18 fn(w1 w9)))
  ::std::data::Map::new = fn(w3 fn(w21 fn(w20 w14)))
}

::std::data::Map::is_balanced {
  fn(ref(tup(dup1653(w0 w14) w2) tup(w0 w2)) fn(ref(tup(w7 w8) tup(w19 w8)) w21))
  ::std::numeric::N32::mul::mul = fn(3 fn(w14 w15))
  ::std::numeric::N32::add::add = fn(w15 fn(2 w16))
  ::std::ops::comparison::Ord::ge::1 = fn(ref(w16 _) fn(ref(w7 w19) w21))
}

::std::numeric::N32::mul::mul { fn(@n32_mul(w1 out) fn(w1 out)) }

::std::data::Map::is_single {
  fn(ref(tup(w1 w2) tup(w15 w2)) fn(ref(tup(dup1664(w6 w17) w8) tup(w6 w8)) w20))
  ::std::numeric::N32::mul::mul = fn(2 fn(w17 w18))
  ::std::numeric::N32::ord::le = fn(ref(w1 w15) fn(ref(w18 _) w20))
}

::std::data::Map::size {
  fn(ref(tup(tup(dup1667(w0 w16) w2) tup(w5 tup(dup1668(w6 w17) w8))) tup(tup(w0 w2) tup(w5 tup(w6 w8)))) w19)
  ::std::numeric::N32::add::add = fn(w16 fn(w17 w18))
  ::std::numeric::N32::add::add = fn(w18 fn(1 w19))
}

::std::logical::Option::unwrap_or { fn(enum(::std::logical::Option::unwrap_or::4 enum(::std::logical::Option::unwrap_or::5 x(w1 w8))) fn(w1 w8)) }

::std::logical::Option::unwrap_or::4 { enum(w0 x(_ w0)) }

::std::logical::Option::unwrap_or::5 { x(w1 w1) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

::std::IO::read_line {
  fn(ref(w1 w20) w17)
  ::std::IO::read_byte = fn(ref(w1 w6) fn(0 w8))
  ::std::unicode::Char::eq::ne = fn(ref(w8 w13) fn(ref(0 _) ?(::std::IO::read_line::3 ::std::IO::read_line::2 x(x(w6 w20) x(w13 w17)))))
}

::std::IO::read_line::2 {
  x(w5 x(w3 enum(enum(w11 w15) enum(_ w15))))
  ::std::unicode::Char::eq::eq = fn(ref(w3 w7) fn(ref(10 _) ?(::std::IO::read_line::6 ::std::IO::read_line::5 x(w5 x(w7 w11)))))
}

::std::IO::read_line::3 { x(x(w3 w3) x(_ ::std::logical::Option::None)) }

::std::IO::read_line::5 { x(x(w4 w4) x(_ tup(0 tup(w7 w7)))) }

::std::IO::read_line::6 {
  x(w10 x(w8 w14))
  ::std::IO::read_line::7 = x(w10 x(x(tup(1 tup(tup(w8 w11) w11)) w14) _))
}

::std::IO::read_line::7 {
  x(x(w10 w21) w8)
  ::std::IO::read_byte = fn(ref(w10 w1) fn(10 w3))
  ::std::unicode::Char::eq::ne = fn(ref(w3 w12) fn(ref(10 _) ?(::std::IO::read_line::10 ::std::IO::read_line::9 x(x(w1 w21) x(w12 w8)))))
}

::std::IO::read_line::9 {
  x(w9 x(w7 x(x(w6 w19) w17)))
  ::std::data::List::concat::concat = fn(w6 fn(tup(1 tup(tup(w7 w10) w10)) w3))
  ::std::IO::read_line::7 = x(w9 x(x(w3 w19) w17))
}

::std::IO::read_line::10 { x(x(w5 w5) x(_ x(x(w2 w2) _))) }

::std::IO::read_byte { fn(ref(dup(@io_read_byte(w3 dup(byte @seq$(io2 w8))) io2) w8) fn(w3 byte)) }

