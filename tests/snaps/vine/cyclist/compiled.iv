
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::cyclist::main }

::cyclist::main {
  fn(ref(w1 w13) _)
  ::cyclist::main::1 = x(tup(1 tup(tup(0 w8) w8)) w10)
  ::cyclist::main::5 = x(x(w1 w13) w10)
}

::cyclist::main::1 {
  x(w8 w10)
  ::std::data::List::len = fn(ref(w8 w1) w3)
  ::std::numeric::N32::ord::lt = fn(ref(w3 _) fn(ref(32 _) ?(::cyclist::main::3 ::cyclist::main::2 x(w1 w10))))
}

::cyclist::main::2 {
  x(dup11(w0 w10) w17)
  ::std::data::List::len = fn(ref(w10 w11) w13)
  ::std::numeric::N32::add::add = fn(w13 w7)
  ::std::data::List::map = fn(w0 fn(w7 w2))
  ::std::data::List::concat::concat = fn(w11 fn(w2 w4))
  ::cyclist::main::1 = x(w4 w17)
}

::cyclist::main::3 { x(w1 w1) }

::cyclist::main::5 {
  x(w7 w5)
  ::std::data::List::pop_front = fn(ref(w5 w1) enum(::cyclist::main::8 enum(::cyclist::main::9 x(w7 w1))))
}

::cyclist::main::8 {
  enum(dup28(w8 w14) x(x(w4 w28) w2))
  ::cyclist::cycle = fn(ref(w2 dup27(w16 w26)) fn(w8 _))
  ::std::numeric::N32::to_string::to_string = fn(w14 tup(@n32_add(2 w22) tup(w20 tup(59 tup(9 w23)))))
  ::std::data::List::to_string::to_string::1 = fn(w16 tup(@n32_add(w22 w19) tup(w23 w21)))
  ::std::IO::println = fn(ref(w4 w11) fn(tup(w19 tup(w20 w21)) _))
  ::cyclist::main::5 = x(x(w11 w28) w26)
}

::cyclist::main::9 { x(x(w2 w2) _) }

::std::numeric::N32::ord::lt { fn(ref(dup31(w0 @n32_lt(w10 out)) w0) fn(ref(dup32(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup63(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup69(w0 @n32_ne(w10 out)) w0) fn(ref(dup70(w3 w10) w3) out)) }

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::data::List::to_string::to_string::1 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::numeric::N32::to_string::to_string w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::unicode::String::to_string::to_string { fn(w0 w0) }

::cyclist::cycle {
  fn(ref(w1 w22) fn(w3 w18))
  ::std::data::List::len = fn(ref(w1 w7) w9)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w14) fn(ref(0 _) ?(::cyclist::cycle::3 ::cyclist::cycle::2 x(x(w7 w22) x(w3 x(w14 w18))))))
}

::cyclist::cycle::2 {
  x(w8 x(w6 x(w5 _)))
  ::std::numeric::N32::rem::rem = fn(w6 fn(w5 w2))
  ::cyclist::cycle::4 = x(w8 w2)
}

::cyclist::cycle::3 { x(x(w4 w4) _) }

::cyclist::cycle::4 {
  x(w7 w5)
  ::std::numeric::N32::eq::ne = fn(ref(w5 w1) fn(ref(0 _) ?(::cyclist::cycle::6 ::cyclist::cycle::5 x(w7 w1))))
}

::cyclist::cycle::5 {
  x(x(w15 w18) w13)
  ::std::data::List::pop_front = fn(ref(w15 w1) w3)
  ::std::logical::Option::unwrap = fn(w3 w4)
  ::std::data::List::push_back = fn(ref(w1 w7) fn(w4 _))
  ::std::numeric::N32::sub::sub = fn(w13 fn(1 w12))
  ::cyclist::cycle::4 = x(x(w7 w18) w12)
}

::cyclist::cycle::6 { x(x(w2 w2) _) }

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::data::List::len { fn(ref(tup(dup123(w11 w7) w8) tup(w7 w8)) w11) }

::std::data::List::map {
  fn(tup(dup207(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup227(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::pop_front {
  fn(ref(tup(w1 tup(w3 w4)) tup(w21 tup(w19 w4))) w17)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w13) fn(ref(0 _) ?(::std::data::List::pop_front::3 ::std::data::List::pop_front::2 x(x(w13 w21) x(x(w3 w19) w17)))))
}

::std::data::List::pop_front::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::pop_front::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::data::List::push_back {
  fn(ref(w1 w9) fn(w3 _))
  ::std::data::List::concat::concat = fn(w1 fn(tup(1 tup(tup(w3 w11) w11)) w9))
}

::std::data::List::join {
  fn(w0 fn(w1 w14))
  ::std::data::List::into_iter = fn(w0 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w10) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(w1 x(w10 w14)))))
}

::std::data::List::join::4 {
  enum(w0 x(w4 x(w3 w7)))
  ::std::data::List::join::6 = x(w4 x(w3 x(w0 w7)))
}

::std::data::List::join::5 { x(_ x(_ tup(0 tup(w6 w6)))) }

::std::data::List::join::6 {
  x(w8 x(w7 w6))
  ::std::data::List::IntoIter::next = fn(ref(w7 w1) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(w8 x(w1 w6)))))
}

::std::data::List::join::9 {
  enum(w0 x(dup306(w6 w14) x(w4 x(w3 w12))))
  ::std::data::List::concat::concat = fn(w6 fn(w0 w8))
  ::std::data::List::concat::concat = fn(w3 fn(w8 w10))
  ::std::data::List::join::6 = x(w14 x(w4 x(w10 w12)))
}

::std::data::List::join::10 { x(_ x(_ x(w1 w1))) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::logical::Option::unwrap { fn(enum(::std::logical::Option::unwrap::3 enum(_ w7)) w7) }

::std::logical::Option::unwrap::3 { enum(w0 w0) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

