
::main { ::stream_primes::main }

::stream_primes::main {
  fn(ref(w1 w9) _)
  ::stream_primes::main::1 = x(x(w1 w9) 1)
}

::stream_primes::main::1 {
  x(w7 w5)
  ::std::numeric::N32::ord::lt = fn(ref(w5 w1) fn(ref(10000 _) ?(::stream_primes::main::3 ::stream_primes::main::2 x(w7 w1))))
}

::stream_primes::main::2 {
  x(x(w7 w20) w5)
  ::std::numeric::N32::add::add = fn(w5 fn(1 w1))
  ::stream_primes::main::4 = x(x(w1 dup16(w15 w18)) x(2 x(1 ?(::stream_primes::main::12 ::stream_primes::main::11 x(x(w7 w17) x(w15 _))))))
  ::stream_primes::main::1 = x(x(w17 w20) w18)
}

::stream_primes::main::3 { x(x(w2 w2) _) }

::stream_primes::main::4 {
  x(x(w11 w16) x(w9 w8))
  ::std::numeric::N32::ord::lt = fn(ref(w9 w1) fn(ref(w11 w4) ?(::stream_primes::main::6 ::stream_primes::main::5 x(x(w4 w16) x(w1 w8)))))
}

::stream_primes::main::5 {
  x(x(dup30(w8 w17) w18) x(dup31(w9 w16) w4))
  ::std::numeric::N32::rem::rem = fn(w8 fn(w9 w10))
  ::std::numeric::N32::eq::eq = fn(ref(w10 _) fn(ref(0 _) ?(::stream_primes::main::9 ::stream_primes::main::8 x(x(w17 w18) x(w16 w4)))))
}

::stream_primes::main::6 { x(x(w4 w4) x(_ x(w1 w1))) }

::stream_primes::main::8 { x(x(w5 w5) x(_ x(_ 0))) }

::stream_primes::main::9 {
  x(w4 x(w2 w1))
  ::std::numeric::N32::add::add = fn(w2 fn(1 w7))
  ::stream_primes::main::4 = x(w4 x(w7 w1))
}

::stream_primes::main::11 {
  x(x(w9 w1) x(w7 _))
  ::std::numeric::N32::to_string::to_string = fn(w7 w4)
  ::std::IO::println = fn(ref(w9 w1) fn(w4 _))
}

::stream_primes::main::12 { x(x(w3 w3) _) }

::std::numeric::N32::ord::lt { fn(ref(dup49(w0 @lt(w10 out)) w0) fn(ref(dup50(w3 w10) w3) out)) }

::std::numeric::N32::add::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@rem(w1 out) fn(w1 out)) }

::std::numeric::N32::eq::eq { fn(ref(dup61(w0 @eq(w10 out)) w0) fn(ref(dup62(w3 w10) w3) out)) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup79(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup85(w0 @ne(w10 out)) w0) fn(ref(dup86(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::unicode::Char::add_n32::add { fn(@add(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@div(w1 out) fn(w1 out)) }

::std::numeric::N32::sub::sub { fn(@sub(w1 out) fn(w1 out)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

