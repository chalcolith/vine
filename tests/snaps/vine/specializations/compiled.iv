
::std::logical::Option::None { enum(_ enum(r r)) }

::main { ::specializations::main }

::specializations::main {
  fn(ref(w1 w33) _)
  ::std::data::List::to_string::to_string::1 = fn(tup(4 tup(tup(1 tup(2 tup(3 tup(4 w41)))) w41)) w9)
  ::std::IO::println = fn(ref(w1 w6) fn(w9 _))
  ::std::data::List::to_string::to_string::2 = fn(tup(3 tup(tup(tup(3 tup(tup(97 tup(98 tup(99 w44))) w44)) tup(tup(3 tup(tup(100 tup(101 tup(102 w47))) w47)) tup(tup(3 tup(tup(103 tup(104 tup(105 w50))) w50)) w51))) w51)) w18)
  ::std::IO::println = fn(ref(w6 w12) fn(w18 _))
  ::std::data::List::to_string::to_string::3 = fn(tup(3 tup(tup(120 tup(121 tup(122 w52))) w52)) w24)
  ::std::IO::println = fn(ref(w12 w21) fn(w24 _))
  ::std::data::List::to_string::to_string::4 = fn(tup(2 tup(tup(1 tup(0 w53)) w53)) w30)
  ::std::IO::println = fn(ref(w21 w27) fn(w30 _))
  ::std::data::List::to_string::to_string::5 = fn(tup(2 tup(tup(tup(1 97) tup(tup(2 98) w54)) w54)) w38)
  ::std::IO::println = fn(ref(w27 w33) fn(w38 _))
}

::std::data::List::to_string::to_string::1 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::numeric::N32::to_string::to_string w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::unicode::String::to_string::to_string { fn(w0 w0) }

::std::numeric::N32::to_string::to_string {
  fn(w0 w10)
  ::std::numeric::N32::eq::ne = fn(ref(w0 w6) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::3 ::std::numeric::N32::to_string::to_string::2 x(w6 w10))))
}

::std::numeric::N32::to_string::to_string::2 {
  x(w6 w9)
  ::std::numeric::N32::to_string::to_string::4 = x(w6 x(tup(0 tup(w7 w7)) w9))
}

::std::numeric::N32::to_string::to_string::3 { x(_ tup(1 tup(tup(48 w5) w5))) }

::std::numeric::N32::to_string::to_string::4 {
  x(w7 w6)
  ::std::numeric::N32::eq::ne = fn(ref(w7 w1) fn(ref(0 _) ?(::std::numeric::N32::to_string::to_string::6 ::std::numeric::N32::to_string::to_string::5 x(w1 w6))))
}

::std::numeric::N32::to_string::to_string::5 {
  x(dup29(w0 w7) x(w11 w15))
  ::std::numeric::N32::rem::rem = fn(w0 fn(10 w1))
  ::std::unicode::Char::add_n32::add = fn(48 fn(w1 w2))
  ::std::data::List::concat::concat = fn(tup(1 tup(tup(w2 w13) w13)) fn(w11 w5))
  ::std::numeric::N32::div::div = fn(w7 fn(10 w8))
  ::std::numeric::N32::to_string::to_string::4 = x(w8 x(w5 w15))
}

::std::numeric::N32::to_string::to_string::6 { x(_ x(w1 w1)) }

::std::numeric::N32::eq::ne { fn(ref(dup35(w0 @n32_ne(w10 out)) w0) fn(ref(dup36(w3 w10) w3) out)) }

::std::data::List::concat::concat {
  fn(tup(w5 tup(w6 w11)) fn(tup(w10 tup(w11 w21)) tup(w18 tup(w6 w21))))
  ::std::numeric::N32::add::add = fn(w5 fn(w10 w18))
}

::std::numeric::N32::add::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::unicode::Char::add_n32::add { fn(@n32_add(w1 out) fn(w1 out)) }

::std::numeric::N32::rem::rem { fn(@n32_rem(w1 out) fn(w1 out)) }

::std::numeric::N32::div::div { fn(@n32_div(w1 out) fn(w1 out)) }

::std::data::List::to_string::to_string::2 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::unicode::String::to_string::to_string w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::data::List::to_string::to_string::3 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::unicode::Char::to_string::to_string w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::unicode::Char::to_string::to_string {
  fn(w0 w5)
  ::std::unicode::String::from_chars::cast = fn(tup(1 tup(tup(w0 w7) w7)) w5)
}

::std::unicode::String::from_chars::cast { fn(w0 w0) }

::std::data::List::to_string::to_string::4 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::logical::Bool::to_string::to_string w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::logical::Bool::to_string::to_string { fn(?(::std::logical::Bool::to_string::to_string::3 ::std::logical::Bool::to_string::to_string::2 w6) w6) }

::std::logical::Bool::to_string::to_string::2 { tup(4 tup(tup(116 tup(114 tup(117 tup(101 w4)))) w4)) }

::std::logical::Bool::to_string::to_string::3 { tup(5 tup(tup(102 tup(97 tup(108 tup(115 tup(101 w4))))) w4)) }

::std::data::List::to_string::to_string::5 {
  fn(w0 tup(w13 tup(tup(91 w14) w15)))
  ::std::data::List::map = fn(w0 fn(::std::unicode::ToString::pair::to_string::1 w5))
  ::std::data::List::join = fn(w5 fn(tup(2 tup(tup(44 tup(32 w12)) w12)) w7))
  ::std::unicode::String::to_string::to_string = fn(w7 tup(@n32_add(2 w13) tup(w14 tup(93 w15))))
}

::std::unicode::ToString::pair::to_string::1 {
  fn(tup(w0 w1) tup(w11 tup(tup(40 w12) w13)))
  ::std::numeric::N32::to_string::to_string = fn(w0 tup(@n32_add(4 w14) tup(w12 tup(44 tup(32 w15)))))
  ::std::unicode::Char::to_string::to_string = fn(w1 tup(@n32_add(w14 w11) tup(w15 tup(41 w13))))
}

::std::numeric::N32::sub::sub { fn(@n32_sub(w1 out) fn(w1 out)) }

::std::data::List::map {
  fn(tup(dup185(w6 w22) tup(w1 _)) fn(w3 tup(w6 tup(w10 w19))))
  ::std::data::List::map::1 = x(w22 x(w1 x(w3 x(w10 w19))))
}

::std::data::List::map::1 {
  x(w9 w8)
  ::std::numeric::N32::eq::ne = fn(ref(w9 w1) fn(ref(0 _) ?(::std::data::List::map::3 ::std::data::List::map::2 x(w1 w8))))
}

::std::data::List::map::2 {
  x(w23 x(tup(w1 w2) x(dup205(fn(w1 w9) w26) x(tup(w9 w11) w25))))
  ::std::numeric::N32::sub::sub = fn(w23 fn(1 w18))
  ::std::data::List::map::1 = x(w18 x(w2 x(w26 x(w11 w25))))
}

::std::data::List::map::3 { x(_ x(_ x(_ x(w1 w1)))) }

::std::data::List::join {
  fn(w0 fn(w1 w14))
  ::std::data::List::into_iter = fn(w0 w5)
  ::std::data::List::IntoIter::next = fn(ref(w5 w10) enum(::std::data::List::join::4 enum(::std::data::List::join::5 x(w1 x(w10 w14)))))
}

::std::data::List::join::4 {
  enum(w0 x(w4 x(w3 w7)))
  ::std::data::List::join::6 = x(w4 x(w3 x(w0 w7)))
}

::std::data::List::join::5 { x(_ x(_ tup(0 tup(w6 w6)))) }

::std::data::List::join::6 {
  x(w8 x(w7 w6))
  ::std::data::List::IntoIter::next = fn(ref(w7 w1) enum(::std::data::List::join::9 enum(::std::data::List::join::10 x(w8 x(w1 w6)))))
}

::std::data::List::join::9 {
  enum(w0 x(dup284(w6 w14) x(w4 x(w3 w12))))
  ::std::data::List::concat::concat = fn(w6 fn(w0 w8))
  ::std::data::List::concat::concat = fn(w3 fn(w8 w10))
  ::std::data::List::join::6 = x(w14 x(w4 x(w10 w12)))
}

::std::data::List::join::10 { x(_ x(_ x(w1 w1))) }

::std::data::List::into_iter { fn(tup(w0 tup(w1 _)) tup(w0 w1)) }

::std::data::List::IntoIter::next {
  fn(ref(tup(w1 w3) tup(w20 w18)) w16)
  ::std::numeric::N32::eq::ne = fn(ref(w1 w12) fn(ref(0 _) ?(::std::data::List::IntoIter::next::3 ::std::data::List::IntoIter::next::2 x(x(w12 w20) x(x(w3 w18) w16)))))
}

::std::data::List::IntoIter::next::2 {
  x(x(w14 w1) x(x(tup(w3 w4) w4) enum(enum(w3 w15) enum(_ w15))))
  ::std::numeric::N32::sub::sub = fn(w14 fn(1 w1))
}

::std::data::List::IntoIter::next::3 { x(x(w4 w4) x(x(w2 w2) ::std::logical::Option::None)) }

::std::unicode::String::to_chars::cast { fn(w0 w0) }

::std::IO::println {
  fn(ref(w1 w12) fn(w3 _))
  ::std::IO::print = fn(ref(w1 w7) fn(w3 _))
  ::std::IO::print_char = fn(ref(w7 w12) fn(10 _))
}

::std::IO::print {
  fn(ref(w1 w15) fn(w3 _))
  ::std::unicode::String::to_chars::cast = fn(w3 tup(w8 tup(w9 _)))
  ::std::IO::print::1 = x(x(w1 w15) x(w8 w9))
}

::std::IO::print::1 {
  x(w8 x(w6 w5))
  ::std::numeric::N32::eq::ne = fn(ref(w6 w1) fn(ref(0 _) ?(::std::IO::print::3 ::std::IO::print::2 x(w8 x(w1 w5)))))
}

::std::IO::print::2 {
  x(x(w17 w21) x(w15 tup(w4 w5)))
  ::std::numeric::N32::sub::sub = fn(w15 fn(1 w1))
  ::std::IO::print_char = fn(ref(w17 w10) fn(w4 _))
  ::std::IO::print::1 = x(x(w10 w21) x(w1 w5))
}

::std::IO::print::3 { x(x(w3 w3) _) }

::std::IO::print_char { fn(ref(@io_print_char(w3 w8) w8) fn(w3 _)) }

